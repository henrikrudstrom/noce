/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifndef SWIG_V8_VERSION
#define SWIG_V8_VERSION 0x031110
#endif


#include <node.h>


#include <v8.h>

#include <errno.h>
#include <limits.h>
#include <stdlib.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* ---------------------------------------------------------------------------
 * These typedefs and defines are used to deal with v8 API changes
 *
 * ---------------------------------------------------------------------------*/

// First v8 version that uses "SetWeak" and not "MakeWeak"

#define SWIGV8_SETWEAK_VERSION 0x032224

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031803)
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::New(cstr, len)
#else
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), cstr, v8::String::kNormalString, len)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::Handle<v8::Value> SwigV8ReturnValue;
typedef v8::Arguments SwigV8Arguments;
typedef v8::AccessorInfo SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) return scope.Close(val)
#define SWIGV8_RETURN_INFO(val, info) return scope.Close(val)
#else
typedef void SwigV8ReturnValue;
typedef v8::FunctionCallbackInfo<v8::Value> SwigV8Arguments;
typedef v8::PropertyCallbackInfo<v8::Value> SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) args.GetReturnValue().Set(val); return
#define SWIGV8_RETURN_INFO(val, info) info.GetReturnValue().Set(val); return
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032117)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#else
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::EscapableHandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Escape(val)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_ADJUST_MEMORY(size) v8::V8::AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Context::GetCurrent()
#define SWIGV8_THROW_EXCEPTION(err) v8::ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::New(str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewSymbol(sym)
#else
#define SWIGV8_ADJUST_MEMORY(size) v8::Isolate::GetCurrent()->AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Isolate::GetCurrent()->GetCurrentContext()
#define SWIGV8_THROW_EXCEPTION(err) v8::Isolate::GetCurrent()->ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), sym)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032318)
#define SWIGV8_ARRAY_NEW() v8::Array::New()
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New()
#define SWIGV8_INT32_NEW(num) v8::Int32::New(num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(num)
#define SWIGV8_OBJECT_NEW() v8::Object::New()
#define SWIGV8_UNDEFINED() v8::Undefined()
#define SWIGV8_NULL() v8::Null()
#else
#define SWIGV8_ARRAY_NEW() v8::Array::New(v8::Isolate::GetCurrent())
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(v8::Isolate::GetCurrent(), bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(v8::Isolate::GetCurrent(), val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(v8::Isolate::GetCurrent(), func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New(v8::Isolate::GetCurrent())
#define SWIGV8_INT32_NEW(num) v8::Int32::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(v8::Isolate::GetCurrent(), num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_OBJECT_NEW() v8::Object::New(v8::Isolate::GetCurrent())
#define SWIGV8_UNDEFINED() v8::Undefined(v8::Isolate::GetCurrent())
#define SWIGV8_NULL() v8::Null(v8::Isolate::GetCurrent())
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(class);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(v8::Isolate::GetCurrent(), class);
#else
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ.Reset(v8::Isolate::GetCurrent(), class);
#endif

/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

#define SWIG_Error(code, msg)     SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_exception(code, msg) SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_fail                 goto fail
#define SWIGV8_OVERLOAD false

SWIGINTERN void SWIG_V8_Raise(const char *msg) {
  SWIGV8_THROW_EXCEPTION(v8::Exception::Error(SWIGV8_STRING_NEW(msg)));
}

/*
  Note: There are two contexts for handling errors.
  A static V8ErrorHandler is used in not overloaded methods.
  For overloaded methods the throwing type checking mechanism is used
  during dispatching. As V8 exceptions can not be resetted properly
  the trick is to use a dynamic ErrorHandler with same local name as the global
  one.

  - See defintion of SWIG_Error above.
  - See code templates 'JS_function_dispatcher', 'JS_functionwrapper_overload',
    and 'JS_function_dispatch_case' in javascriptcode.swg

*/
class V8ErrorHandler {
public:
  virtual ~V8ErrorHandler() {}
  virtual void error(int code, const char *msg) {
    SWIG_V8_Raise(msg);
  }
};
// this is used in usually
SWIGRUNTIME V8ErrorHandler SWIGV8_ErrorHandler;

// instances of this are used in overloaded functions
class OverloadErrorHandler: public V8ErrorHandler {
public:
  virtual void error(int code, const char *msg) {
    err = v8::Exception::Error(SWIGV8_STRING_NEW(msg));
    if(code != SWIG_TypeError) {
        SWIGV8_THROW_EXCEPTION(err);
    }
  }
  v8::Handle<v8::Value> err;
};

/* ---------------------------------------------------------------------------
 * Basic Proxy object
 *
 * ---------------------------------------------------------------------------*/

// Note: to trigger the v8 gc more often one can tell v8 about the memory consumption
// TODO: we could add a v8 specific parameter to control this value
#define SWIGV8_AVG_OBJ_SIZE 1000

class SWIGV8_Proxy {
public:
  SWIGV8_Proxy(): swigCMemOwn(false), swigCObject(0), info(0) {
    SWIGV8_ADJUST_MEMORY(SWIGV8_AVG_OBJ_SIZE);
  };

  ~SWIGV8_Proxy() {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
    handle.ClearWeak();
    handle.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
    handle.ClearWeak(v8::Isolate::GetCurrent());
    handle.Dispose(v8::Isolate::GetCurrent());
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.ClearWeak();
    handle.Dispose();
#else    
    handle.ClearWeak();
    handle.Reset();
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.Clear();
#endif

    SWIGV8_ADJUST_MEMORY(-SWIGV8_AVG_OBJ_SIZE);
  }

  bool swigCMemOwn;
  void *swigCObject;
  swig_type_info *info;
  v8::Persistent<v8::Object> handle;
};

class SWIGV8_ClientData {
public:
  v8::Persistent<v8::FunctionTemplate> class_templ;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  void (*dtor) (v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy);
#else
  void (*dtor) (const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data);
#endif
};

SWIGRUNTIME v8::Persistent<v8::FunctionTemplate> SWIGV8_SWIGTYPE_Proxy_class_templ;

SWIGRUNTIME int SWIG_V8_ConvertInstancePtr(v8::Handle<v8::Object> objRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }
  if(cdata->info != info) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(cdata->info, info);
    if (!tc && cdata->info->name) {
      tc = SWIG_TypeCheck(cdata->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
  }
  *ptr = cdata->swigCObject;
  if(flags & SWIG_POINTER_DISOWN) {
    cdata->swigCMemOwn = false;
  }
  return SWIG_OK;
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy) {
#else
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
  SWIGV8_Proxy *proxy = data.GetParameter();
#endif

  delete proxy;
}

SWIGRUNTIME int SWIG_V8_GetInstancePtr(v8::Handle<v8::Value> valRef, void **ptr) {
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }

  *ptr = cdata->swigCObject;

  return SWIG_OK;
}

SWIGRUNTIME void SWIGV8_SetPrivateData(v8::Handle<v8::Object> obj, void *ptr, swig_type_info *info, int flags) {
  SWIGV8_Proxy *cdata = new SWIGV8_Proxy();
  cdata->swigCObject = ptr;
  cdata->swigCMemOwn = (flags & SWIG_POINTER_OWN) ? 1 : 0;
  cdata->info = info;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  // clientdata must be set for owned data as we need to register the dtor
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#else
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.SetWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

}

SWIGRUNTIME int SWIG_V8_ConvertPtr(v8::Handle<v8::Value> valRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();
  
  /* special case: JavaScript null => C NULL pointer */
  if(valRef->IsNull()) {
    *ptr=0;
    return SWIG_OK;
  }
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  return SWIG_V8_ConvertInstancePtr(objRef, ptr, info, flags);
}

SWIGRUNTIME v8::Handle<v8::Value> SWIG_V8_NewPointerObj(void *ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE_ESC();
  
  v8::Handle<v8::FunctionTemplate> class_templ;

  if (ptr == NULL) {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    SWIGV8_ESCAPE(SWIGV8_NULL());
#else    
    v8::Local<v8::Primitive> result = SWIGV8_NULL();
    SWIGV8_ESCAPE(result);
#endif
  }

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  if(info->clientdata != 0) {
    class_templ = ((SWIGV8_ClientData*) info->clientdata)->class_templ;
  } else {
    class_templ = SWIGV8_SWIGTYPE_Proxy_class_templ;
  }
#else
  v8::Isolate *isolate = v8::Isolate::GetCurrent();

  if(info->clientdata != 0) {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, ((SWIGV8_ClientData*) info->clientdata)->class_templ);
  } else {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, SWIGV8_SWIGTYPE_Proxy_class_templ);
  }
#endif

//  v8::Handle<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  v8::Local<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  SWIGV8_SetPrivateData(result, ptr, info, flags);

  SWIGV8_ESCAPE(result);
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)    SWIG_V8_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)      SWIG_V8_NewPointerObj(ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_V8_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_V8_NewPointerObj(thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_V8_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_V8_NewPointerObj(ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)    SWIG_V8_GetInstancePtr(obj, ptr)

SWIGRUNTIME SwigV8ReturnValue _SWIGV8_wrap_equals(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(args[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult =  SWIGV8_BOOLEAN_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

SWIGRUNTIME SwigV8ReturnValue _wrap_getCPtr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = SWIGV8_NUMBER_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

/* ---------------------------------------------------------------------------
 * PackedData object
 *
 * ---------------------------------------------------------------------------*/

class SwigV8PackedData {
public:
  SwigV8PackedData(void *data, size_t size, swig_type_info *type): data(data), size(size), type(type) {};

  ~SwigV8PackedData() {
  };

  void *data;
  size_t size;
  swig_type_info *type;

  v8::Persistent<v8::Object> handle;
};

SWIGRUNTIMEINLINE
int SwigV8Packed_Check(v8::Handle<v8::Value> valRef) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  if(objRef->InternalFieldCount() < 1) return false;
  v8::Handle<v8::Value> flag = objRef->GetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"));
  return (flag->IsBoolean() && flag->BooleanValue());
}

SWIGRUNTIME
swig_type_info *SwigV8Packed_UnpackData(v8::Handle<v8::Value> valRef, void *ptr, size_t size) {
  if (SwigV8Packed_Check(valRef)) {
    SWIGV8_HANDLESCOPE();
    
    SwigV8PackedData *sobj;

    v8::Handle<v8::Object> objRef = valRef->ToObject();

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
    v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
    sobj = static_cast<SwigV8PackedData*>(v8::External::Unwrap(cdataRef));
#else
    sobj = static_cast<SwigV8PackedData*>(objRef->GetAlignedPointerFromInternalField(0));
#endif
    if (sobj == NULL || sobj->size != size) return 0;
    memcpy(ptr, sobj->data, size);
    return sobj->type;
  } else {
    return 0;
  }
}

SWIGRUNTIME
int SWIGV8_ConvertPacked(v8::Handle<v8::Value> valRef, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigV8Packed_UnpackData(valRef, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Persistent< v8::Value > object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Object> *object, SwigV8PackedData *cdata) {
#else
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackData<v8::Object, SwigV8PackedData> &data) {
  v8::Local<v8::Object> object = data.GetValue();
  SwigV8PackedData *cdata = data.GetParameter();
#endif

  delete cdata;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  object.Clear();
  object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  object.Clear();
  object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  object->Dispose();
#else
  object.Clear();
#endif
}

SWIGRUNTIME
v8::Handle<v8::Value> SWIGV8_NewPackedObj(void *data, size_t size, swig_type_info *type) {
  SWIGV8_HANDLESCOPE_ESC();

  SwigV8PackedData *cdata = new SwigV8PackedData(data, size, type);
//  v8::Handle<v8::Object> obj = SWIGV8_OBJECT_NEW();
  v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();

  obj->SetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"), SWIGV8_BOOLEAN_NEW(true));

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#else
  cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete);
//  v8::V8::SetWeak(&cdata->handle, cdata, _wrap_SwigV8PackedData_delete);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

  SWIGV8_ESCAPE(obj);
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIGV8_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIGV8_NewPackedObj(ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Handle<v8::Value> result, v8::Handle<v8::Value> obj) {
#else
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Local<v8::Value> result, v8::Handle<v8::Value> obj) {
#endif
  SWIGV8_HANDLESCOPE_ESC();
  
  if (result->IsUndefined()) {
    result = SWIGV8_ARRAY_NEW();
  }
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  v8::Handle<v8::Array> arr = v8::Handle<v8::Array>::Cast(result);
#else  
  v8::Local<v8::Array> arr = v8::Local<v8::Array>::Cast(result);
#endif
  arr->Set(arr->Length(), obj);

  SWIGV8_ESCAPE(arr);
}



// Note: since 3.19 there are new CallBack types, since 03.21.9 the old ones have been removed
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::InvocationCallback  SwigV8FunctionCallback;
typedef v8::AccessorGetter      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetter      SwigV8AccessorSetterCallback;
typedef v8::AccessorInfo        SwigV8PropertyCallbackInfoVoid;
#else
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorGetterCallback      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetterCallback      SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#endif

/**
 * Creates a class template for a class with specified initialization function.
 */
SWIGRUNTIME v8::Handle<v8::FunctionTemplate> SWIGV8_CreateClassTemplate(const char* symbol) {
    SWIGV8_HANDLESCOPE_ESC();
    
    v8::Local<v8::FunctionTemplate> class_templ = SWIGV8_FUNCTEMPLATE_NEW_VOID();
    class_templ->SetClassName(SWIGV8_SYMBOL_NEW(symbol));

    v8::Handle<v8::ObjectTemplate> inst_templ = class_templ->InstanceTemplate();
    inst_templ->SetInternalFieldCount(1);

    v8::Handle<v8::ObjectTemplate> equals_templ = class_templ->PrototypeTemplate();
    equals_templ->Set(SWIGV8_SYMBOL_NEW("equals"), SWIGV8_FUNCTEMPLATE_NEW(_SWIGV8_wrap_equals));

    v8::Handle<v8::ObjectTemplate> cptr_templ = class_templ->PrototypeTemplate();
    cptr_templ->Set(SWIGV8_SYMBOL_NEW("getCPtr"), SWIGV8_FUNCTEMPLATE_NEW(_wrap_getCPtr));

    SWIGV8_ESCAPE(class_templ);
}

/**
 * Registers a class method with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberFunction(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8FunctionCallback _func) {
    v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->PrototypeTemplate();
    proto_templ->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func));
}

/**
 * Registers a class property with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberVariable(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->InstanceTemplate();
  proto_templ->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticFunction(v8::Handle<v8::Object> obj, const char* symbol,
  const SwigV8FunctionCallback& _func) {
  obj->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func)->GetFunction());
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticVariable(v8::Handle<v8::Object> obj, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  obj->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info)
{
    char buffer[256];
    char msg[512];
    int res;

    property->WriteUtf8(buffer, 256);
    res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);

    if(res<0) {
      SWIG_exception(SWIG_ERROR, "Tried to write read-only variable.");
    } else {
      SWIG_exception(SWIG_ERROR, msg);
    }
}



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_GeomAbs_Shape swig_types[0]
#define SWIGTYPE_p_Geom_Axis1Placement swig_types[1]
#define SWIGTYPE_p_Geom_AxisPlacement swig_types[2]
#define SWIGTYPE_p_Geom_BoundedCurve swig_types[3]
#define SWIGTYPE_p_Geom_Circle swig_types[4]
#define SWIGTYPE_p_Geom_Conic swig_types[5]
#define SWIGTYPE_p_Geom_Curve swig_types[6]
#define SWIGTYPE_p_Geom_CylindricalSurface swig_types[7]
#define SWIGTYPE_p_Geom_ElementarySurface swig_types[8]
#define SWIGTYPE_p_Geom_Geometry swig_types[9]
#define SWIGTYPE_p_Geom_SphericalSurface swig_types[10]
#define SWIGTYPE_p_Geom_Surface swig_types[11]
#define SWIGTYPE_p_Geom_TrimmedCurve swig_types[12]
#define SWIGTYPE_p_Handle_Geom_Axis1Placement swig_types[13]
#define SWIGTYPE_p_Handle_Geom_AxisPlacement swig_types[14]
#define SWIGTYPE_p_Handle_Geom_BoundedCurve swig_types[15]
#define SWIGTYPE_p_Handle_Geom_Circle swig_types[16]
#define SWIGTYPE_p_Handle_Geom_Conic swig_types[17]
#define SWIGTYPE_p_Handle_Geom_Curve swig_types[18]
#define SWIGTYPE_p_Handle_Geom_CylindricalSurface swig_types[19]
#define SWIGTYPE_p_Handle_Geom_ElementarySurface swig_types[20]
#define SWIGTYPE_p_Handle_Geom_Geometry swig_types[21]
#define SWIGTYPE_p_Handle_Geom_SphericalSurface swig_types[22]
#define SWIGTYPE_p_Handle_Geom_Surface swig_types[23]
#define SWIGTYPE_p_Handle_Geom_TrimmedCurve swig_types[24]
#define SWIGTYPE_p_Handle_MMgt_TShared swig_types[25]
#define SWIGTYPE_p_Handle_Standard_Transient swig_types[26]
#define SWIGTYPE_p_Handle_Standard_Type swig_types[27]
#define SWIGTYPE_p_MMgt_TShared swig_types[28]
#define SWIGTYPE_p_Standard_Transient swig_types[29]
#define SWIGTYPE_p_bool swig_types[30]
#define SWIGTYPE_p_char swig_types[31]
#define SWIGTYPE_p_double swig_types[32]
#define SWIGTYPE_p_gp_Ax1 swig_types[33]
#define SWIGTYPE_p_gp_Ax2 swig_types[34]
#define SWIGTYPE_p_gp_Ax3 swig_types[35]
#define SWIGTYPE_p_gp_Circ swig_types[36]
#define SWIGTYPE_p_gp_Cylinder swig_types[37]
#define SWIGTYPE_p_gp_Dir swig_types[38]
#define SWIGTYPE_p_gp_GTrsf2d swig_types[39]
#define SWIGTYPE_p_gp_Pnt swig_types[40]
#define SWIGTYPE_p_gp_Sphere swig_types[41]
#define SWIGTYPE_p_gp_Trsf swig_types[42]
#define SWIGTYPE_p_gp_Vec swig_types[43]
#define SWIGTYPE_p_int swig_types[44]
static swig_type_info *swig_types[46];
static swig_module_info swig_module = {swig_types, 45, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#define SWIGVERSION 0x030009 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) (void *)((const void *)(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),(void**)(a)) 


#include <stdexcept>


#include <string>


#ifdef WNT
#pragma warning(disable : 4716)
#endif
#include <Standard_Transient.hxx>
#include <MMgt_TShared.hxx>
#include <Handle_Standard_Transient.hxx>
#include <Handle_MMgt_TShared.hxx>


#include <Standard_Failure.hxx>
#include <Standard_ErrorHandler.hxx>


    char* GetErrorMessage(){
        Handle(Standard_Failure) error = Standard_Failure::Caught ();
        char *error_name = (char*) error->DynamicType()->Name();
        char *error_message = (char*) error->GetMessageString();
        // concatenate the two strings
        char *message = (char *)malloc(strlen(error_name) + strlen(error_message) + 1);
        strcpy(message, error_name);
        strcat(message,": ");
        strcat(message, error_message);
        return message;
    }


#include <gp_Pnt.hxx>
#include <gp_Ax1.hxx>
#include <gp_Ax2.hxx>
#include <Standard_Real.hxx>
#include <gp_Vec.hxx>
#include <gp_Trsf.hxx>
#include <Handle_Standard_Type.hxx>
#include <Standard_Boolean.hxx>
#include <gp_Dir.hxx>
#include <gp_Trsf2d.hxx>
#include <gp_Quaternion.hxx>
#include <gp_Ax3.hxx>
#include <gp_TrsfForm.hxx>
#include <gp_Mat.hxx>
#include <Standard_Integer.hxx>
#include <gp_GTrsf2d.hxx>
#include <Geom_Curve.hxx>
#include <Handle_Geom_Curve.hxx>
#include <GeomAbs_Shape.hxx>
#include <gp_Sphere.hxx>
#include <Geom_Geometry.hxx>
#include <Handle_Geom_Geometry.hxx>
#include <gp_Cylinder.hxx>
#include <gp_Circ.hxx>
#include <GC_MakeCircle.hxx>
#include <Geom_Surface.hxx>
#include <Handle_Geom_Surface.hxx>
#include <Geom_ElementarySurface.hxx>
#include <Handle_Geom_ElementarySurface.hxx>
#include <Geom_SphericalSurface.hxx>
#include <Handle_Geom_SphericalSurface.hxx>
#include <Geom_CylindricalSurface.hxx>
#include <Handle_Geom_CylindricalSurface.hxx>
#include <Geom_AxisPlacement.hxx>
#include <Handle_Geom_AxisPlacement.hxx>
#include <Geom_Axis1Placement.hxx>
#include <Handle_Geom_Axis1Placement.hxx>
#include <Geom_Conic.hxx>
#include <Handle_Geom_Conic.hxx>
#include <Geom_BoundedCurve.hxx>
#include <Handle_Geom_BoundedCurve.hxx>
#include <Geom_Circle.hxx>
#include <Handle_Geom_Circle.hxx>
#include <Geom_TrimmedCurve.hxx>
#include <Handle_Geom_TrimmedCurve.hxx>
#include <Geom_Geometry.hxx>
#include <Handle_Geom_Geometry.hxx>
#include <Geom_Surface.hxx>
#include <Handle_Geom_Surface.hxx>
#include <Geom_ElementarySurface.hxx>
#include <Handle_Geom_ElementarySurface.hxx>
#include <Geom_SphericalSurface.hxx>
#include <Handle_Geom_SphericalSurface.hxx>
#include <Geom_CylindricalSurface.hxx>
#include <Handle_Geom_CylindricalSurface.hxx>
#include <Geom_AxisPlacement.hxx>
#include <Handle_Geom_AxisPlacement.hxx>
#include <Geom_Axis1Placement.hxx>
#include <Handle_Geom_Axis1Placement.hxx>
#include <Geom_Curve.hxx>
#include <Handle_Geom_Curve.hxx>
#include <Geom_Conic.hxx>
#include <Handle_Geom_Conic.hxx>
#include <Geom_BoundedCurve.hxx>
#include <Handle_Geom_BoundedCurve.hxx>
#include <Geom_Circle.hxx>
#include <Handle_Geom_Circle.hxx>
#include <Geom_TrimmedCurve.hxx>
#include <Handle_Geom_TrimmedCurve.hxx>
#include <Handle_Geom_Geometry.hxx>
#include <Handle_Geom_Surface.hxx>
#include <Handle_Geom_ElementarySurface.hxx>
#include <Handle_Geom_SphericalSurface.hxx>
#include <Handle_Geom_CylindricalSurface.hxx>
#include <Handle_Geom_AxisPlacement.hxx>
#include <Handle_Geom_Axis1Placement.hxx>
#include <Handle_Geom_Curve.hxx>
#include <Handle_Geom_Conic.hxx>
#include <Handle_Geom_BoundedCurve.hxx>
#include <Handle_Geom_Circle.hxx>
#include <Handle_Geom_TrimmedCurve.hxx>
#include <MMgt_TShared.hxx>
#include <Handle_MMgt_TShared.hxx>
#include <Handle_MMgt_TShared.hxx>


SWIGINTERN
int SWIG_AsVal_double (v8::Handle<v8::Value> obj, double *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = obj->NumberValue();

  return SWIG_OK;
}


SWIGINTERN
v8::Handle<v8::Value> SWIG_From_double   (double val)
{
  return SWIGV8_NUMBER_NEW(val);
}


SWIGINTERNINLINE
v8::Handle<v8::Value>
SWIG_From_bool  (bool value)
{
  return SWIGV8_BOOLEAN_NEW(value);
}


SWIGINTERN
int SWIG_AsVal_int (v8::Handle<v8::Value> valRef, int* val)
{
  if (!valRef->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = valRef->IntegerValue();

  return SWIG_OK;
}

SWIGINTERN Handle_Geom_Circle const Geom_Circle_makeCircle__SWIG_0(gp_Circ const &C){
    GC_MakeCircle* obj = new GC_MakeCircle(C);
    return obj->Value();
  }
SWIGINTERN Handle_Geom_Circle const Geom_Circle_makeCircle__SWIG_1(gp_Ax2 const &A2,Standard_Real const Radius){
    GC_MakeCircle* obj = new GC_MakeCircle(A2, Radius);
    return obj->Value();
  }
SWIGINTERN Handle_Geom_Circle const Geom_Circle_makeCircle__SWIG_2(gp_Circ const &Circ,Standard_Real const Dist){
    GC_MakeCircle* obj = new GC_MakeCircle(Circ, Dist);
    return obj->Value();
  }
SWIGINTERN Handle_Geom_Circle const Geom_Circle_makeCircle__SWIG_3(gp_Circ const &Circ,gp_Pnt const &Point){
    GC_MakeCircle* obj = new GC_MakeCircle(Circ, Point);
    return obj->Value();
  }
SWIGINTERN Handle_Geom_Circle const Geom_Circle_makeCircle__SWIG_4(gp_Pnt const &P1,gp_Pnt const &P2,gp_Pnt const &P3){
    GC_MakeCircle* obj = new GC_MakeCircle(P1, P2, P3);
    return obj->Value();
  }
SWIGINTERN Handle_Geom_Circle const Geom_Circle_makeCircle__SWIG_5(gp_Pnt const &Center,gp_Dir const &Norm,Standard_Real const Radius){
    GC_MakeCircle* obj = new GC_MakeCircle(Center, Norm, Radius);
    return obj->Value();
  }
SWIGINTERN Handle_Geom_Circle const Geom_Circle_makeCircle__SWIG_6(gp_Pnt const &Center,gp_Pnt const &PtAxis,Standard_Real const Radius){
    GC_MakeCircle* obj = new GC_MakeCircle(Center, PtAxis, Radius);
    return obj->Value();
  }
SWIGINTERN Handle_Geom_Circle const Geom_Circle_makeCircle__SWIG_7(gp_Ax1 const &Axis,Standard_Real const Radius){
    GC_MakeCircle* obj = new GC_MakeCircle(Axis, Radius);
    return obj->Value();
  }

#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN
int SWIG_AsVal_long (v8::Handle<v8::Value> obj, long* val)
{
  if (!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = (long) obj->IntegerValue();

  return SWIG_OK;
}


SWIGINTERN
int SWIG_AsVal_bool (v8::Handle<v8::Value> obj, bool *val)
{
  if(!obj->IsBoolean()) {
    return SWIG_ERROR;
  }

  if (val) *val = obj->BooleanValue();
  return SWIG_OK;
}


#define SWIGV8_INIT gp_initialize


SWIGV8_ClientData _exports_Standard_Transient_clientData;
SWIGV8_ClientData _exports_MMgt_TShared_clientData;
SWIGV8_ClientData _exports_Handle_Standard_Transient_clientData;
SWIGV8_ClientData _exports_Handle_MMgt_TShared_clientData;
SWIGV8_ClientData _exports_Geometry_clientData;
SWIGV8_ClientData _exports_Surface_clientData;
SWIGV8_ClientData _exports_ElementarySurface_clientData;
SWIGV8_ClientData _exports_SphericalSurface_clientData;
SWIGV8_ClientData _exports_CylindricalSurface_clientData;
SWIGV8_ClientData _exports_AxisPlacement_clientData;
SWIGV8_ClientData _exports_Axis1Placement_clientData;
SWIGV8_ClientData _exports_Curve_clientData;
SWIGV8_ClientData _exports_Conic_clientData;
SWIGV8_ClientData _exports_BoundedCurve_clientData;
SWIGV8_ClientData _exports_Circle_clientData;
SWIGV8_ClientData _exports_TrimmedCurve_clientData;
SWIGV8_ClientData _exports_Handle_Geometry_clientData;
SWIGV8_ClientData _exports_Handle_Surface_clientData;
SWIGV8_ClientData _exports_Handle_ElementarySurface_clientData;
SWIGV8_ClientData _exports_Handle_SphericalSurface_clientData;
SWIGV8_ClientData _exports_Handle_CylindricalSurface_clientData;
SWIGV8_ClientData _exports_Handle_AxisPlacement_clientData;
SWIGV8_ClientData _exports_Handle_Axis1Placement_clientData;
SWIGV8_ClientData _exports_Handle_Curve_clientData;
SWIGV8_ClientData _exports_Handle_Conic_clientData;
SWIGV8_ClientData _exports_Handle_BoundedCurve_clientData;
SWIGV8_ClientData _exports_Handle_Circle_clientData;
SWIGV8_ClientData _exports_Handle_TrimmedCurve_clientData;


static SwigV8ReturnValue _wrap_new_Standard_Transient(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Standard_Transient *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Standard_Transient.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Transient *)new Standard_Transient();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Standard_Transient, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Standard_Transient(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Standard_Transient(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Standard_Transient(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Standard_Transient(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Standard_Transient * arg1 = (Standard_Transient *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_MMgt_TShared(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  MMgt_TShared *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_MMgt_TShared.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (MMgt_TShared *)new MMgt_TShared();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_MMgt_TShared, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_MMgt_TShared(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_MMgt_TShared(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_MMgt_TShared(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_MMgt_TShared(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          MMgt_TShared * arg1 = (MMgt_TShared *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_Standard_Transient(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Standard_Transient *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Standard_Transient.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Standard_Transient *)new Handle_Standard_Transient();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Standard_Transient, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_Standard_Transient(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_Standard_Transient(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_Standard_Transient(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_Standard_Transient(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Standard_Transient * arg1 = (Handle_Standard_Transient *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_MMgt_TShared(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_MMgt_TShared *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_MMgt_TShared.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_MMgt_TShared *)new Handle_MMgt_TShared();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_MMgt_TShared, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_MMgt_TShared(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_MMgt_TShared(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_MMgt_TShared(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_MMgt_TShared(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_MMgt_TShared * arg1 = (Handle_MMgt_TShared *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_Geometry_mirror__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Geometry *arg1 = (Geom_Geometry *) 0 ;
  gp_Pnt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_mirror" "', argument " "1"" of type '" "Geom_Geometry *""'"); 
  }
  arg1 = (Geom_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_mirror" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_mirror" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  arg2 = (gp_Pnt *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Mirror((gp_Pnt const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_mirror__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Geometry *arg1 = (Geom_Geometry *) 0 ;
  gp_Ax1 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_mirror" "', argument " "1"" of type '" "Geom_Geometry *""'"); 
  }
  arg1 = (Geom_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Ax1,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_mirror" "', argument " "2"" of type '" "gp_Ax1 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_mirror" "', argument " "2"" of type '" "gp_Ax1 const &""'"); 
  }
  arg2 = (gp_Ax1 *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Mirror((gp_Ax1 const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_mirror__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Geometry *arg1 = (Geom_Geometry *) 0 ;
  gp_Ax2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_mirror" "', argument " "1"" of type '" "Geom_Geometry *""'"); 
  }
  arg1 = (Geom_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Ax2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_mirror" "', argument " "2"" of type '" "gp_Ax2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_mirror" "', argument " "2"" of type '" "gp_Ax2 const &""'"); 
  }
  arg2 = (gp_Ax2 *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Mirror((gp_Ax2 const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry__wrap_Geometry_mirror(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Geometry_mirror__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Geometry_mirror__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Geometry_mirror__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Geometry_mirror__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Geometry_mirror__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Geometry_mirror__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mirror.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_rotate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Geometry *arg1 = (Geom_Geometry *) 0 ;
  gp_Ax1 *arg2 = 0 ;
  Standard_Real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Geometry_rotate.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_rotate" "', argument " "1"" of type '" "Geom_Geometry *""'"); 
  }
  arg1 = (Geom_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Ax1,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_rotate" "', argument " "2"" of type '" "gp_Ax1 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_rotate" "', argument " "2"" of type '" "gp_Ax1 const &""'"); 
  }
  arg2 = (gp_Ax1 *)(argp2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Geometry_rotate" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Rotate((gp_Ax1 const &)*arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_scale(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Geometry *arg1 = (Geom_Geometry *) 0 ;
  gp_Pnt *arg2 = 0 ;
  Standard_Real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Geometry_scale.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_scale" "', argument " "1"" of type '" "Geom_Geometry *""'"); 
  }
  arg1 = (Geom_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_scale" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_scale" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  arg2 = (gp_Pnt *)(argp2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Geometry_scale" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Scale((gp_Pnt const &)*arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_translate__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Geometry *arg1 = (Geom_Geometry *) 0 ;
  gp_Vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_translate" "', argument " "1"" of type '" "Geom_Geometry *""'"); 
  }
  arg1 = (Geom_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_translate" "', argument " "2"" of type '" "gp_Vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_translate" "', argument " "2"" of type '" "gp_Vec const &""'"); 
  }
  arg2 = (gp_Vec *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Translate((gp_Vec const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_translate__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Geometry *arg1 = (Geom_Geometry *) 0 ;
  gp_Pnt *arg2 = 0 ;
  gp_Pnt *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_translate" "', argument " "1"" of type '" "Geom_Geometry *""'"); 
  }
  arg1 = (Geom_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_translate" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_translate" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  arg2 = (gp_Pnt *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Geometry_translate" "', argument " "3"" of type '" "gp_Pnt const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_translate" "', argument " "3"" of type '" "gp_Pnt const &""'"); 
  }
  arg3 = (gp_Pnt *)(argp3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Translate((gp_Pnt const &)*arg2,(gp_Pnt const &)*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry__wrap_Geometry_translate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Geometry_translate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Geometry_translate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Geometry_translate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Geometry_translate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function translate.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_transform(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Geometry *arg1 = (Geom_Geometry *) 0 ;
  gp_Trsf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Geometry_transform.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_transform" "', argument " "1"" of type '" "Geom_Geometry *""'"); 
  }
  arg1 = (Geom_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_transform" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_transform" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  arg2 = (gp_Trsf *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Transform((gp_Trsf const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_mirrored__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Geometry *arg1 = (Geom_Geometry *) 0 ;
  gp_Pnt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Handle_Geom_Geometry result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_mirrored" "', argument " "1"" of type '" "Geom_Geometry *""'"); 
  }
  arg1 = (Geom_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_mirrored" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_mirrored" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  arg2 = (gp_Pnt *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Mirrored((gp_Pnt const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Geometry *handle = (Handle_Geom_Geometry *)new Handle_Geom_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_mirrored__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Geometry *arg1 = (Geom_Geometry *) 0 ;
  gp_Ax1 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Handle_Geom_Geometry result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_mirrored" "', argument " "1"" of type '" "Geom_Geometry *""'"); 
  }
  arg1 = (Geom_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Ax1,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_mirrored" "', argument " "2"" of type '" "gp_Ax1 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_mirrored" "', argument " "2"" of type '" "gp_Ax1 const &""'"); 
  }
  arg2 = (gp_Ax1 *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Mirrored((gp_Ax1 const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Geometry *handle = (Handle_Geom_Geometry *)new Handle_Geom_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_mirrored__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Geometry *arg1 = (Geom_Geometry *) 0 ;
  gp_Ax2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Handle_Geom_Geometry result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_mirrored" "', argument " "1"" of type '" "Geom_Geometry *""'"); 
  }
  arg1 = (Geom_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Ax2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_mirrored" "', argument " "2"" of type '" "gp_Ax2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_mirrored" "', argument " "2"" of type '" "gp_Ax2 const &""'"); 
  }
  arg2 = (gp_Ax2 *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Mirrored((gp_Ax2 const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Geometry *handle = (Handle_Geom_Geometry *)new Handle_Geom_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry__wrap_Geometry_mirrored(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Geometry_mirrored__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Geometry_mirrored__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Geometry_mirrored__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Geometry_mirrored__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Geometry_mirrored__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Geometry_mirrored__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mirrored.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_rotated(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Geometry *arg1 = (Geom_Geometry *) 0 ;
  gp_Ax1 *arg2 = 0 ;
  Standard_Real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  Handle_Geom_Geometry result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Geometry_rotated.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_rotated" "', argument " "1"" of type '" "Geom_Geometry *""'"); 
  }
  arg1 = (Geom_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Ax1,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_rotated" "', argument " "2"" of type '" "gp_Ax1 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_rotated" "', argument " "2"" of type '" "gp_Ax1 const &""'"); 
  }
  arg2 = (gp_Ax1 *)(argp2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Geometry_rotated" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Rotated((gp_Ax1 const &)*arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Geometry *handle = (Handle_Geom_Geometry *)new Handle_Geom_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_scaled(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Geometry *arg1 = (Geom_Geometry *) 0 ;
  gp_Pnt *arg2 = 0 ;
  Standard_Real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  Handle_Geom_Geometry result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Geometry_scaled.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_scaled" "', argument " "1"" of type '" "Geom_Geometry *""'"); 
  }
  arg1 = (Geom_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_scaled" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_scaled" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  arg2 = (gp_Pnt *)(argp2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Geometry_scaled" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Scaled((gp_Pnt const &)*arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Geometry *handle = (Handle_Geom_Geometry *)new Handle_Geom_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_transformed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Geometry *arg1 = (Geom_Geometry *) 0 ;
  gp_Trsf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Handle_Geom_Geometry result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Geometry_transformed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_transformed" "', argument " "1"" of type '" "Geom_Geometry *""'"); 
  }
  arg1 = (Geom_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_transformed" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_transformed" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  arg2 = (gp_Trsf *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Transformed((gp_Trsf const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Geometry *handle = (Handle_Geom_Geometry *)new Handle_Geom_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_translated__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Geometry *arg1 = (Geom_Geometry *) 0 ;
  gp_Vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Handle_Geom_Geometry result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_translated" "', argument " "1"" of type '" "Geom_Geometry *""'"); 
  }
  arg1 = (Geom_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_translated" "', argument " "2"" of type '" "gp_Vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_translated" "', argument " "2"" of type '" "gp_Vec const &""'"); 
  }
  arg2 = (gp_Vec *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Translated((gp_Vec const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Geometry *handle = (Handle_Geom_Geometry *)new Handle_Geom_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_translated__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Geometry *arg1 = (Geom_Geometry *) 0 ;
  gp_Pnt *arg2 = 0 ;
  gp_Pnt *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Handle_Geom_Geometry result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_translated" "', argument " "1"" of type '" "Geom_Geometry *""'"); 
  }
  arg1 = (Geom_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_translated" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_translated" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  arg2 = (gp_Pnt *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Geometry_translated" "', argument " "3"" of type '" "gp_Pnt const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_translated" "', argument " "3"" of type '" "gp_Pnt const &""'"); 
  }
  arg3 = (gp_Pnt *)(argp3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Translated((gp_Pnt const &)*arg2,(gp_Pnt const &)*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Geometry *handle = (Handle_Geom_Geometry *)new Handle_Geom_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry__wrap_Geometry_translated(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Geometry_translated__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Geometry_translated__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Geometry_translated__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Geometry_translated__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function translated.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_copy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Geometry *arg1 = (Geom_Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_Geometry result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Geometry_copy.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_copy" "', argument " "1"" of type '" "Geom_Geometry *""'"); 
  }
  arg1 = (Geom_Geometry *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Copy();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Geometry *handle = (Handle_Geom_Geometry *)new Handle_Geom_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_dynamicType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Geometry *arg1 = (Geom_Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Standard_Type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Geometry_dynamicType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_dynamicType" "', argument " "1"" of type '" "Geom_Geometry *""'"); 
  }
  arg1 = (Geom_Geometry *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DynamicType();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new Handle_Standard_Type((const Handle_Standard_Type&)(result))), SWIGTYPE_p_Handle_Standard_Type, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Geometry(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Geometry(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Geometry(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Geometry(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom_Geometry * arg1 = (Geom_Geometry *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_Geometry(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class Geometry can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_ureverse(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_ureverse.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_ureverse" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->UReverse();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_ureversed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_Surface result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_ureversed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_ureversed" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->UReversed();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Surface *handle = (Handle_Geom_Surface *)new Handle_Geom_Surface(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_ureversedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_ureversedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_ureversedParameter" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Surface_ureversedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->UReversedParameter(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_vreverse(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_vreverse.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_vreverse" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->VReverse();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_vreversed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_Surface result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_vreversed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_vreversed" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->VReversed();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Surface *handle = (Handle_Geom_Surface *)new Handle_Geom_Surface(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_vreversedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_vreversedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_vreversedParameter" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Surface_vreversedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->VReversedParameter(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_transformParameters(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  Standard_Real *arg2 = 0 ;
  Standard_Real *arg3 = 0 ;
  gp_Trsf *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real argout12 ;
  Standard_Real argout22 ;
  gp_Trsf argout32 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_transformParameters.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_transformParameters" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  {
    // argoutin
    arg2 = &argout12;
    arg3 = &argout22;
    arg4 = &argout32;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->TransformParameters(*arg2,*arg3,(gp_Trsf const &)*arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // argoutout
    
    v8::Handle<v8::Array> array = v8::Array::New(v8::Isolate::GetCurrent(), 4);
    array->Set(0, SWIG_From_double(*arg2));
    array->Set(1, SWIG_From_double(*arg3));
    array->Set(2, SWIG_NewPointerObj((new gp_Trsf((const gp_Trsf&)arg4)), SWIGTYPE_p_gp_Trsf, SWIG_POINTER_OWN |  0 ));
    jsresult = array;
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_parametricTransformation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  gp_Trsf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gp_GTrsf2d result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_parametricTransformation.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_parametricTransformation" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Surface_parametricTransformation" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_parametricTransformation" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  arg2 = (gp_Trsf *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->ParametricTransformation((gp_Trsf const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_GTrsf2d((const gp_GTrsf2d&)(result))), SWIGTYPE_p_gp_GTrsf2d, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_bounds(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  Standard_Real *arg2 = 0 ;
  Standard_Real *arg3 = 0 ;
  Standard_Real *arg4 = 0 ;
  Standard_Real *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real argout12 ;
  Standard_Real argout22 ;
  Standard_Real argout32 ;
  Standard_Real argout42 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_bounds.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_bounds" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  {
    // argoutin
    arg2 = &argout12;
    arg3 = &argout22;
    arg4 = &argout32;
    arg5 = &argout42;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Bounds(*arg2,*arg3,*arg4,*arg5);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // argoutout
    
    v8::Handle<v8::Array> array = v8::Array::New(v8::Isolate::GetCurrent(), 4);
    array->Set(0, SWIG_From_double(*arg2));
    array->Set(1, SWIG_From_double(*arg3));
    array->Set(2, SWIG_From_double(*arg4));
    array->Set(3, SWIG_From_double(*arg5));
    jsresult = array;
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_isUclosed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_isUclosed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_isUclosed" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsUClosed();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_isVclosed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_isVclosed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_isVclosed" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsVClosed();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_isUperiodic(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_isUperiodic.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_isUperiodic" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsUPeriodic();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_uperiod(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_uperiod.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_uperiod" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->UPeriod();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_isVperiodic(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_isVperiodic.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_isVperiodic" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsVPeriodic();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_vperiod(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_vperiod.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_vperiod" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->VPeriod();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_uiso(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Handle_Geom_Curve result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_uiso.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_uiso" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Surface_uiso" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->UIso(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Curve *handle = (Handle_Geom_Curve *)new Handle_Geom_Curve(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_viso(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Handle_Geom_Curve result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_viso.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_viso" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Surface_viso" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->VIso(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Curve *handle = (Handle_Geom_Curve *)new Handle_Geom_Curve(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_continuity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GeomAbs_Shape result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_continuity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_continuity" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Continuity();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new GeomAbs_Shape((const GeomAbs_Shape&)(result))), SWIGTYPE_p_GeomAbs_Shape, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_isCnu(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  Standard_Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_isCnu.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_isCnu" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Surface_isCnu" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsCNu(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_isCnv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  Standard_Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_isCnv.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_isCnv" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Surface_isCnv" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsCNv(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_d0(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_Pnt *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_d0.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_d0" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Surface_d0" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Surface_d0" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Surface_d0" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_d0" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  arg4 = (gp_Pnt *)(argp4);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D0(arg2,arg3,*arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_d1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_Pnt *arg4 = 0 ;
  gp_Vec *arg5 = 0 ;
  gp_Vec *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_d1.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_d1" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Surface_d1" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Surface_d1" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Surface_d1" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_d1" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  arg4 = (gp_Pnt *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Surface_d1" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_d1" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  arg5 = (gp_Vec *)(argp5);
  res6 = SWIG_ConvertPtr(args[4], &argp6, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Surface_d1" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_d1" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  arg6 = (gp_Vec *)(argp6);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D1(arg2,arg3,*arg4,*arg5,*arg6);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_d2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_Pnt *arg4 = 0 ;
  gp_Vec *arg5 = 0 ;
  gp_Vec *arg6 = 0 ;
  gp_Vec *arg7 = 0 ;
  gp_Vec *arg8 = 0 ;
  gp_Vec *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_d2.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_d2" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Surface_d2" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Surface_d2" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Surface_d2" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_d2" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  arg4 = (gp_Pnt *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Surface_d2" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_d2" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  arg5 = (gp_Vec *)(argp5);
  res6 = SWIG_ConvertPtr(args[4], &argp6, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Surface_d2" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_d2" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  arg6 = (gp_Vec *)(argp6);
  res7 = SWIG_ConvertPtr(args[5], &argp7, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Surface_d2" "', argument " "7"" of type '" "gp_Vec &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_d2" "', argument " "7"" of type '" "gp_Vec &""'"); 
  }
  arg7 = (gp_Vec *)(argp7);
  res8 = SWIG_ConvertPtr(args[6], &argp8, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Surface_d2" "', argument " "8"" of type '" "gp_Vec &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_d2" "', argument " "8"" of type '" "gp_Vec &""'"); 
  }
  arg8 = (gp_Vec *)(argp8);
  res9 = SWIG_ConvertPtr(args[7], &argp9, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Surface_d2" "', argument " "9"" of type '" "gp_Vec &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_d2" "', argument " "9"" of type '" "gp_Vec &""'"); 
  }
  arg9 = (gp_Vec *)(argp9);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D2(arg2,arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_d3(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_Pnt *arg4 = 0 ;
  gp_Vec *arg5 = 0 ;
  gp_Vec *arg6 = 0 ;
  gp_Vec *arg7 = 0 ;
  gp_Vec *arg8 = 0 ;
  gp_Vec *arg9 = 0 ;
  gp_Vec *arg10 = 0 ;
  gp_Vec *arg11 = 0 ;
  gp_Vec *arg12 = 0 ;
  gp_Vec *arg13 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  
  if(args.Length() != 12) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_d3.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_d3" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Surface_d3" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Surface_d3" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Surface_d3" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_d3" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  arg4 = (gp_Pnt *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Surface_d3" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_d3" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  arg5 = (gp_Vec *)(argp5);
  res6 = SWIG_ConvertPtr(args[4], &argp6, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Surface_d3" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_d3" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  arg6 = (gp_Vec *)(argp6);
  res7 = SWIG_ConvertPtr(args[5], &argp7, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Surface_d3" "', argument " "7"" of type '" "gp_Vec &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_d3" "', argument " "7"" of type '" "gp_Vec &""'"); 
  }
  arg7 = (gp_Vec *)(argp7);
  res8 = SWIG_ConvertPtr(args[6], &argp8, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Surface_d3" "', argument " "8"" of type '" "gp_Vec &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_d3" "', argument " "8"" of type '" "gp_Vec &""'"); 
  }
  arg8 = (gp_Vec *)(argp8);
  res9 = SWIG_ConvertPtr(args[7], &argp9, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Surface_d3" "', argument " "9"" of type '" "gp_Vec &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_d3" "', argument " "9"" of type '" "gp_Vec &""'"); 
  }
  arg9 = (gp_Vec *)(argp9);
  res10 = SWIG_ConvertPtr(args[8], &argp10, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Surface_d3" "', argument " "10"" of type '" "gp_Vec &""'"); 
  }
  if (!argp10) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_d3" "', argument " "10"" of type '" "gp_Vec &""'"); 
  }
  arg10 = (gp_Vec *)(argp10);
  res11 = SWIG_ConvertPtr(args[9], &argp11, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "Surface_d3" "', argument " "11"" of type '" "gp_Vec &""'"); 
  }
  if (!argp11) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_d3" "', argument " "11"" of type '" "gp_Vec &""'"); 
  }
  arg11 = (gp_Vec *)(argp11);
  res12 = SWIG_ConvertPtr(args[10], &argp12, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "Surface_d3" "', argument " "12"" of type '" "gp_Vec &""'"); 
  }
  if (!argp12) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_d3" "', argument " "12"" of type '" "gp_Vec &""'"); 
  }
  arg12 = (gp_Vec *)(argp12);
  res13 = SWIG_ConvertPtr(args[11], &argp13, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "Surface_d3" "', argument " "13"" of type '" "gp_Vec &""'"); 
  }
  if (!argp13) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Surface_d3" "', argument " "13"" of type '" "gp_Vec &""'"); 
  }
  arg13 = (gp_Vec *)(argp13);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D3(arg2,arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11,*arg12,*arg13);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_dn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Integer arg4 ;
  Standard_Integer arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  gp_Vec result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_dn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_dn" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Surface_dn" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Surface_dn" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Surface_dn" "', argument " "4"" of type '" "Standard_Integer""'");
  } 
  arg4 = (Standard_Integer)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Surface_dn" "', argument " "5"" of type '" "Standard_Integer""'");
  } 
  arg5 = (Standard_Integer)(val5);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DN(arg2,arg3,arg4,arg5);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Vec((const gp_Vec&)(result))), SWIGTYPE_p_gp_Vec, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  gp_Pnt result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_value.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_value" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Surface_value" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Surface_value" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Value(arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt((const gp_Pnt&)(result))), SWIGTYPE_p_gp_Pnt, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Surface_dynamicType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Standard_Type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Surface_dynamicType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_dynamicType" "', argument " "1"" of type '" "Geom_Surface *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DynamicType();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new Handle_Standard_Type((const Handle_Standard_Type&)(result))), SWIGTYPE_p_Handle_Standard_Type, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Surface(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Surface(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Surface(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Surface(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom_Surface * arg1 = (Geom_Surface *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_Surface(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class Surface can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ElementarySurface_setAxis(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_ElementarySurface *arg1 = (Geom_ElementarySurface *) 0 ;
  gp_Ax1 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ElementarySurface_setAxis.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_ElementarySurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementarySurface_setAxis" "', argument " "1"" of type '" "Geom_ElementarySurface *""'"); 
  }
  arg1 = (Geom_ElementarySurface *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Ax1,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementarySurface_setAxis" "', argument " "2"" of type '" "gp_Ax1 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElementarySurface_setAxis" "', argument " "2"" of type '" "gp_Ax1 const &""'"); 
  }
  arg2 = (gp_Ax1 *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetAxis((gp_Ax1 const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ElementarySurface_setLocation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_ElementarySurface *arg1 = (Geom_ElementarySurface *) 0 ;
  gp_Pnt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ElementarySurface_setLocation.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_ElementarySurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementarySurface_setLocation" "', argument " "1"" of type '" "Geom_ElementarySurface *""'"); 
  }
  arg1 = (Geom_ElementarySurface *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementarySurface_setLocation" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElementarySurface_setLocation" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  arg2 = (gp_Pnt *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetLocation((gp_Pnt const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ElementarySurface_setPosition(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_ElementarySurface *arg1 = (Geom_ElementarySurface *) 0 ;
  gp_Ax3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ElementarySurface_setPosition.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_ElementarySurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementarySurface_setPosition" "', argument " "1"" of type '" "Geom_ElementarySurface *""'"); 
  }
  arg1 = (Geom_ElementarySurface *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Ax3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementarySurface_setPosition" "', argument " "2"" of type '" "gp_Ax3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElementarySurface_setPosition" "', argument " "2"" of type '" "gp_Ax3 const &""'"); 
  }
  arg2 = (gp_Ax3 *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetPosition((gp_Ax3 const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ElementarySurface_axis(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_ElementarySurface *arg1 = (Geom_ElementarySurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Ax1 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ElementarySurface_axis.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_ElementarySurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementarySurface_axis" "', argument " "1"" of type '" "Geom_ElementarySurface *""'"); 
  }
  arg1 = (Geom_ElementarySurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Axis();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Ax1((const gp_Ax1&)(result))), SWIGTYPE_p_gp_Ax1, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ElementarySurface_location(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_ElementarySurface *arg1 = (Geom_ElementarySurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Pnt result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ElementarySurface_location.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_ElementarySurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementarySurface_location" "', argument " "1"" of type '" "Geom_ElementarySurface *""'"); 
  }
  arg1 = (Geom_ElementarySurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Location();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt((const gp_Pnt&)(result))), SWIGTYPE_p_gp_Pnt, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ElementarySurface_position(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_ElementarySurface *arg1 = (Geom_ElementarySurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Ax3 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ElementarySurface_position.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_ElementarySurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementarySurface_position" "', argument " "1"" of type '" "Geom_ElementarySurface *""'"); 
  }
  arg1 = (Geom_ElementarySurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Position();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Ax3((const gp_Ax3&)(result))), SWIGTYPE_p_gp_Ax3, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ElementarySurface_ureverse(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_ElementarySurface *arg1 = (Geom_ElementarySurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ElementarySurface_ureverse.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_ElementarySurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementarySurface_ureverse" "', argument " "1"" of type '" "Geom_ElementarySurface *""'"); 
  }
  arg1 = (Geom_ElementarySurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->UReverse();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ElementarySurface_ureversedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_ElementarySurface *arg1 = (Geom_ElementarySurface *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ElementarySurface_ureversedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_ElementarySurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementarySurface_ureversedParameter" "', argument " "1"" of type '" "Geom_ElementarySurface *""'"); 
  }
  arg1 = (Geom_ElementarySurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementarySurface_ureversedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->UReversedParameter(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ElementarySurface_vreverse(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_ElementarySurface *arg1 = (Geom_ElementarySurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ElementarySurface_vreverse.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_ElementarySurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementarySurface_vreverse" "', argument " "1"" of type '" "Geom_ElementarySurface *""'"); 
  }
  arg1 = (Geom_ElementarySurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->VReverse();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ElementarySurface_vreversedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_ElementarySurface *arg1 = (Geom_ElementarySurface *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ElementarySurface_vreversedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_ElementarySurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementarySurface_vreversedParameter" "', argument " "1"" of type '" "Geom_ElementarySurface *""'"); 
  }
  arg1 = (Geom_ElementarySurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementarySurface_vreversedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->VReversedParameter(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ElementarySurface_continuity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_ElementarySurface *arg1 = (Geom_ElementarySurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GeomAbs_Shape result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ElementarySurface_continuity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_ElementarySurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementarySurface_continuity" "', argument " "1"" of type '" "Geom_ElementarySurface *""'"); 
  }
  arg1 = (Geom_ElementarySurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Continuity();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new GeomAbs_Shape((const GeomAbs_Shape&)(result))), SWIGTYPE_p_GeomAbs_Shape, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ElementarySurface_isCnu(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_ElementarySurface *arg1 = (Geom_ElementarySurface *) 0 ;
  Standard_Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ElementarySurface_isCnu.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_ElementarySurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementarySurface_isCnu" "', argument " "1"" of type '" "Geom_ElementarySurface *""'"); 
  }
  arg1 = (Geom_ElementarySurface *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementarySurface_isCnu" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsCNu(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ElementarySurface_isCnv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_ElementarySurface *arg1 = (Geom_ElementarySurface *) 0 ;
  Standard_Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ElementarySurface_isCnv.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_ElementarySurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementarySurface_isCnv" "', argument " "1"" of type '" "Geom_ElementarySurface *""'"); 
  }
  arg1 = (Geom_ElementarySurface *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementarySurface_isCnv" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsCNv(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ElementarySurface_dynamicType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_ElementarySurface *arg1 = (Geom_ElementarySurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Standard_Type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ElementarySurface_dynamicType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_ElementarySurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementarySurface_dynamicType" "', argument " "1"" of type '" "Geom_ElementarySurface *""'"); 
  }
  arg1 = (Geom_ElementarySurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DynamicType();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new Handle_Standard_Type((const Handle_Standard_Type&)(result))), SWIGTYPE_p_Handle_Standard_Type, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ElementarySurface(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ElementarySurface(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ElementarySurface(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_ElementarySurface(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom_ElementarySurface * arg1 = (Geom_ElementarySurface *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_ElementarySurface(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class ElementarySurface can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_SphericalSurface__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  gp_Ax3 *arg1 = 0 ;
  Standard_Real arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Geom_SphericalSurface *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SphericalSurface__SWIG_0.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Ax3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SphericalSurface" "', argument " "1"" of type '" "gp_Ax3 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SphericalSurface" "', argument " "1"" of type '" "gp_Ax3 const &""'"); 
  }
  arg1 = (gp_Ax3 *)(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SphericalSurface" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom_SphericalSurface *)new Geom_SphericalSurface((gp_Ax3 const &)*arg1,arg2);
    // hacked
    Handle_Geom_SphericalSurface *handle;
    handle = (Handle_Geom_SphericalSurface *)new Handle_Geom_SphericalSurface((Geom_SphericalSurface const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom_SphericalSurface, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_SphericalSurface__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  gp_Sphere *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Geom_SphericalSurface *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SphericalSurface__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Sphere,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SphericalSurface" "', argument " "1"" of type '" "gp_Sphere const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SphericalSurface" "', argument " "1"" of type '" "gp_Sphere const &""'"); 
  }
  arg1 = (gp_Sphere *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom_SphericalSurface *)new Geom_SphericalSurface((gp_Sphere const &)*arg1);
    // hacked
    Handle_Geom_SphericalSurface *handle;
    handle = (Handle_Geom_SphericalSurface *)new Handle_Geom_SphericalSurface((Geom_SphericalSurface const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom_SphericalSurface, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_SphericalSurface(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_SphericalSurface__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_SphericalSurface__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_SphericalSurface__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_SphericalSurface__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_SphericalSurface");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_setRadius(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_setRadius.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_setRadius" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SphericalSurface_setRadius" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetRadius(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_setSphere(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  gp_Sphere *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_setSphere.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_setSphere" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Sphere,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SphericalSurface_setSphere" "', argument " "2"" of type '" "gp_Sphere const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_setSphere" "', argument " "2"" of type '" "gp_Sphere const &""'"); 
  }
  arg2 = (gp_Sphere *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetSphere((gp_Sphere const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_sphere(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Sphere result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_sphere.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_sphere" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Sphere();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Sphere((const gp_Sphere&)(result))), SWIGTYPE_p_gp_Sphere, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_ureversedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_ureversedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_ureversedParameter" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SphericalSurface_ureversedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->UReversedParameter(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_vreversedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_vreversedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_vreversedParameter" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SphericalSurface_vreversedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->VReversedParameter(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_area(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_area.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_area" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->Area();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_bounds(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  Standard_Real *arg2 = 0 ;
  Standard_Real *arg3 = 0 ;
  Standard_Real *arg4 = 0 ;
  Standard_Real *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real argout12 ;
  Standard_Real argout22 ;
  Standard_Real argout32 ;
  Standard_Real argout42 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_bounds.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_bounds" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  {
    // argoutin
    arg2 = &argout12;
    arg3 = &argout22;
    arg4 = &argout32;
    arg5 = &argout42;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Bounds(*arg2,*arg3,*arg4,*arg5);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // argoutout
    
    v8::Handle<v8::Array> array = v8::Array::New(v8::Isolate::GetCurrent(), 4);
    array->Set(0, SWIG_From_double(*arg2));
    array->Set(1, SWIG_From_double(*arg3));
    array->Set(2, SWIG_From_double(*arg4));
    array->Set(3, SWIG_From_double(*arg5));
    jsresult = array;
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_coefficients(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  Standard_Real *arg2 = 0 ;
  Standard_Real *arg3 = 0 ;
  Standard_Real *arg4 = 0 ;
  Standard_Real *arg5 = 0 ;
  Standard_Real *arg6 = 0 ;
  Standard_Real *arg7 = 0 ;
  Standard_Real *arg8 = 0 ;
  Standard_Real *arg9 = 0 ;
  Standard_Real *arg10 = 0 ;
  Standard_Real *arg11 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real argout12 ;
  Standard_Real argout22 ;
  Standard_Real argout32 ;
  Standard_Real argout42 ;
  Standard_Real argout52 ;
  Standard_Real argout62 ;
  Standard_Real argout72 ;
  Standard_Real argout82 ;
  Standard_Real argout92 ;
  Standard_Real argout102 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_coefficients.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_coefficients" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  {
    // argoutin
    arg2 = &argout12;
    arg3 = &argout22;
    arg4 = &argout32;
    arg5 = &argout42;
    arg6 = &argout52;
    arg7 = &argout62;
    arg8 = &argout72;
    arg9 = &argout82;
    arg10 = &argout92;
    arg11 = &argout102;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Coefficients(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // argoutout
    
    v8::Handle<v8::Array> array = v8::Array::New(v8::Isolate::GetCurrent(), 4);
    array->Set(0, SWIG_From_double(*arg2));
    array->Set(1, SWIG_From_double(*arg3));
    array->Set(2, SWIG_From_double(*arg4));
    array->Set(3, SWIG_From_double(*arg5));
    array->Set(4, SWIG_From_double(*arg6));
    array->Set(5, SWIG_From_double(*arg7));
    array->Set(6, SWIG_From_double(*arg8));
    array->Set(7, SWIG_From_double(*arg9));
    array->Set(8, SWIG_From_double(*arg10));
    array->Set(9, SWIG_From_double(*arg11));
    jsresult = array;
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_radius(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_radius.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_radius" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->Radius();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_volume(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_volume.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_volume" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->Volume();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_isUclosed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_isUclosed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_isUclosed" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsUClosed();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_isVclosed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_isVclosed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_isVclosed" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsVClosed();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_isUperiodic(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_isUperiodic.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_isUperiodic" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsUPeriodic();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_isVperiodic(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_isVperiodic.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_isVperiodic" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsVPeriodic();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_uiso(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Handle_Geom_Curve result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_uiso.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_uiso" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SphericalSurface_uiso" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->UIso(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Curve *handle = (Handle_Geom_Curve *)new Handle_Geom_Curve(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_viso(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Handle_Geom_Curve result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_viso.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_viso" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SphericalSurface_viso" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->VIso(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Curve *handle = (Handle_Geom_Curve *)new Handle_Geom_Curve(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_d0(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_Pnt *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_d0.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_d0" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SphericalSurface_d0" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SphericalSurface_d0" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SphericalSurface_d0" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_d0" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  arg4 = (gp_Pnt *)(argp4);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D0(arg2,arg3,*arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_d1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_Pnt *arg4 = 0 ;
  gp_Vec *arg5 = 0 ;
  gp_Vec *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_d1.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_d1" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SphericalSurface_d1" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SphericalSurface_d1" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SphericalSurface_d1" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_d1" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  arg4 = (gp_Pnt *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "SphericalSurface_d1" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_d1" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  arg5 = (gp_Vec *)(argp5);
  res6 = SWIG_ConvertPtr(args[4], &argp6, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "SphericalSurface_d1" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_d1" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  arg6 = (gp_Vec *)(argp6);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D1(arg2,arg3,*arg4,*arg5,*arg6);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_d2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_Pnt *arg4 = 0 ;
  gp_Vec *arg5 = 0 ;
  gp_Vec *arg6 = 0 ;
  gp_Vec *arg7 = 0 ;
  gp_Vec *arg8 = 0 ;
  gp_Vec *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_d2.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_d2" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SphericalSurface_d2" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SphericalSurface_d2" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SphericalSurface_d2" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_d2" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  arg4 = (gp_Pnt *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "SphericalSurface_d2" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_d2" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  arg5 = (gp_Vec *)(argp5);
  res6 = SWIG_ConvertPtr(args[4], &argp6, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "SphericalSurface_d2" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_d2" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  arg6 = (gp_Vec *)(argp6);
  res7 = SWIG_ConvertPtr(args[5], &argp7, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "SphericalSurface_d2" "', argument " "7"" of type '" "gp_Vec &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_d2" "', argument " "7"" of type '" "gp_Vec &""'"); 
  }
  arg7 = (gp_Vec *)(argp7);
  res8 = SWIG_ConvertPtr(args[6], &argp8, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "SphericalSurface_d2" "', argument " "8"" of type '" "gp_Vec &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_d2" "', argument " "8"" of type '" "gp_Vec &""'"); 
  }
  arg8 = (gp_Vec *)(argp8);
  res9 = SWIG_ConvertPtr(args[7], &argp9, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "SphericalSurface_d2" "', argument " "9"" of type '" "gp_Vec &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_d2" "', argument " "9"" of type '" "gp_Vec &""'"); 
  }
  arg9 = (gp_Vec *)(argp9);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D2(arg2,arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_d3(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_Pnt *arg4 = 0 ;
  gp_Vec *arg5 = 0 ;
  gp_Vec *arg6 = 0 ;
  gp_Vec *arg7 = 0 ;
  gp_Vec *arg8 = 0 ;
  gp_Vec *arg9 = 0 ;
  gp_Vec *arg10 = 0 ;
  gp_Vec *arg11 = 0 ;
  gp_Vec *arg12 = 0 ;
  gp_Vec *arg13 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  
  if(args.Length() != 12) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_d3.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_d3" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SphericalSurface_d3" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SphericalSurface_d3" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SphericalSurface_d3" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_d3" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  arg4 = (gp_Pnt *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "SphericalSurface_d3" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_d3" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  arg5 = (gp_Vec *)(argp5);
  res6 = SWIG_ConvertPtr(args[4], &argp6, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "SphericalSurface_d3" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_d3" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  arg6 = (gp_Vec *)(argp6);
  res7 = SWIG_ConvertPtr(args[5], &argp7, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "SphericalSurface_d3" "', argument " "7"" of type '" "gp_Vec &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_d3" "', argument " "7"" of type '" "gp_Vec &""'"); 
  }
  arg7 = (gp_Vec *)(argp7);
  res8 = SWIG_ConvertPtr(args[6], &argp8, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "SphericalSurface_d3" "', argument " "8"" of type '" "gp_Vec &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_d3" "', argument " "8"" of type '" "gp_Vec &""'"); 
  }
  arg8 = (gp_Vec *)(argp8);
  res9 = SWIG_ConvertPtr(args[7], &argp9, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "SphericalSurface_d3" "', argument " "9"" of type '" "gp_Vec &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_d3" "', argument " "9"" of type '" "gp_Vec &""'"); 
  }
  arg9 = (gp_Vec *)(argp9);
  res10 = SWIG_ConvertPtr(args[8], &argp10, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "SphericalSurface_d3" "', argument " "10"" of type '" "gp_Vec &""'"); 
  }
  if (!argp10) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_d3" "', argument " "10"" of type '" "gp_Vec &""'"); 
  }
  arg10 = (gp_Vec *)(argp10);
  res11 = SWIG_ConvertPtr(args[9], &argp11, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "SphericalSurface_d3" "', argument " "11"" of type '" "gp_Vec &""'"); 
  }
  if (!argp11) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_d3" "', argument " "11"" of type '" "gp_Vec &""'"); 
  }
  arg11 = (gp_Vec *)(argp11);
  res12 = SWIG_ConvertPtr(args[10], &argp12, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "SphericalSurface_d3" "', argument " "12"" of type '" "gp_Vec &""'"); 
  }
  if (!argp12) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_d3" "', argument " "12"" of type '" "gp_Vec &""'"); 
  }
  arg12 = (gp_Vec *)(argp12);
  res13 = SWIG_ConvertPtr(args[11], &argp13, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "SphericalSurface_d3" "', argument " "13"" of type '" "gp_Vec &""'"); 
  }
  if (!argp13) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_d3" "', argument " "13"" of type '" "gp_Vec &""'"); 
  }
  arg13 = (gp_Vec *)(argp13);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D3(arg2,arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11,*arg12,*arg13);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_dn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Integer arg4 ;
  Standard_Integer arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  gp_Vec result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_dn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_dn" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SphericalSurface_dn" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SphericalSurface_dn" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SphericalSurface_dn" "', argument " "4"" of type '" "Standard_Integer""'");
  } 
  arg4 = (Standard_Integer)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SphericalSurface_dn" "', argument " "5"" of type '" "Standard_Integer""'");
  } 
  arg5 = (Standard_Integer)(val5);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DN(arg2,arg3,arg4,arg5);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Vec((const gp_Vec&)(result))), SWIGTYPE_p_gp_Vec, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_transform(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  gp_Trsf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_transform.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_transform" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SphericalSurface_transform" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SphericalSurface_transform" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  arg2 = (gp_Trsf *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Transform((gp_Trsf const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_copy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_Geometry result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_copy.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_copy" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Copy();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Geometry *handle = (Handle_Geom_Geometry *)new Handle_Geom_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SphericalSurface_dynamicType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Standard_Type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SphericalSurface_dynamicType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphericalSurface_dynamicType" "', argument " "1"" of type '" "Geom_SphericalSurface *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DynamicType();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new Handle_Standard_Type((const Handle_Standard_Type&)(result))), SWIGTYPE_p_Handle_Standard_Type, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_SphericalSurface(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_SphericalSurface(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_SphericalSurface(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_SphericalSurface(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom_SphericalSurface * arg1 = (Geom_SphericalSurface *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_CylindricalSurface__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  gp_Ax3 *arg1 = 0 ;
  Standard_Real arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Geom_CylindricalSurface *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_CylindricalSurface__SWIG_0.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Ax3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CylindricalSurface" "', argument " "1"" of type '" "gp_Ax3 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CylindricalSurface" "', argument " "1"" of type '" "gp_Ax3 const &""'"); 
  }
  arg1 = (gp_Ax3 *)(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CylindricalSurface" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom_CylindricalSurface *)new Geom_CylindricalSurface((gp_Ax3 const &)*arg1,arg2);
    // hacked
    Handle_Geom_CylindricalSurface *handle;
    handle = (Handle_Geom_CylindricalSurface *)new Handle_Geom_CylindricalSurface((Geom_CylindricalSurface const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom_CylindricalSurface, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_CylindricalSurface__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  gp_Cylinder *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Geom_CylindricalSurface *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_CylindricalSurface__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Cylinder,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CylindricalSurface" "', argument " "1"" of type '" "gp_Cylinder const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CylindricalSurface" "', argument " "1"" of type '" "gp_Cylinder const &""'"); 
  }
  arg1 = (gp_Cylinder *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom_CylindricalSurface *)new Geom_CylindricalSurface((gp_Cylinder const &)*arg1);
    // hacked
    Handle_Geom_CylindricalSurface *handle;
    handle = (Handle_Geom_CylindricalSurface *)new Handle_Geom_CylindricalSurface((Geom_CylindricalSurface const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom_CylindricalSurface, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_CylindricalSurface(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_CylindricalSurface__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_CylindricalSurface__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_CylindricalSurface__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_CylindricalSurface__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_CylindricalSurface");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_setCylinder(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  gp_Cylinder *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_setCylinder.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_setCylinder" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Cylinder,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CylindricalSurface_setCylinder" "', argument " "2"" of type '" "gp_Cylinder const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_setCylinder" "', argument " "2"" of type '" "gp_Cylinder const &""'"); 
  }
  arg2 = (gp_Cylinder *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetCylinder((gp_Cylinder const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_setRadius(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_setRadius.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_setRadius" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CylindricalSurface_setRadius" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetRadius(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_cylinder(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Cylinder result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_cylinder.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_cylinder" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Cylinder();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Cylinder((const gp_Cylinder&)(result))), SWIGTYPE_p_gp_Cylinder, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_ureversedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_ureversedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_ureversedParameter" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CylindricalSurface_ureversedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->UReversedParameter(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_vreversedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_vreversedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_vreversedParameter" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CylindricalSurface_vreversedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->VReversedParameter(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_transformParameters(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  Standard_Real *arg2 = 0 ;
  Standard_Real *arg3 = 0 ;
  gp_Trsf *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real argout12 ;
  Standard_Real argout22 ;
  gp_Trsf argout32 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_transformParameters.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_transformParameters" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  {
    // argoutin
    arg2 = &argout12;
    arg3 = &argout22;
    arg4 = &argout32;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->TransformParameters(*arg2,*arg3,(gp_Trsf const &)*arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // argoutout
    
    v8::Handle<v8::Array> array = v8::Array::New(v8::Isolate::GetCurrent(), 4);
    array->Set(0, SWIG_From_double(*arg2));
    array->Set(1, SWIG_From_double(*arg3));
    array->Set(2, SWIG_NewPointerObj((new gp_Trsf((const gp_Trsf&)arg4)), SWIGTYPE_p_gp_Trsf, SWIG_POINTER_OWN |  0 ));
    jsresult = array;
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_parametricTransformation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  gp_Trsf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gp_GTrsf2d result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_parametricTransformation.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_parametricTransformation" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CylindricalSurface_parametricTransformation" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_parametricTransformation" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  arg2 = (gp_Trsf *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->ParametricTransformation((gp_Trsf const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_GTrsf2d((const gp_GTrsf2d&)(result))), SWIGTYPE_p_gp_GTrsf2d, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_bounds(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  Standard_Real *arg2 = 0 ;
  Standard_Real *arg3 = 0 ;
  Standard_Real *arg4 = 0 ;
  Standard_Real *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real argout12 ;
  Standard_Real argout22 ;
  Standard_Real argout32 ;
  Standard_Real argout42 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_bounds.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_bounds" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  {
    // argoutin
    arg2 = &argout12;
    arg3 = &argout22;
    arg4 = &argout32;
    arg5 = &argout42;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Bounds(*arg2,*arg3,*arg4,*arg5);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // argoutout
    
    v8::Handle<v8::Array> array = v8::Array::New(v8::Isolate::GetCurrent(), 4);
    array->Set(0, SWIG_From_double(*arg2));
    array->Set(1, SWIG_From_double(*arg3));
    array->Set(2, SWIG_From_double(*arg4));
    array->Set(3, SWIG_From_double(*arg5));
    jsresult = array;
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_coefficients(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  Standard_Real *arg2 = 0 ;
  Standard_Real *arg3 = 0 ;
  Standard_Real *arg4 = 0 ;
  Standard_Real *arg5 = 0 ;
  Standard_Real *arg6 = 0 ;
  Standard_Real *arg7 = 0 ;
  Standard_Real *arg8 = 0 ;
  Standard_Real *arg9 = 0 ;
  Standard_Real *arg10 = 0 ;
  Standard_Real *arg11 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real argout12 ;
  Standard_Real argout22 ;
  Standard_Real argout32 ;
  Standard_Real argout42 ;
  Standard_Real argout52 ;
  Standard_Real argout62 ;
  Standard_Real argout72 ;
  Standard_Real argout82 ;
  Standard_Real argout92 ;
  Standard_Real argout102 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_coefficients.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_coefficients" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  {
    // argoutin
    arg2 = &argout12;
    arg3 = &argout22;
    arg4 = &argout32;
    arg5 = &argout42;
    arg6 = &argout52;
    arg7 = &argout62;
    arg8 = &argout72;
    arg9 = &argout82;
    arg10 = &argout92;
    arg11 = &argout102;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Coefficients(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // argoutout
    
    v8::Handle<v8::Array> array = v8::Array::New(v8::Isolate::GetCurrent(), 4);
    array->Set(0, SWIG_From_double(*arg2));
    array->Set(1, SWIG_From_double(*arg3));
    array->Set(2, SWIG_From_double(*arg4));
    array->Set(3, SWIG_From_double(*arg5));
    array->Set(4, SWIG_From_double(*arg6));
    array->Set(5, SWIG_From_double(*arg7));
    array->Set(6, SWIG_From_double(*arg8));
    array->Set(7, SWIG_From_double(*arg9));
    array->Set(8, SWIG_From_double(*arg10));
    array->Set(9, SWIG_From_double(*arg11));
    jsresult = array;
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_radius(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_radius.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_radius" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->Radius();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_isUclosed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_isUclosed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_isUclosed" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsUClosed();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_isVclosed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_isVclosed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_isVclosed" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsVClosed();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_isUperiodic(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_isUperiodic.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_isUperiodic" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsUPeriodic();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_isVperiodic(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_isVperiodic.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_isVperiodic" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsVPeriodic();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_uiso(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Handle_Geom_Curve result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_uiso.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_uiso" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CylindricalSurface_uiso" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->UIso(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Curve *handle = (Handle_Geom_Curve *)new Handle_Geom_Curve(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_viso(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Handle_Geom_Curve result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_viso.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_viso" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CylindricalSurface_viso" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->VIso(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Curve *handle = (Handle_Geom_Curve *)new Handle_Geom_Curve(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_d0(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_Pnt *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_d0.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_d0" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CylindricalSurface_d0" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CylindricalSurface_d0" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CylindricalSurface_d0" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_d0" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  arg4 = (gp_Pnt *)(argp4);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D0(arg2,arg3,*arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_d1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_Pnt *arg4 = 0 ;
  gp_Vec *arg5 = 0 ;
  gp_Vec *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_d1.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_d1" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CylindricalSurface_d1" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CylindricalSurface_d1" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CylindricalSurface_d1" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_d1" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  arg4 = (gp_Pnt *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CylindricalSurface_d1" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_d1" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  arg5 = (gp_Vec *)(argp5);
  res6 = SWIG_ConvertPtr(args[4], &argp6, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CylindricalSurface_d1" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_d1" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  arg6 = (gp_Vec *)(argp6);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D1(arg2,arg3,*arg4,*arg5,*arg6);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_d2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_Pnt *arg4 = 0 ;
  gp_Vec *arg5 = 0 ;
  gp_Vec *arg6 = 0 ;
  gp_Vec *arg7 = 0 ;
  gp_Vec *arg8 = 0 ;
  gp_Vec *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_d2.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_d2" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CylindricalSurface_d2" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CylindricalSurface_d2" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CylindricalSurface_d2" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_d2" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  arg4 = (gp_Pnt *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CylindricalSurface_d2" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_d2" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  arg5 = (gp_Vec *)(argp5);
  res6 = SWIG_ConvertPtr(args[4], &argp6, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CylindricalSurface_d2" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_d2" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  arg6 = (gp_Vec *)(argp6);
  res7 = SWIG_ConvertPtr(args[5], &argp7, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CylindricalSurface_d2" "', argument " "7"" of type '" "gp_Vec &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_d2" "', argument " "7"" of type '" "gp_Vec &""'"); 
  }
  arg7 = (gp_Vec *)(argp7);
  res8 = SWIG_ConvertPtr(args[6], &argp8, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CylindricalSurface_d2" "', argument " "8"" of type '" "gp_Vec &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_d2" "', argument " "8"" of type '" "gp_Vec &""'"); 
  }
  arg8 = (gp_Vec *)(argp8);
  res9 = SWIG_ConvertPtr(args[7], &argp9, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CylindricalSurface_d2" "', argument " "9"" of type '" "gp_Vec &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_d2" "', argument " "9"" of type '" "gp_Vec &""'"); 
  }
  arg9 = (gp_Vec *)(argp9);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D2(arg2,arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_d3(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_Pnt *arg4 = 0 ;
  gp_Vec *arg5 = 0 ;
  gp_Vec *arg6 = 0 ;
  gp_Vec *arg7 = 0 ;
  gp_Vec *arg8 = 0 ;
  gp_Vec *arg9 = 0 ;
  gp_Vec *arg10 = 0 ;
  gp_Vec *arg11 = 0 ;
  gp_Vec *arg12 = 0 ;
  gp_Vec *arg13 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  
  if(args.Length() != 12) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_d3.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_d3" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CylindricalSurface_d3" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CylindricalSurface_d3" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CylindricalSurface_d3" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_d3" "', argument " "4"" of type '" "gp_Pnt &""'"); 
  }
  arg4 = (gp_Pnt *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CylindricalSurface_d3" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_d3" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  arg5 = (gp_Vec *)(argp5);
  res6 = SWIG_ConvertPtr(args[4], &argp6, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CylindricalSurface_d3" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_d3" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  arg6 = (gp_Vec *)(argp6);
  res7 = SWIG_ConvertPtr(args[5], &argp7, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CylindricalSurface_d3" "', argument " "7"" of type '" "gp_Vec &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_d3" "', argument " "7"" of type '" "gp_Vec &""'"); 
  }
  arg7 = (gp_Vec *)(argp7);
  res8 = SWIG_ConvertPtr(args[6], &argp8, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CylindricalSurface_d3" "', argument " "8"" of type '" "gp_Vec &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_d3" "', argument " "8"" of type '" "gp_Vec &""'"); 
  }
  arg8 = (gp_Vec *)(argp8);
  res9 = SWIG_ConvertPtr(args[7], &argp9, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "CylindricalSurface_d3" "', argument " "9"" of type '" "gp_Vec &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_d3" "', argument " "9"" of type '" "gp_Vec &""'"); 
  }
  arg9 = (gp_Vec *)(argp9);
  res10 = SWIG_ConvertPtr(args[8], &argp10, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "CylindricalSurface_d3" "', argument " "10"" of type '" "gp_Vec &""'"); 
  }
  if (!argp10) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_d3" "', argument " "10"" of type '" "gp_Vec &""'"); 
  }
  arg10 = (gp_Vec *)(argp10);
  res11 = SWIG_ConvertPtr(args[9], &argp11, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "CylindricalSurface_d3" "', argument " "11"" of type '" "gp_Vec &""'"); 
  }
  if (!argp11) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_d3" "', argument " "11"" of type '" "gp_Vec &""'"); 
  }
  arg11 = (gp_Vec *)(argp11);
  res12 = SWIG_ConvertPtr(args[10], &argp12, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "CylindricalSurface_d3" "', argument " "12"" of type '" "gp_Vec &""'"); 
  }
  if (!argp12) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_d3" "', argument " "12"" of type '" "gp_Vec &""'"); 
  }
  arg12 = (gp_Vec *)(argp12);
  res13 = SWIG_ConvertPtr(args[11], &argp13, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "CylindricalSurface_d3" "', argument " "13"" of type '" "gp_Vec &""'"); 
  }
  if (!argp13) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_d3" "', argument " "13"" of type '" "gp_Vec &""'"); 
  }
  arg13 = (gp_Vec *)(argp13);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D3(arg2,arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11,*arg12,*arg13);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_dn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Integer arg4 ;
  Standard_Integer arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  gp_Vec result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_dn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_dn" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CylindricalSurface_dn" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CylindricalSurface_dn" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CylindricalSurface_dn" "', argument " "4"" of type '" "Standard_Integer""'");
  } 
  arg4 = (Standard_Integer)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CylindricalSurface_dn" "', argument " "5"" of type '" "Standard_Integer""'");
  } 
  arg5 = (Standard_Integer)(val5);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DN(arg2,arg3,arg4,arg5);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Vec((const gp_Vec&)(result))), SWIGTYPE_p_gp_Vec, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_transform(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  gp_Trsf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_transform.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_transform" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CylindricalSurface_transform" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CylindricalSurface_transform" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  arg2 = (gp_Trsf *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Transform((gp_Trsf const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_copy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_Geometry result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_copy.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_copy" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Copy();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Geometry *handle = (Handle_Geom_Geometry *)new Handle_Geom_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CylindricalSurface_dynamicType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Standard_Type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CylindricalSurface_dynamicType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylindricalSurface_dynamicType" "', argument " "1"" of type '" "Geom_CylindricalSurface *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DynamicType();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new Handle_Standard_Type((const Handle_Standard_Type&)(result))), SWIGTYPE_p_Handle_Standard_Type, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_CylindricalSurface(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_CylindricalSurface(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_CylindricalSurface(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_CylindricalSurface(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom_CylindricalSurface * arg1 = (Geom_CylindricalSurface *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_AxisPlacement_setAxis(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_AxisPlacement *arg1 = (Geom_AxisPlacement *) 0 ;
  gp_Ax1 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AxisPlacement_setAxis.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_AxisPlacement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AxisPlacement_setAxis" "', argument " "1"" of type '" "Geom_AxisPlacement *""'"); 
  }
  arg1 = (Geom_AxisPlacement *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Ax1,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AxisPlacement_setAxis" "', argument " "2"" of type '" "gp_Ax1 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AxisPlacement_setAxis" "', argument " "2"" of type '" "gp_Ax1 const &""'"); 
  }
  arg2 = (gp_Ax1 *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetAxis((gp_Ax1 const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AxisPlacement_setDirection(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_AxisPlacement *arg1 = (Geom_AxisPlacement *) 0 ;
  gp_Dir *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AxisPlacement_setDirection.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_AxisPlacement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AxisPlacement_setDirection" "', argument " "1"" of type '" "Geom_AxisPlacement *""'"); 
  }
  arg1 = (Geom_AxisPlacement *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Dir,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AxisPlacement_setDirection" "', argument " "2"" of type '" "gp_Dir const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AxisPlacement_setDirection" "', argument " "2"" of type '" "gp_Dir const &""'"); 
  }
  arg2 = (gp_Dir *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetDirection((gp_Dir const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AxisPlacement_setLocation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_AxisPlacement *arg1 = (Geom_AxisPlacement *) 0 ;
  gp_Pnt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AxisPlacement_setLocation.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_AxisPlacement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AxisPlacement_setLocation" "', argument " "1"" of type '" "Geom_AxisPlacement *""'"); 
  }
  arg1 = (Geom_AxisPlacement *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AxisPlacement_setLocation" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AxisPlacement_setLocation" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  arg2 = (gp_Pnt *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetLocation((gp_Pnt const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AxisPlacement_angle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_AxisPlacement *arg1 = (Geom_AxisPlacement *) 0 ;
  Handle_Geom_AxisPlacement *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AxisPlacement_angle.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_AxisPlacement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AxisPlacement_angle" "', argument " "1"" of type '" "Geom_AxisPlacement *""'"); 
  }
  arg1 = (Geom_AxisPlacement *)(argp1);
  {
    // handlein
    void *argpointer ;
    int res = SWIG_ConvertPtr(args[0]->ToObject()->Get(SWIGV8_SYMBOL_NEW("_handle")), &argpointer, SWIGTYPE_p_Handle_Standard_Transient, 0);
    arg2 = (Handle_Geom_AxisPlacement *)(argpointer);
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->Angle((Handle_Geom_AxisPlacement const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AxisPlacement_axis(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_AxisPlacement *arg1 = (Geom_AxisPlacement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Ax1 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AxisPlacement_axis.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_AxisPlacement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AxisPlacement_axis" "', argument " "1"" of type '" "Geom_AxisPlacement *""'"); 
  }
  arg1 = (Geom_AxisPlacement *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Axis();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Ax1((const gp_Ax1&)(result))), SWIGTYPE_p_gp_Ax1, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AxisPlacement_direction(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_AxisPlacement *arg1 = (Geom_AxisPlacement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Dir result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AxisPlacement_direction.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_AxisPlacement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AxisPlacement_direction" "', argument " "1"" of type '" "Geom_AxisPlacement *""'"); 
  }
  arg1 = (Geom_AxisPlacement *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Direction();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Dir((const gp_Dir&)(result))), SWIGTYPE_p_gp_Dir, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AxisPlacement_location(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_AxisPlacement *arg1 = (Geom_AxisPlacement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Pnt result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AxisPlacement_location.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_AxisPlacement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AxisPlacement_location" "', argument " "1"" of type '" "Geom_AxisPlacement *""'"); 
  }
  arg1 = (Geom_AxisPlacement *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Location();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt((const gp_Pnt&)(result))), SWIGTYPE_p_gp_Pnt, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AxisPlacement_dynamicType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_AxisPlacement *arg1 = (Geom_AxisPlacement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Standard_Type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AxisPlacement_dynamicType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_AxisPlacement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AxisPlacement_dynamicType" "', argument " "1"" of type '" "Geom_AxisPlacement *""'"); 
  }
  arg1 = (Geom_AxisPlacement *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DynamicType();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new Handle_Standard_Type((const Handle_Standard_Type&)(result))), SWIGTYPE_p_Handle_Standard_Type, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_AxisPlacement(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_AxisPlacement(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_AxisPlacement(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_AxisPlacement(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom_AxisPlacement * arg1 = (Geom_AxisPlacement *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_AxisPlacement(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class AxisPlacement can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Axis1Placement__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  gp_Ax1 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Geom_Axis1Placement *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Axis1Placement__SWIG_0.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Ax1,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Axis1Placement" "', argument " "1"" of type '" "gp_Ax1 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Axis1Placement" "', argument " "1"" of type '" "gp_Ax1 const &""'"); 
  }
  arg1 = (gp_Ax1 *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom_Axis1Placement *)new Geom_Axis1Placement((gp_Ax1 const &)*arg1);
    // hacked
    Handle_Geom_Axis1Placement *handle;
    handle = (Handle_Geom_Axis1Placement *)new Handle_Geom_Axis1Placement((Geom_Axis1Placement const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom_Axis1Placement, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Axis1Placement__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  gp_Pnt *arg1 = 0 ;
  gp_Dir *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Geom_Axis1Placement *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Axis1Placement__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Axis1Placement" "', argument " "1"" of type '" "gp_Pnt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Axis1Placement" "', argument " "1"" of type '" "gp_Pnt const &""'"); 
  }
  arg1 = (gp_Pnt *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_gp_Dir,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Axis1Placement" "', argument " "2"" of type '" "gp_Dir const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Axis1Placement" "', argument " "2"" of type '" "gp_Dir const &""'"); 
  }
  arg2 = (gp_Dir *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom_Axis1Placement *)new Geom_Axis1Placement((gp_Pnt const &)*arg1,(gp_Dir const &)*arg2);
    // hacked
    Handle_Geom_Axis1Placement *handle;
    handle = (Handle_Geom_Axis1Placement *)new Handle_Geom_Axis1Placement((Geom_Axis1Placement const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom_Axis1Placement, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Axis1Placement(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Axis1Placement__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Axis1Placement__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Axis1Placement__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Axis1Placement__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Axis1Placement");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Axis1Placement_ax1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Axis1Placement *arg1 = (Geom_Axis1Placement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Ax1 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Axis1Placement_ax1.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Axis1Placement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis1Placement_ax1" "', argument " "1"" of type '" "Geom_Axis1Placement *""'"); 
  }
  arg1 = (Geom_Axis1Placement *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Ax1();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Ax1((const gp_Ax1&)(result))), SWIGTYPE_p_gp_Ax1, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Axis1Placement_reverse(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Axis1Placement *arg1 = (Geom_Axis1Placement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Axis1Placement_reverse.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Axis1Placement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis1Placement_reverse" "', argument " "1"" of type '" "Geom_Axis1Placement *""'"); 
  }
  arg1 = (Geom_Axis1Placement *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Reverse();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Axis1Placement_reversed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Axis1Placement *arg1 = (Geom_Axis1Placement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_Axis1Placement result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Axis1Placement_reversed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Axis1Placement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis1Placement_reversed" "', argument " "1"" of type '" "Geom_Axis1Placement *""'"); 
  }
  arg1 = (Geom_Axis1Placement *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Reversed();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Axis1Placement *handle = (Handle_Geom_Axis1Placement *)new Handle_Geom_Axis1Placement(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Axis1Placement_setDirection(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Axis1Placement *arg1 = (Geom_Axis1Placement *) 0 ;
  gp_Dir *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Axis1Placement_setDirection.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Axis1Placement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis1Placement_setDirection" "', argument " "1"" of type '" "Geom_Axis1Placement *""'"); 
  }
  arg1 = (Geom_Axis1Placement *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Dir,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Axis1Placement_setDirection" "', argument " "2"" of type '" "gp_Dir const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Axis1Placement_setDirection" "', argument " "2"" of type '" "gp_Dir const &""'"); 
  }
  arg2 = (gp_Dir *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetDirection((gp_Dir const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Axis1Placement_transform(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Axis1Placement *arg1 = (Geom_Axis1Placement *) 0 ;
  gp_Trsf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Axis1Placement_transform.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Axis1Placement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis1Placement_transform" "', argument " "1"" of type '" "Geom_Axis1Placement *""'"); 
  }
  arg1 = (Geom_Axis1Placement *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Axis1Placement_transform" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Axis1Placement_transform" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  arg2 = (gp_Trsf *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Transform((gp_Trsf const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Axis1Placement_copy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Axis1Placement *arg1 = (Geom_Axis1Placement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_Geometry result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Axis1Placement_copy.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Axis1Placement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis1Placement_copy" "', argument " "1"" of type '" "Geom_Axis1Placement *""'"); 
  }
  arg1 = (Geom_Axis1Placement *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Copy();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Geometry *handle = (Handle_Geom_Geometry *)new Handle_Geom_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Axis1Placement_dynamicType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Axis1Placement *arg1 = (Geom_Axis1Placement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Standard_Type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Axis1Placement_dynamicType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Axis1Placement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis1Placement_dynamicType" "', argument " "1"" of type '" "Geom_Axis1Placement *""'"); 
  }
  arg1 = (Geom_Axis1Placement *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DynamicType();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new Handle_Standard_Type((const Handle_Standard_Type&)(result))), SWIGTYPE_p_Handle_Standard_Type, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Axis1Placement(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Axis1Placement(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Axis1Placement(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Axis1Placement(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom_Axis1Placement * arg1 = (Geom_Axis1Placement *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_Curve_reverse(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Curve *arg1 = (Geom_Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_reverse.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_reverse" "', argument " "1"" of type '" "Geom_Curve *""'"); 
  }
  arg1 = (Geom_Curve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Reverse();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_reversedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Curve *arg1 = (Geom_Curve *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_reversedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_reversedParameter" "', argument " "1"" of type '" "Geom_Curve *""'"); 
  }
  arg1 = (Geom_Curve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Curve_reversedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->ReversedParameter(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_transformedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Curve *arg1 = (Geom_Curve *) 0 ;
  Standard_Real arg2 ;
  gp_Trsf *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_transformedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_transformedParameter" "', argument " "1"" of type '" "Geom_Curve *""'"); 
  }
  arg1 = (Geom_Curve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Curve_transformedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Trsf,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Curve_transformedParameter" "', argument " "3"" of type '" "gp_Trsf const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Curve_transformedParameter" "', argument " "3"" of type '" "gp_Trsf const &""'"); 
  }
  arg3 = (gp_Trsf *)(argp3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->TransformedParameter(arg2,(gp_Trsf const &)*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_parametricTransformation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Curve *arg1 = (Geom_Curve *) 0 ;
  gp_Trsf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_parametricTransformation.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_parametricTransformation" "', argument " "1"" of type '" "Geom_Curve *""'"); 
  }
  arg1 = (Geom_Curve *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Curve_parametricTransformation" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Curve_parametricTransformation" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  arg2 = (gp_Trsf *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->ParametricTransformation((gp_Trsf const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_reversed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Curve *arg1 = (Geom_Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_Curve result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_reversed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_reversed" "', argument " "1"" of type '" "Geom_Curve *""'"); 
  }
  arg1 = (Geom_Curve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Reversed();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Curve *handle = (Handle_Geom_Curve *)new Handle_Geom_Curve(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_firstParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Curve *arg1 = (Geom_Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_firstParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_firstParameter" "', argument " "1"" of type '" "Geom_Curve *""'"); 
  }
  arg1 = (Geom_Curve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->FirstParameter();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_lastParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Curve *arg1 = (Geom_Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_lastParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_lastParameter" "', argument " "1"" of type '" "Geom_Curve *""'"); 
  }
  arg1 = (Geom_Curve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->LastParameter();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_isClosed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Curve *arg1 = (Geom_Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_isClosed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_isClosed" "', argument " "1"" of type '" "Geom_Curve *""'"); 
  }
  arg1 = (Geom_Curve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsClosed();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_isPeriodic(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Curve *arg1 = (Geom_Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_isPeriodic.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_isPeriodic" "', argument " "1"" of type '" "Geom_Curve *""'"); 
  }
  arg1 = (Geom_Curve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsPeriodic();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_period(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Curve *arg1 = (Geom_Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_period.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_period" "', argument " "1"" of type '" "Geom_Curve *""'"); 
  }
  arg1 = (Geom_Curve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->Period();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_continuity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Curve *arg1 = (Geom_Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GeomAbs_Shape result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_continuity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_continuity" "', argument " "1"" of type '" "Geom_Curve *""'"); 
  }
  arg1 = (Geom_Curve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Continuity();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new GeomAbs_Shape((const GeomAbs_Shape&)(result))), SWIGTYPE_p_GeomAbs_Shape, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_isCn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Curve *arg1 = (Geom_Curve *) 0 ;
  Standard_Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_isCn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_isCn" "', argument " "1"" of type '" "Geom_Curve *""'"); 
  }
  arg1 = (Geom_Curve *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Curve_isCn" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsCN(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_d0(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Curve *arg1 = (Geom_Curve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_d0.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_d0" "', argument " "1"" of type '" "Geom_Curve *""'"); 
  }
  arg1 = (Geom_Curve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Curve_d0" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Curve_d0" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Curve_d0" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  arg3 = (gp_Pnt *)(argp3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D0(arg2,*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_d1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Curve *arg1 = (Geom_Curve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt *arg3 = 0 ;
  gp_Vec *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_d1.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_d1" "', argument " "1"" of type '" "Geom_Curve *""'"); 
  }
  arg1 = (Geom_Curve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Curve_d1" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Curve_d1" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Curve_d1" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  arg3 = (gp_Pnt *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Curve_d1" "', argument " "4"" of type '" "gp_Vec &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Curve_d1" "', argument " "4"" of type '" "gp_Vec &""'"); 
  }
  arg4 = (gp_Vec *)(argp4);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D1(arg2,*arg3,*arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_d2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Curve *arg1 = (Geom_Curve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt *arg3 = 0 ;
  gp_Vec *arg4 = 0 ;
  gp_Vec *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_d2.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_d2" "', argument " "1"" of type '" "Geom_Curve *""'"); 
  }
  arg1 = (Geom_Curve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Curve_d2" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Curve_d2" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Curve_d2" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  arg3 = (gp_Pnt *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Curve_d2" "', argument " "4"" of type '" "gp_Vec &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Curve_d2" "', argument " "4"" of type '" "gp_Vec &""'"); 
  }
  arg4 = (gp_Vec *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Curve_d2" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Curve_d2" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  arg5 = (gp_Vec *)(argp5);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D2(arg2,*arg3,*arg4,*arg5);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_d3(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Curve *arg1 = (Geom_Curve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt *arg3 = 0 ;
  gp_Vec *arg4 = 0 ;
  gp_Vec *arg5 = 0 ;
  gp_Vec *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_d3.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_d3" "', argument " "1"" of type '" "Geom_Curve *""'"); 
  }
  arg1 = (Geom_Curve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Curve_d3" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Curve_d3" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Curve_d3" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  arg3 = (gp_Pnt *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Curve_d3" "', argument " "4"" of type '" "gp_Vec &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Curve_d3" "', argument " "4"" of type '" "gp_Vec &""'"); 
  }
  arg4 = (gp_Vec *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Curve_d3" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Curve_d3" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  arg5 = (gp_Vec *)(argp5);
  res6 = SWIG_ConvertPtr(args[4], &argp6, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Curve_d3" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Curve_d3" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  arg6 = (gp_Vec *)(argp6);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D3(arg2,*arg3,*arg4,*arg5,*arg6);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_dn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Curve *arg1 = (Geom_Curve *) 0 ;
  Standard_Real arg2 ;
  Standard_Integer arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  gp_Vec result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_dn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_dn" "', argument " "1"" of type '" "Geom_Curve *""'"); 
  }
  arg1 = (Geom_Curve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Curve_dn" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Curve_dn" "', argument " "3"" of type '" "Standard_Integer""'");
  } 
  arg3 = (Standard_Integer)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DN(arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Vec((const gp_Vec&)(result))), SWIGTYPE_p_gp_Vec, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Curve *arg1 = (Geom_Curve *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_value.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_value" "', argument " "1"" of type '" "Geom_Curve *""'"); 
  }
  arg1 = (Geom_Curve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Curve_value" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Value(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt((const gp_Pnt&)(result))), SWIGTYPE_p_gp_Pnt, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_dynamicType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Curve *arg1 = (Geom_Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Standard_Type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_dynamicType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_dynamicType" "', argument " "1"" of type '" "Geom_Curve *""'"); 
  }
  arg1 = (Geom_Curve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DynamicType();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new Handle_Standard_Type((const Handle_Standard_Type&)(result))), SWIGTYPE_p_Handle_Standard_Type, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Curve(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Curve(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Curve(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Curve(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom_Curve * arg1 = (Geom_Curve *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_Curve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class Curve can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_setAxis(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Conic *arg1 = (Geom_Conic *) 0 ;
  gp_Ax1 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_setAxis.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_setAxis" "', argument " "1"" of type '" "Geom_Conic *""'"); 
  }
  arg1 = (Geom_Conic *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Ax1,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Conic_setAxis" "', argument " "2"" of type '" "gp_Ax1 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Conic_setAxis" "', argument " "2"" of type '" "gp_Ax1 const &""'"); 
  }
  arg2 = (gp_Ax1 *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetAxis((gp_Ax1 const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_setLocation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Conic *arg1 = (Geom_Conic *) 0 ;
  gp_Pnt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_setLocation.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_setLocation" "', argument " "1"" of type '" "Geom_Conic *""'"); 
  }
  arg1 = (Geom_Conic *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Conic_setLocation" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Conic_setLocation" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  arg2 = (gp_Pnt *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetLocation((gp_Pnt const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_setPosition(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Conic *arg1 = (Geom_Conic *) 0 ;
  gp_Ax2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_setPosition.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_setPosition" "', argument " "1"" of type '" "Geom_Conic *""'"); 
  }
  arg1 = (Geom_Conic *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Ax2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Conic_setPosition" "', argument " "2"" of type '" "gp_Ax2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Conic_setPosition" "', argument " "2"" of type '" "gp_Ax2 const &""'"); 
  }
  arg2 = (gp_Ax2 *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetPosition((gp_Ax2 const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_axis(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Conic *arg1 = (Geom_Conic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Ax1 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_axis.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_axis" "', argument " "1"" of type '" "Geom_Conic *""'"); 
  }
  arg1 = (Geom_Conic *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Axis();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Ax1((const gp_Ax1&)(result))), SWIGTYPE_p_gp_Ax1, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_eccentricity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Conic *arg1 = (Geom_Conic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_eccentricity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_eccentricity" "', argument " "1"" of type '" "Geom_Conic *""'"); 
  }
  arg1 = (Geom_Conic *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->Eccentricity();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_location(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Conic *arg1 = (Geom_Conic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Pnt result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_location.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_location" "', argument " "1"" of type '" "Geom_Conic *""'"); 
  }
  arg1 = (Geom_Conic *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Location();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt((const gp_Pnt&)(result))), SWIGTYPE_p_gp_Pnt, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_position(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Conic *arg1 = (Geom_Conic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Ax2 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_position.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_position" "', argument " "1"" of type '" "Geom_Conic *""'"); 
  }
  arg1 = (Geom_Conic *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Position();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Ax2((const gp_Ax2&)(result))), SWIGTYPE_p_gp_Ax2, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_xaxis(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Conic *arg1 = (Geom_Conic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Ax1 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_xaxis.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_xaxis" "', argument " "1"" of type '" "Geom_Conic *""'"); 
  }
  arg1 = (Geom_Conic *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->XAxis();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Ax1((const gp_Ax1&)(result))), SWIGTYPE_p_gp_Ax1, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_yaxis(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Conic *arg1 = (Geom_Conic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Ax1 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_yaxis.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_yaxis" "', argument " "1"" of type '" "Geom_Conic *""'"); 
  }
  arg1 = (Geom_Conic *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->YAxis();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Ax1((const gp_Ax1&)(result))), SWIGTYPE_p_gp_Ax1, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_reverse(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Conic *arg1 = (Geom_Conic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_reverse.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_reverse" "', argument " "1"" of type '" "Geom_Conic *""'"); 
  }
  arg1 = (Geom_Conic *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Reverse();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_reversedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Conic *arg1 = (Geom_Conic *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_reversedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_reversedParameter" "', argument " "1"" of type '" "Geom_Conic *""'"); 
  }
  arg1 = (Geom_Conic *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Conic_reversedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->ReversedParameter(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_continuity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Conic *arg1 = (Geom_Conic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GeomAbs_Shape result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_continuity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_continuity" "', argument " "1"" of type '" "Geom_Conic *""'"); 
  }
  arg1 = (Geom_Conic *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Continuity();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new GeomAbs_Shape((const GeomAbs_Shape&)(result))), SWIGTYPE_p_GeomAbs_Shape, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_isCn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Conic *arg1 = (Geom_Conic *) 0 ;
  Standard_Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_isCn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_isCn" "', argument " "1"" of type '" "Geom_Conic *""'"); 
  }
  arg1 = (Geom_Conic *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Conic_isCn" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsCN(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_dynamicType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Conic *arg1 = (Geom_Conic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Standard_Type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_dynamicType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_dynamicType" "', argument " "1"" of type '" "Geom_Conic *""'"); 
  }
  arg1 = (Geom_Conic *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DynamicType();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new Handle_Standard_Type((const Handle_Standard_Type&)(result))), SWIGTYPE_p_Handle_Standard_Type, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Conic(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Conic(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Conic(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Conic(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom_Conic * arg1 = (Geom_Conic *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_Conic(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class Conic can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BoundedCurve_endPoint(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_BoundedCurve *arg1 = (Geom_BoundedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Pnt result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BoundedCurve_endPoint.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_BoundedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoundedCurve_endPoint" "', argument " "1"" of type '" "Geom_BoundedCurve *""'"); 
  }
  arg1 = (Geom_BoundedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->EndPoint();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt((const gp_Pnt&)(result))), SWIGTYPE_p_gp_Pnt, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BoundedCurve_startPoint(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_BoundedCurve *arg1 = (Geom_BoundedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Pnt result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BoundedCurve_startPoint.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_BoundedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoundedCurve_startPoint" "', argument " "1"" of type '" "Geom_BoundedCurve *""'"); 
  }
  arg1 = (Geom_BoundedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->StartPoint();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt((const gp_Pnt&)(result))), SWIGTYPE_p_gp_Pnt, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BoundedCurve_dynamicType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_BoundedCurve *arg1 = (Geom_BoundedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Standard_Type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BoundedCurve_dynamicType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_BoundedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoundedCurve_dynamicType" "', argument " "1"" of type '" "Geom_BoundedCurve *""'"); 
  }
  arg1 = (Geom_BoundedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DynamicType();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new Handle_Standard_Type((const Handle_Standard_Type&)(result))), SWIGTYPE_p_Handle_Standard_Type, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_BoundedCurve(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_BoundedCurve(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_BoundedCurve(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_BoundedCurve(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom_BoundedCurve * arg1 = (Geom_BoundedCurve *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_BoundedCurve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class BoundedCurve can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Circle__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  gp_Circ *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Geom_Circle *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Circle__SWIG_0.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Circ,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Circle" "', argument " "1"" of type '" "gp_Circ const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Circle" "', argument " "1"" of type '" "gp_Circ const &""'"); 
  }
  arg1 = (gp_Circ *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom_Circle *)new Geom_Circle((gp_Circ const &)*arg1);
    // hacked
    Handle_Geom_Circle *handle;
    handle = (Handle_Geom_Circle *)new Handle_Geom_Circle((Geom_Circle const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom_Circle, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Circle__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Geom_Circle *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Circle__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Ax2,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Circle" "', argument " "1"" of type '" "gp_Ax2 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Circle" "', argument " "1"" of type '" "gp_Ax2 const &""'"); 
  }
  arg1 = (gp_Ax2 *)(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Circle" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom_Circle *)new Geom_Circle((gp_Ax2 const &)*arg1,arg2);
    // hacked
    Handle_Geom_Circle *handle;
    handle = (Handle_Geom_Circle *)new Handle_Geom_Circle((Geom_Circle const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom_Circle, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Circle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Circle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Circle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Circle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Circle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Circle");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_setCirc(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Circle *arg1 = (Geom_Circle *) 0 ;
  gp_Circ *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_setCirc.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_setCirc" "', argument " "1"" of type '" "Geom_Circle *""'"); 
  }
  arg1 = (Geom_Circle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Circ,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Circle_setCirc" "', argument " "2"" of type '" "gp_Circ const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_setCirc" "', argument " "2"" of type '" "gp_Circ const &""'"); 
  }
  arg2 = (gp_Circ *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetCirc((gp_Circ const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_setRadius(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Circle *arg1 = (Geom_Circle *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_setRadius.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_setRadius" "', argument " "1"" of type '" "Geom_Circle *""'"); 
  }
  arg1 = (Geom_Circle *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_setRadius" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetRadius(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_circ(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Circle *arg1 = (Geom_Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Circ result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_circ.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_circ" "', argument " "1"" of type '" "Geom_Circle *""'"); 
  }
  arg1 = (Geom_Circle *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Circ();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Circ((const gp_Circ&)(result))), SWIGTYPE_p_gp_Circ, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_radius(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Circle *arg1 = (Geom_Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_radius.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_radius" "', argument " "1"" of type '" "Geom_Circle *""'"); 
  }
  arg1 = (Geom_Circle *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->Radius();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_reversedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Circle *arg1 = (Geom_Circle *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_reversedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_reversedParameter" "', argument " "1"" of type '" "Geom_Circle *""'"); 
  }
  arg1 = (Geom_Circle *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_reversedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->ReversedParameter(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_eccentricity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Circle *arg1 = (Geom_Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_eccentricity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_eccentricity" "', argument " "1"" of type '" "Geom_Circle *""'"); 
  }
  arg1 = (Geom_Circle *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->Eccentricity();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_firstParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Circle *arg1 = (Geom_Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_firstParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_firstParameter" "', argument " "1"" of type '" "Geom_Circle *""'"); 
  }
  arg1 = (Geom_Circle *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->FirstParameter();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_lastParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Circle *arg1 = (Geom_Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_lastParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_lastParameter" "', argument " "1"" of type '" "Geom_Circle *""'"); 
  }
  arg1 = (Geom_Circle *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->LastParameter();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_isClosed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Circle *arg1 = (Geom_Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_isClosed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_isClosed" "', argument " "1"" of type '" "Geom_Circle *""'"); 
  }
  arg1 = (Geom_Circle *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsClosed();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_isPeriodic(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Circle *arg1 = (Geom_Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_isPeriodic.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_isPeriodic" "', argument " "1"" of type '" "Geom_Circle *""'"); 
  }
  arg1 = (Geom_Circle *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsPeriodic();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_d0(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Circle *arg1 = (Geom_Circle *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_d0.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_d0" "', argument " "1"" of type '" "Geom_Circle *""'"); 
  }
  arg1 = (Geom_Circle *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_d0" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Circle_d0" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_d0" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  arg3 = (gp_Pnt *)(argp3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D0(arg2,*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_d1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Circle *arg1 = (Geom_Circle *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt *arg3 = 0 ;
  gp_Vec *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_d1.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_d1" "', argument " "1"" of type '" "Geom_Circle *""'"); 
  }
  arg1 = (Geom_Circle *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_d1" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Circle_d1" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_d1" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  arg3 = (gp_Pnt *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Circle_d1" "', argument " "4"" of type '" "gp_Vec &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_d1" "', argument " "4"" of type '" "gp_Vec &""'"); 
  }
  arg4 = (gp_Vec *)(argp4);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D1(arg2,*arg3,*arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_d2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Circle *arg1 = (Geom_Circle *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt *arg3 = 0 ;
  gp_Vec *arg4 = 0 ;
  gp_Vec *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_d2.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_d2" "', argument " "1"" of type '" "Geom_Circle *""'"); 
  }
  arg1 = (Geom_Circle *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_d2" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Circle_d2" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_d2" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  arg3 = (gp_Pnt *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Circle_d2" "', argument " "4"" of type '" "gp_Vec &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_d2" "', argument " "4"" of type '" "gp_Vec &""'"); 
  }
  arg4 = (gp_Vec *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Circle_d2" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_d2" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  arg5 = (gp_Vec *)(argp5);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D2(arg2,*arg3,*arg4,*arg5);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_d3(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Circle *arg1 = (Geom_Circle *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt *arg3 = 0 ;
  gp_Vec *arg4 = 0 ;
  gp_Vec *arg5 = 0 ;
  gp_Vec *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_d3.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_d3" "', argument " "1"" of type '" "Geom_Circle *""'"); 
  }
  arg1 = (Geom_Circle *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_d3" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Circle_d3" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_d3" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  arg3 = (gp_Pnt *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Circle_d3" "', argument " "4"" of type '" "gp_Vec &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_d3" "', argument " "4"" of type '" "gp_Vec &""'"); 
  }
  arg4 = (gp_Vec *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Circle_d3" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_d3" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  arg5 = (gp_Vec *)(argp5);
  res6 = SWIG_ConvertPtr(args[4], &argp6, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Circle_d3" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_d3" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  arg6 = (gp_Vec *)(argp6);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D3(arg2,*arg3,*arg4,*arg5,*arg6);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_dn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Circle *arg1 = (Geom_Circle *) 0 ;
  Standard_Real arg2 ;
  Standard_Integer arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  gp_Vec result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_dn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_dn" "', argument " "1"" of type '" "Geom_Circle *""'"); 
  }
  arg1 = (Geom_Circle *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_dn" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Circle_dn" "', argument " "3"" of type '" "Standard_Integer""'");
  } 
  arg3 = (Standard_Integer)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DN(arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Vec((const gp_Vec&)(result))), SWIGTYPE_p_gp_Vec, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_transform(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Circle *arg1 = (Geom_Circle *) 0 ;
  gp_Trsf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_transform.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_transform" "', argument " "1"" of type '" "Geom_Circle *""'"); 
  }
  arg1 = (Geom_Circle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Circle_transform" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_transform" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  arg2 = (gp_Trsf *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Transform((gp_Trsf const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_copy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Circle *arg1 = (Geom_Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_Geometry result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_copy.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_copy" "', argument " "1"" of type '" "Geom_Circle *""'"); 
  }
  arg1 = (Geom_Circle *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Copy();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Geometry *handle = (Handle_Geom_Geometry *)new Handle_Geom_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_dynamicType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_Circle *arg1 = (Geom_Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Standard_Type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_dynamicType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_dynamicType" "', argument " "1"" of type '" "Geom_Circle *""'"); 
  }
  arg1 = (Geom_Circle *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DynamicType();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new Handle_Standard_Type((const Handle_Standard_Type&)(result))), SWIGTYPE_p_Handle_Standard_Type, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_makeCircle__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Circ *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Handle_Geom_Circle result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Circ,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Circ const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Circ const &""'"); 
  }
  arg1 = (gp_Circ *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom_Circle_makeCircle__SWIG_0((gp_Circ const &)*arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Circle *handle = (Handle_Geom_Circle *)new Handle_Geom_Circle(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_makeCircle__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Handle_Geom_Circle result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Ax2,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Ax2 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Ax2 const &""'"); 
  }
  arg1 = (gp_Ax2 *)(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom_Circle_makeCircle__SWIG_1((gp_Ax2 const &)*arg1,arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Circle *handle = (Handle_Geom_Circle *)new Handle_Geom_Circle(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_makeCircle__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Circ *arg1 = 0 ;
  Standard_Real arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Handle_Geom_Circle result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Circ,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Circ const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Circ const &""'"); 
  }
  arg1 = (gp_Circ *)(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom_Circle_makeCircle__SWIG_2((gp_Circ const &)*arg1,arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Circle *handle = (Handle_Geom_Circle *)new Handle_Geom_Circle(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_makeCircle__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Circ *arg1 = 0 ;
  gp_Pnt *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Handle_Geom_Circle result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Circ,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Circ const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Circ const &""'"); 
  }
  arg1 = (gp_Circ *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  arg2 = (gp_Pnt *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom_Circle_makeCircle__SWIG_3((gp_Circ const &)*arg1,(gp_Pnt const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Circle *handle = (Handle_Geom_Circle *)new Handle_Geom_Circle(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_makeCircle__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Pnt *arg1 = 0 ;
  gp_Pnt *arg2 = 0 ;
  gp_Pnt *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Handle_Geom_Circle result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Pnt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Pnt const &""'"); 
  }
  arg1 = (gp_Pnt *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  arg2 = (gp_Pnt *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Circle_makeCircle" "', argument " "3"" of type '" "gp_Pnt const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "3"" of type '" "gp_Pnt const &""'"); 
  }
  arg3 = (gp_Pnt *)(argp3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom_Circle_makeCircle__SWIG_4((gp_Pnt const &)*arg1,(gp_Pnt const &)*arg2,(gp_Pnt const &)*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Circle *handle = (Handle_Geom_Circle *)new Handle_Geom_Circle(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_makeCircle__SWIG_5(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Pnt *arg1 = 0 ;
  gp_Dir *arg2 = 0 ;
  Standard_Real arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  Handle_Geom_Circle result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Pnt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Pnt const &""'"); 
  }
  arg1 = (gp_Pnt *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_gp_Dir,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "gp_Dir const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "gp_Dir const &""'"); 
  }
  arg2 = (gp_Dir *)(argp2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Circle_makeCircle" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom_Circle_makeCircle__SWIG_5((gp_Pnt const &)*arg1,(gp_Dir const &)*arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Circle *handle = (Handle_Geom_Circle *)new Handle_Geom_Circle(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_makeCircle__SWIG_6(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Pnt *arg1 = 0 ;
  gp_Pnt *arg2 = 0 ;
  Standard_Real arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  Handle_Geom_Circle result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Pnt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Pnt const &""'"); 
  }
  arg1 = (gp_Pnt *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "gp_Pnt const &""'"); 
  }
  arg2 = (gp_Pnt *)(argp2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Circle_makeCircle" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom_Circle_makeCircle__SWIG_6((gp_Pnt const &)*arg1,(gp_Pnt const &)*arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Circle *handle = (Handle_Geom_Circle *)new Handle_Geom_Circle(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_makeCircle__SWIG_7(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Ax1 *arg1 = 0 ;
  Standard_Real arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Handle_Geom_Circle result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Ax1,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Ax1 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Ax1 const &""'"); 
  }
  arg1 = (gp_Ax1 *)(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom_Circle_makeCircle__SWIG_7((gp_Ax1 const &)*arg1,arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Circle *handle = (Handle_Geom_Circle *)new Handle_Geom_Circle(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle__wrap_Circle_makeCircle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Circle_makeCircle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Circle_makeCircle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Circle_makeCircle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Circle_makeCircle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Circle_makeCircle__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Circle_makeCircle__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Circle_makeCircle__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Circle_makeCircle__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Circle_makeCircle__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Circle_makeCircle__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Circle_makeCircle__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Circle_makeCircle__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Circle_makeCircle__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Circle_makeCircle__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Circle_makeCircle__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Circle_makeCircle__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function makeCircle.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Circle(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Circle(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Circle(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Circle(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom_Circle * arg1 = (Geom_Circle *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_TrimmedCurve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom_Curve *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Boolean arg4 = (Standard_Boolean) (Standard_Boolean)true ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  Geom_TrimmedCurve *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TrimmedCurve.");
  {
    // handlein
    void *argpointer ;
    int res = SWIG_ConvertPtr(args[0]->ToObject()->Get(SWIGV8_SYMBOL_NEW("_handle")), &argpointer, SWIGTYPE_p_Handle_Standard_Transient, 0);
    arg1 = (Handle_Geom_Curve *)(argpointer);
  }
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TrimmedCurve" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TrimmedCurve" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TrimmedCurve" "', argument " "4"" of type '" "Standard_Boolean""'");
  } 
  arg4 = (Standard_Boolean)(val4);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom_TrimmedCurve *)new Geom_TrimmedCurve((Handle_Geom_Curve const &)*arg1,arg2,arg3,arg4);
    // hacked
    Handle_Geom_TrimmedCurve *handle;
    handle = (Handle_Geom_TrimmedCurve *)new Handle_Geom_TrimmedCurve((Geom_TrimmedCurve const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom_TrimmedCurve, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_reverse(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_reverse.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_reverse" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Reverse();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_reversedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_reversedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_reversedParameter" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrimmedCurve_reversedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->ReversedParameter(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_setTrim(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Boolean arg4 = (Standard_Boolean) (Standard_Boolean)true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_setTrim.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_setTrim" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrimmedCurve_setTrim" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TrimmedCurve_setTrim" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TrimmedCurve_setTrim" "', argument " "4"" of type '" "Standard_Boolean""'");
  } 
  arg4 = (Standard_Boolean)(val4);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetTrim(arg2,arg3,arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_basisCurve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_Curve result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_basisCurve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_basisCurve" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->BasisCurve();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Curve *handle = (Handle_Geom_Curve *)new Handle_Geom_Curve(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_continuity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GeomAbs_Shape result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_continuity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_continuity" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Continuity();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new GeomAbs_Shape((const GeomAbs_Shape&)(result))), SWIGTYPE_p_GeomAbs_Shape, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_isCn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  Standard_Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_isCn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_isCn" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrimmedCurve_isCn" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsCN(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_endPoint(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Pnt result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_endPoint.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_endPoint" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->EndPoint();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt((const gp_Pnt&)(result))), SWIGTYPE_p_gp_Pnt, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_firstParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_firstParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_firstParameter" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->FirstParameter();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_isClosed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_isClosed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_isClosed" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsClosed();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_isPeriodic(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_isPeriodic.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_isPeriodic" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsPeriodic();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_period(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_period.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_period" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->Period();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_lastParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_lastParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_lastParameter" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->LastParameter();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_startPoint(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Pnt result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_startPoint.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_startPoint" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->StartPoint();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt((const gp_Pnt&)(result))), SWIGTYPE_p_gp_Pnt, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_d0(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_d0.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_d0" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrimmedCurve_d0" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TrimmedCurve_d0" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_d0" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  arg3 = (gp_Pnt *)(argp3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D0(arg2,*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_d1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt *arg3 = 0 ;
  gp_Vec *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_d1.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_d1" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrimmedCurve_d1" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TrimmedCurve_d1" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_d1" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  arg3 = (gp_Pnt *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TrimmedCurve_d1" "', argument " "4"" of type '" "gp_Vec &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_d1" "', argument " "4"" of type '" "gp_Vec &""'"); 
  }
  arg4 = (gp_Vec *)(argp4);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D1(arg2,*arg3,*arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_d2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt *arg3 = 0 ;
  gp_Vec *arg4 = 0 ;
  gp_Vec *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_d2.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_d2" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrimmedCurve_d2" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TrimmedCurve_d2" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_d2" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  arg3 = (gp_Pnt *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TrimmedCurve_d2" "', argument " "4"" of type '" "gp_Vec &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_d2" "', argument " "4"" of type '" "gp_Vec &""'"); 
  }
  arg4 = (gp_Vec *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TrimmedCurve_d2" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_d2" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  arg5 = (gp_Vec *)(argp5);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D2(arg2,*arg3,*arg4,*arg5);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_d3(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt *arg3 = 0 ;
  gp_Vec *arg4 = 0 ;
  gp_Vec *arg5 = 0 ;
  gp_Vec *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_d3.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_d3" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrimmedCurve_d3" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Pnt,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TrimmedCurve_d3" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_d3" "', argument " "3"" of type '" "gp_Pnt &""'"); 
  }
  arg3 = (gp_Pnt *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TrimmedCurve_d3" "', argument " "4"" of type '" "gp_Vec &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_d3" "', argument " "4"" of type '" "gp_Vec &""'"); 
  }
  arg4 = (gp_Vec *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TrimmedCurve_d3" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_d3" "', argument " "5"" of type '" "gp_Vec &""'"); 
  }
  arg5 = (gp_Vec *)(argp5);
  res6 = SWIG_ConvertPtr(args[4], &argp6, SWIGTYPE_p_gp_Vec,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "TrimmedCurve_d3" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_d3" "', argument " "6"" of type '" "gp_Vec &""'"); 
  }
  arg6 = (gp_Vec *)(argp6);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D3(arg2,*arg3,*arg4,*arg5,*arg6);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_dn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  Standard_Real arg2 ;
  Standard_Integer arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  gp_Vec result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_dn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_dn" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrimmedCurve_dn" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TrimmedCurve_dn" "', argument " "3"" of type '" "Standard_Integer""'");
  } 
  arg3 = (Standard_Integer)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DN(arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Vec((const gp_Vec&)(result))), SWIGTYPE_p_gp_Vec, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_transform(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  gp_Trsf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_transform.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_transform" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TrimmedCurve_transform" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_transform" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  arg2 = (gp_Trsf *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Transform((gp_Trsf const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_transformedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  Standard_Real arg2 ;
  gp_Trsf *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_transformedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_transformedParameter" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrimmedCurve_transformedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Trsf,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TrimmedCurve_transformedParameter" "', argument " "3"" of type '" "gp_Trsf const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_transformedParameter" "', argument " "3"" of type '" "gp_Trsf const &""'"); 
  }
  arg3 = (gp_Trsf *)(argp3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->TransformedParameter(arg2,(gp_Trsf const &)*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_parametricTransformation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  gp_Trsf *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_parametricTransformation.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_parametricTransformation" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TrimmedCurve_parametricTransformation" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_parametricTransformation" "', argument " "2"" of type '" "gp_Trsf const &""'"); 
  }
  arg2 = (gp_Trsf *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->ParametricTransformation((gp_Trsf const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_copy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_Geometry result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_copy.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_copy" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Copy();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    // attach handle
    Handle_Geom_Geometry *handle = (Handle_Geom_Geometry *)new Handle_Geom_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_dynamicType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Standard_Type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_dynamicType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_dynamicType" "', argument " "1"" of type '" "Geom_TrimmedCurve *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DynamicType();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new Handle_Standard_Type((const Handle_Standard_Type&)(result))), SWIGTYPE_p_Handle_Standard_Type, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TrimmedCurve(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TrimmedCurve(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TrimmedCurve(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TrimmedCurve(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom_TrimmedCurve * arg1 = (Geom_TrimmedCurve *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_Geometry__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom_Geometry *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Geometry__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_Geometry *)new Handle_Geom_Geometry();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_Geometry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Geometry__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom_Geometry *arg1 = (Geom_Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_Geometry *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Geometry__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Geometry" "', argument " "1"" of type '" "Geom_Geometry const *""'"); 
  }
  arg1 = (Geom_Geometry *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_Geometry *)new Handle_Geom_Geometry((Geom_Geometry const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_Geometry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Geometry(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Geometry__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Geometry__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Geometry__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Geometry__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_Geometry");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_Geometry(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_Geometry(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_Geometry(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_Geometry(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom_Geometry * arg1 = (Handle_Geom_Geometry *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_Surface__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom_Surface *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Surface__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_Surface *)new Handle_Geom_Surface();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_Surface, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Surface__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom_Surface *arg1 = (Geom_Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_Surface *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Surface__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Surface" "', argument " "1"" of type '" "Geom_Surface const *""'"); 
  }
  arg1 = (Geom_Surface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_Surface *)new Handle_Geom_Surface((Geom_Surface const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_Surface, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Surface(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Surface__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Surface__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Surface__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Surface__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_Surface");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_Surface(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_Surface(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_Surface(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_Surface(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom_Surface * arg1 = (Handle_Geom_Surface *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_ElementarySurface__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom_ElementarySurface *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_ElementarySurface__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_ElementarySurface *)new Handle_Geom_ElementarySurface();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_ElementarySurface, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_ElementarySurface__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom_ElementarySurface *arg1 = (Geom_ElementarySurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_ElementarySurface *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_ElementarySurface__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom_ElementarySurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_ElementarySurface" "', argument " "1"" of type '" "Geom_ElementarySurface const *""'"); 
  }
  arg1 = (Geom_ElementarySurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_ElementarySurface *)new Handle_Geom_ElementarySurface((Geom_ElementarySurface const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_ElementarySurface, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_ElementarySurface(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_ElementarySurface__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_ElementarySurface__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_ElementarySurface__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_ElementarySurface__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_ElementarySurface");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_ElementarySurface(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_ElementarySurface(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_ElementarySurface(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_ElementarySurface(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom_ElementarySurface * arg1 = (Handle_Geom_ElementarySurface *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_SphericalSurface__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom_SphericalSurface *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_SphericalSurface__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_SphericalSurface *)new Handle_Geom_SphericalSurface();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_SphericalSurface, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_SphericalSurface__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom_SphericalSurface *arg1 = (Geom_SphericalSurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_SphericalSurface *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_SphericalSurface__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom_SphericalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_SphericalSurface" "', argument " "1"" of type '" "Geom_SphericalSurface const *""'"); 
  }
  arg1 = (Geom_SphericalSurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_SphericalSurface *)new Handle_Geom_SphericalSurface((Geom_SphericalSurface const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_SphericalSurface, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_SphericalSurface(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_SphericalSurface__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_SphericalSurface__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_SphericalSurface__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_SphericalSurface__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_SphericalSurface");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_SphericalSurface(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_SphericalSurface(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_SphericalSurface(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_SphericalSurface(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom_SphericalSurface * arg1 = (Handle_Geom_SphericalSurface *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_CylindricalSurface__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom_CylindricalSurface *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_CylindricalSurface__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_CylindricalSurface *)new Handle_Geom_CylindricalSurface();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_CylindricalSurface, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_CylindricalSurface__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom_CylindricalSurface *arg1 = (Geom_CylindricalSurface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_CylindricalSurface *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_CylindricalSurface__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom_CylindricalSurface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_CylindricalSurface" "', argument " "1"" of type '" "Geom_CylindricalSurface const *""'"); 
  }
  arg1 = (Geom_CylindricalSurface *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_CylindricalSurface *)new Handle_Geom_CylindricalSurface((Geom_CylindricalSurface const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_CylindricalSurface, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_CylindricalSurface(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_CylindricalSurface__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_CylindricalSurface__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_CylindricalSurface__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_CylindricalSurface__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_CylindricalSurface");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_CylindricalSurface(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_CylindricalSurface(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_CylindricalSurface(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_CylindricalSurface(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom_CylindricalSurface * arg1 = (Handle_Geom_CylindricalSurface *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_AxisPlacement__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom_AxisPlacement *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_AxisPlacement__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_AxisPlacement *)new Handle_Geom_AxisPlacement();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_AxisPlacement, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_AxisPlacement__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom_AxisPlacement *arg1 = (Geom_AxisPlacement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_AxisPlacement *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_AxisPlacement__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom_AxisPlacement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_AxisPlacement" "', argument " "1"" of type '" "Geom_AxisPlacement const *""'"); 
  }
  arg1 = (Geom_AxisPlacement *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_AxisPlacement *)new Handle_Geom_AxisPlacement((Geom_AxisPlacement const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_AxisPlacement, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_AxisPlacement(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_AxisPlacement__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_AxisPlacement__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_AxisPlacement__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_AxisPlacement__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_AxisPlacement");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_AxisPlacement(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_AxisPlacement(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_AxisPlacement(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_AxisPlacement(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom_AxisPlacement * arg1 = (Handle_Geom_AxisPlacement *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_Axis1Placement__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom_Axis1Placement *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Axis1Placement__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_Axis1Placement *)new Handle_Geom_Axis1Placement();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_Axis1Placement, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Axis1Placement__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom_Axis1Placement *arg1 = (Geom_Axis1Placement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_Axis1Placement *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Axis1Placement__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom_Axis1Placement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Axis1Placement" "', argument " "1"" of type '" "Geom_Axis1Placement const *""'"); 
  }
  arg1 = (Geom_Axis1Placement *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_Axis1Placement *)new Handle_Geom_Axis1Placement((Geom_Axis1Placement const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_Axis1Placement, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Axis1Placement(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Axis1Placement__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Axis1Placement__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Axis1Placement__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Axis1Placement__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_Axis1Placement");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_Axis1Placement(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_Axis1Placement(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_Axis1Placement(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_Axis1Placement(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom_Axis1Placement * arg1 = (Handle_Geom_Axis1Placement *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_Curve__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom_Curve *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Curve__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_Curve *)new Handle_Geom_Curve();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_Curve, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Curve__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom_Curve *arg1 = (Geom_Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_Curve *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Curve__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Curve" "', argument " "1"" of type '" "Geom_Curve const *""'"); 
  }
  arg1 = (Geom_Curve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_Curve *)new Handle_Geom_Curve((Geom_Curve const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_Curve, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Curve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Curve__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Curve__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Curve__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Curve__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_Curve");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_Curve(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_Curve(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_Curve(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_Curve(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom_Curve * arg1 = (Handle_Geom_Curve *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_Conic__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom_Conic *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Conic__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_Conic *)new Handle_Geom_Conic();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_Conic, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Conic__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom_Conic *arg1 = (Geom_Conic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_Conic *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Conic__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Conic" "', argument " "1"" of type '" "Geom_Conic const *""'"); 
  }
  arg1 = (Geom_Conic *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_Conic *)new Handle_Geom_Conic((Geom_Conic const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_Conic, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Conic(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Conic__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Conic__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Conic__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Conic__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_Conic");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_Conic(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_Conic(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_Conic(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_Conic(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom_Conic * arg1 = (Handle_Geom_Conic *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_BoundedCurve__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom_BoundedCurve *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_BoundedCurve__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_BoundedCurve *)new Handle_Geom_BoundedCurve();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_BoundedCurve, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_BoundedCurve__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom_BoundedCurve *arg1 = (Geom_BoundedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_BoundedCurve *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_BoundedCurve__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom_BoundedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_BoundedCurve" "', argument " "1"" of type '" "Geom_BoundedCurve const *""'"); 
  }
  arg1 = (Geom_BoundedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_BoundedCurve *)new Handle_Geom_BoundedCurve((Geom_BoundedCurve const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_BoundedCurve, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_BoundedCurve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_BoundedCurve__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_BoundedCurve__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_BoundedCurve__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_BoundedCurve__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_BoundedCurve");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_BoundedCurve(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_BoundedCurve(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_BoundedCurve(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_BoundedCurve(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom_BoundedCurve * arg1 = (Handle_Geom_BoundedCurve *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_Circle__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom_Circle *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Circle__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_Circle *)new Handle_Geom_Circle();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_Circle, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Circle__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom_Circle *arg1 = (Geom_Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_Circle *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Circle__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Circle" "', argument " "1"" of type '" "Geom_Circle const *""'"); 
  }
  arg1 = (Geom_Circle *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_Circle *)new Handle_Geom_Circle((Geom_Circle const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_Circle, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Circle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Circle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Circle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Circle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Circle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_Circle");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_Circle(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_Circle(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_Circle(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_Circle(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom_Circle * arg1 = (Handle_Geom_Circle *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_TrimmedCurve__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom_TrimmedCurve *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_TrimmedCurve__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_TrimmedCurve *)new Handle_Geom_TrimmedCurve();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_TrimmedCurve, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_TrimmedCurve__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom_TrimmedCurve *arg1 = (Geom_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom_TrimmedCurve *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_TrimmedCurve__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_TrimmedCurve" "', argument " "1"" of type '" "Geom_TrimmedCurve const *""'"); 
  }
  arg1 = (Geom_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom_TrimmedCurve *)new Handle_Geom_TrimmedCurve((Geom_TrimmedCurve const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom_TrimmedCurve, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_TrimmedCurve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_TrimmedCurve__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_TrimmedCurve__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_TrimmedCurve__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_TrimmedCurve__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_TrimmedCurve");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_TrimmedCurve(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_TrimmedCurve(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_TrimmedCurve(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_TrimmedCurve(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom_TrimmedCurve * arg1 = (Handle_Geom_TrimmedCurve *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Handle_Geom_CurveTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *) (Handle_Geom_Geometry *) ((Handle_Geom_Curve *) x));
}
static void *_p_Handle_Geom_SurfaceTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *) (Handle_Geom_Geometry *) ((Handle_Geom_Surface *) x));
}
static void *_p_Handle_Geom_ElementarySurfaceTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *) (Handle_Geom_Geometry *)(Handle_Geom_Surface *) ((Handle_Geom_ElementarySurface *) x));
}
static void *_p_Handle_Geom_SphericalSurfaceTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *) (Handle_Geom_Geometry *)(Handle_Geom_Surface *)(Handle_Geom_ElementarySurface *) ((Handle_Geom_SphericalSurface *) x));
}
static void *_p_Handle_Geom_CylindricalSurfaceTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *) (Handle_Geom_Geometry *)(Handle_Geom_Surface *)(Handle_Geom_ElementarySurface *) ((Handle_Geom_CylindricalSurface *) x));
}
static void *_p_Handle_Geom_AxisPlacementTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *) (Handle_Geom_Geometry *) ((Handle_Geom_AxisPlacement *) x));
}
static void *_p_Handle_Geom_Axis1PlacementTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *) (Handle_Geom_Geometry *)(Handle_Geom_AxisPlacement *) ((Handle_Geom_Axis1Placement *) x));
}
static void *_p_Handle_Geom_ConicTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *) (Handle_Geom_Geometry *)(Handle_Geom_Curve *) ((Handle_Geom_Conic *) x));
}
static void *_p_Handle_Geom_GeometryTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *)  ((Handle_Geom_Geometry *) x));
}
static void *_p_Handle_Geom_BoundedCurveTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *) (Handle_Geom_Geometry *)(Handle_Geom_Curve *) ((Handle_Geom_BoundedCurve *) x));
}
static void *_p_Handle_Geom_TrimmedCurveTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *) (Handle_Geom_Geometry *)(Handle_Geom_Curve *)(Handle_Geom_BoundedCurve *) ((Handle_Geom_TrimmedCurve *) x));
}
static void *_p_Handle_Geom_CircleTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *) (Handle_Geom_Geometry *)(Handle_Geom_Curve *)(Handle_Geom_Conic *) ((Handle_Geom_Circle *) x));
}
static void *_p_Geom_CurveTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *) (Geom_Geometry *) ((Geom_Curve *) x));
}
static void *_p_Geom_SurfaceTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *) (Geom_Geometry *) ((Geom_Surface *) x));
}
static void *_p_Geom_ElementarySurfaceTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *) (Geom_Geometry *)(Geom_Surface *) ((Geom_ElementarySurface *) x));
}
static void *_p_Geom_SphericalSurfaceTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *) (Geom_Geometry *)(Geom_Surface *)(Geom_ElementarySurface *) ((Geom_SphericalSurface *) x));
}
static void *_p_Geom_CylindricalSurfaceTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *) (Geom_Geometry *)(Geom_Surface *)(Geom_ElementarySurface *) ((Geom_CylindricalSurface *) x));
}
static void *_p_Geom_AxisPlacementTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *) (Geom_Geometry *) ((Geom_AxisPlacement *) x));
}
static void *_p_Geom_Axis1PlacementTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *) (Geom_Geometry *)(Geom_AxisPlacement *) ((Geom_Axis1Placement *) x));
}
static void *_p_Geom_ConicTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *) (Geom_Geometry *)(Geom_Curve *) ((Geom_Conic *) x));
}
static void *_p_Geom_GeometryTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *)  ((Geom_Geometry *) x));
}
static void *_p_Geom_BoundedCurveTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *) (Geom_Geometry *)(Geom_Curve *) ((Geom_BoundedCurve *) x));
}
static void *_p_Geom_TrimmedCurveTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *) (Geom_Geometry *)(Geom_Curve *)(Geom_BoundedCurve *) ((Geom_TrimmedCurve *) x));
}
static void *_p_Geom_CircleTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *) (Geom_Geometry *)(Geom_Curve *)(Geom_Conic *) ((Geom_Circle *) x));
}
static void *_p_Handle_Geom_Axis1PlacementTo_p_Handle_Geom_AxisPlacement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_AxisPlacement *)  ((Handle_Geom_Axis1Placement *) x));
}
static void *_p_Geom_Axis1PlacementTo_p_Geom_AxisPlacement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_AxisPlacement *)  ((Geom_Axis1Placement *) x));
}
static void *_p_Handle_Geom_SphericalSurfaceTo_p_Handle_Geom_ElementarySurface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_ElementarySurface *)  ((Handle_Geom_SphericalSurface *) x));
}
static void *_p_Handle_Geom_CylindricalSurfaceTo_p_Handle_Geom_ElementarySurface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_ElementarySurface *)  ((Handle_Geom_CylindricalSurface *) x));
}
static void *_p_Handle_Geom_ElementarySurfaceTo_p_Handle_Geom_Surface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_Surface *)  ((Handle_Geom_ElementarySurface *) x));
}
static void *_p_Handle_Geom_SphericalSurfaceTo_p_Handle_Geom_Surface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_Surface *) (Handle_Geom_ElementarySurface *) ((Handle_Geom_SphericalSurface *) x));
}
static void *_p_Handle_Geom_CylindricalSurfaceTo_p_Handle_Geom_Surface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_Surface *) (Handle_Geom_ElementarySurface *) ((Handle_Geom_CylindricalSurface *) x));
}
static void *_p_Geom_SphericalSurfaceTo_p_Geom_ElementarySurface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_ElementarySurface *)  ((Geom_SphericalSurface *) x));
}
static void *_p_Geom_CylindricalSurfaceTo_p_Geom_ElementarySurface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_ElementarySurface *)  ((Geom_CylindricalSurface *) x));
}
static void *_p_Geom_ElementarySurfaceTo_p_Geom_Surface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_Surface *)  ((Geom_ElementarySurface *) x));
}
static void *_p_Geom_SphericalSurfaceTo_p_Geom_Surface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_Surface *) (Geom_ElementarySurface *) ((Geom_SphericalSurface *) x));
}
static void *_p_Geom_CylindricalSurfaceTo_p_Geom_Surface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_Surface *) (Geom_ElementarySurface *) ((Geom_CylindricalSurface *) x));
}
static void *_p_Handle_Geom_ConicTo_p_Handle_Geom_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_Curve *)  ((Handle_Geom_Conic *) x));
}
static void *_p_Handle_Geom_BoundedCurveTo_p_Handle_Geom_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_Curve *)  ((Handle_Geom_BoundedCurve *) x));
}
static void *_p_Handle_Geom_TrimmedCurveTo_p_Handle_Geom_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_Curve *) (Handle_Geom_BoundedCurve *) ((Handle_Geom_TrimmedCurve *) x));
}
static void *_p_Handle_Geom_CircleTo_p_Handle_Geom_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_Curve *) (Handle_Geom_Conic *) ((Handle_Geom_Circle *) x));
}
static void *_p_Geom_ConicTo_p_Geom_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_Curve *)  ((Geom_Conic *) x));
}
static void *_p_Geom_BoundedCurveTo_p_Geom_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_Curve *)  ((Geom_BoundedCurve *) x));
}
static void *_p_Geom_TrimmedCurveTo_p_Geom_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_Curve *) (Geom_BoundedCurve *) ((Geom_TrimmedCurve *) x));
}
static void *_p_Geom_CircleTo_p_Geom_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_Curve *) (Geom_Conic *) ((Geom_Circle *) x));
}
static void *_p_Handle_Geom_CurveTo_p_Handle_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_Geometry *)  ((Handle_Geom_Curve *) x));
}
static void *_p_Handle_Geom_SurfaceTo_p_Handle_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_Geometry *)  ((Handle_Geom_Surface *) x));
}
static void *_p_Handle_Geom_ElementarySurfaceTo_p_Handle_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_Geometry *) (Handle_Geom_Surface *) ((Handle_Geom_ElementarySurface *) x));
}
static void *_p_Handle_Geom_SphericalSurfaceTo_p_Handle_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_Geometry *) (Handle_Geom_Surface *)(Handle_Geom_ElementarySurface *) ((Handle_Geom_SphericalSurface *) x));
}
static void *_p_Handle_Geom_CylindricalSurfaceTo_p_Handle_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_Geometry *) (Handle_Geom_Surface *)(Handle_Geom_ElementarySurface *) ((Handle_Geom_CylindricalSurface *) x));
}
static void *_p_Handle_Geom_AxisPlacementTo_p_Handle_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_Geometry *)  ((Handle_Geom_AxisPlacement *) x));
}
static void *_p_Handle_Geom_Axis1PlacementTo_p_Handle_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_Geometry *) (Handle_Geom_AxisPlacement *) ((Handle_Geom_Axis1Placement *) x));
}
static void *_p_Handle_Geom_ConicTo_p_Handle_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_Geometry *) (Handle_Geom_Curve *) ((Handle_Geom_Conic *) x));
}
static void *_p_Handle_Geom_BoundedCurveTo_p_Handle_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_Geometry *) (Handle_Geom_Curve *) ((Handle_Geom_BoundedCurve *) x));
}
static void *_p_Handle_Geom_TrimmedCurveTo_p_Handle_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_Geometry *) (Handle_Geom_Curve *)(Handle_Geom_BoundedCurve *) ((Handle_Geom_TrimmedCurve *) x));
}
static void *_p_Handle_Geom_CircleTo_p_Handle_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_Geometry *) (Handle_Geom_Curve *)(Handle_Geom_Conic *) ((Handle_Geom_Circle *) x));
}
static void *_p_Geom_CurveTo_p_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_Geometry *)  ((Geom_Curve *) x));
}
static void *_p_Geom_SurfaceTo_p_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_Geometry *)  ((Geom_Surface *) x));
}
static void *_p_Geom_ElementarySurfaceTo_p_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_Geometry *) (Geom_Surface *) ((Geom_ElementarySurface *) x));
}
static void *_p_Geom_SphericalSurfaceTo_p_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_Geometry *) (Geom_Surface *)(Geom_ElementarySurface *) ((Geom_SphericalSurface *) x));
}
static void *_p_Geom_CylindricalSurfaceTo_p_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_Geometry *) (Geom_Surface *)(Geom_ElementarySurface *) ((Geom_CylindricalSurface *) x));
}
static void *_p_Geom_AxisPlacementTo_p_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_Geometry *)  ((Geom_AxisPlacement *) x));
}
static void *_p_Geom_Axis1PlacementTo_p_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_Geometry *) (Geom_AxisPlacement *) ((Geom_Axis1Placement *) x));
}
static void *_p_Geom_ConicTo_p_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_Geometry *) (Geom_Curve *) ((Geom_Conic *) x));
}
static void *_p_Geom_BoundedCurveTo_p_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_Geometry *) (Geom_Curve *) ((Geom_BoundedCurve *) x));
}
static void *_p_Geom_TrimmedCurveTo_p_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_Geometry *) (Geom_Curve *)(Geom_BoundedCurve *) ((Geom_TrimmedCurve *) x));
}
static void *_p_Geom_CircleTo_p_Geom_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_Geometry *) (Geom_Curve *)(Geom_Conic *) ((Geom_Circle *) x));
}
static void *_p_Geom_CircleTo_p_Geom_Conic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_Conic *)  ((Geom_Circle *) x));
}
static void *_p_Handle_Geom_CircleTo_p_Handle_Geom_Conic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_Conic *)  ((Handle_Geom_Circle *) x));
}
static void *_p_Handle_Geom_CurveTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *)(Handle_Geom_Geometry *) ((Handle_Geom_Curve *) x));
}
static void *_p_Handle_MMgt_TSharedTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *)  ((Handle_MMgt_TShared *) x));
}
static void *_p_Handle_Geom_SurfaceTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *)(Handle_Geom_Geometry *) ((Handle_Geom_Surface *) x));
}
static void *_p_Handle_Geom_ElementarySurfaceTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *)(Handle_Geom_Geometry *)(Handle_Geom_Surface *) ((Handle_Geom_ElementarySurface *) x));
}
static void *_p_Handle_Geom_SphericalSurfaceTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *)(Handle_Geom_Geometry *)(Handle_Geom_Surface *)(Handle_Geom_ElementarySurface *) ((Handle_Geom_SphericalSurface *) x));
}
static void *_p_Handle_Geom_CylindricalSurfaceTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *)(Handle_Geom_Geometry *)(Handle_Geom_Surface *)(Handle_Geom_ElementarySurface *) ((Handle_Geom_CylindricalSurface *) x));
}
static void *_p_Handle_Geom_AxisPlacementTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *)(Handle_Geom_Geometry *) ((Handle_Geom_AxisPlacement *) x));
}
static void *_p_Handle_Geom_Axis1PlacementTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *)(Handle_Geom_Geometry *)(Handle_Geom_AxisPlacement *) ((Handle_Geom_Axis1Placement *) x));
}
static void *_p_Handle_Geom_ConicTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *)(Handle_Geom_Geometry *)(Handle_Geom_Curve *) ((Handle_Geom_Conic *) x));
}
static void *_p_Handle_Geom_GeometryTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *) ((Handle_Geom_Geometry *) x));
}
static void *_p_Handle_Geom_BoundedCurveTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *)(Handle_Geom_Geometry *)(Handle_Geom_Curve *) ((Handle_Geom_BoundedCurve *) x));
}
static void *_p_Handle_Geom_TrimmedCurveTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *)(Handle_Geom_Geometry *)(Handle_Geom_Curve *)(Handle_Geom_BoundedCurve *) ((Handle_Geom_TrimmedCurve *) x));
}
static void *_p_Handle_Geom_CircleTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *)(Handle_Geom_Geometry *)(Handle_Geom_Curve *)(Handle_Geom_Conic *) ((Handle_Geom_Circle *) x));
}
static void *_p_Geom_CurveTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *)(Geom_Geometry *) ((Geom_Curve *) x));
}
static void *_p_MMgt_TSharedTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *)  ((MMgt_TShared *) x));
}
static void *_p_Geom_SurfaceTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *)(Geom_Geometry *) ((Geom_Surface *) x));
}
static void *_p_Geom_ElementarySurfaceTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *)(Geom_Geometry *)(Geom_Surface *) ((Geom_ElementarySurface *) x));
}
static void *_p_Geom_SphericalSurfaceTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *)(Geom_Geometry *)(Geom_Surface *)(Geom_ElementarySurface *) ((Geom_SphericalSurface *) x));
}
static void *_p_Geom_CylindricalSurfaceTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *)(Geom_Geometry *)(Geom_Surface *)(Geom_ElementarySurface *) ((Geom_CylindricalSurface *) x));
}
static void *_p_Geom_AxisPlacementTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *)(Geom_Geometry *) ((Geom_AxisPlacement *) x));
}
static void *_p_Geom_Axis1PlacementTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *)(Geom_Geometry *)(Geom_AxisPlacement *) ((Geom_Axis1Placement *) x));
}
static void *_p_Geom_ConicTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *)(Geom_Geometry *)(Geom_Curve *) ((Geom_Conic *) x));
}
static void *_p_Geom_GeometryTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *) ((Geom_Geometry *) x));
}
static void *_p_Geom_BoundedCurveTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *)(Geom_Geometry *)(Geom_Curve *) ((Geom_BoundedCurve *) x));
}
static void *_p_Geom_TrimmedCurveTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *)(Geom_Geometry *)(Geom_Curve *)(Geom_BoundedCurve *) ((Geom_TrimmedCurve *) x));
}
static void *_p_Geom_CircleTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *)(Geom_Geometry *)(Geom_Curve *)(Geom_Conic *) ((Geom_Circle *) x));
}
static void *_p_Geom_TrimmedCurveTo_p_Geom_BoundedCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom_BoundedCurve *)  ((Geom_TrimmedCurve *) x));
}
static void *_p_Handle_Geom_TrimmedCurveTo_p_Handle_Geom_BoundedCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom_BoundedCurve *)  ((Handle_Geom_TrimmedCurve *) x));
}
static swig_type_info _swigt__p_GeomAbs_Shape = {"_p_GeomAbs_Shape", "GeomAbs_Shape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geom_Axis1Placement = {"_p_Geom_Axis1Placement", "p_Geom_Axis1Placement|Geom_Axis1Placement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geom_AxisPlacement = {"_p_Geom_AxisPlacement", "p_Geom_AxisPlacement|Geom_AxisPlacement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geom_BoundedCurve = {"_p_Geom_BoundedCurve", "Geom_BoundedCurve *|p_Geom_BoundedCurve", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geom_Circle = {"_p_Geom_Circle", "Geom_Circle *|p_Geom_Circle", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geom_Conic = {"_p_Geom_Conic", "p_Geom_Conic|Geom_Conic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geom_Curve = {"_p_Geom_Curve", "Geom_Curve *|p_Geom_Curve", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geom_CylindricalSurface = {"_p_Geom_CylindricalSurface", "p_Geom_CylindricalSurface|Geom_CylindricalSurface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geom_ElementarySurface = {"_p_Geom_ElementarySurface", "p_Geom_ElementarySurface|Geom_ElementarySurface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geom_Geometry = {"_p_Geom_Geometry", "p_Geom_Geometry|Geom_Geometry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geom_SphericalSurface = {"_p_Geom_SphericalSurface", "p_Geom_SphericalSurface|Geom_SphericalSurface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geom_Surface = {"_p_Geom_Surface", "p_Geom_Surface|Geom_Surface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geom_TrimmedCurve = {"_p_Geom_TrimmedCurve", "Geom_TrimmedCurve *|p_Geom_TrimmedCurve", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom_Axis1Placement = {"_p_Handle_Geom_Axis1Placement", "p_Handle_Geom_Axis1Placement", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom_AxisPlacement = {"_p_Handle_Geom_AxisPlacement", "p_Handle_Geom_AxisPlacement|Handle_Geom_AxisPlacement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom_BoundedCurve = {"_p_Handle_Geom_BoundedCurve", "Handle_Geom_BoundedCurve *|p_Handle_Geom_BoundedCurve", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom_Circle = {"_p_Handle_Geom_Circle", "p_Handle_Geom_Circle", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom_Conic = {"_p_Handle_Geom_Conic", "p_Handle_Geom_Conic|Handle_Geom_Conic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom_Curve = {"_p_Handle_Geom_Curve", "Handle_Geom_Curve *|p_Handle_Geom_Curve", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom_CylindricalSurface = {"_p_Handle_Geom_CylindricalSurface", "p_Handle_Geom_CylindricalSurface", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom_ElementarySurface = {"_p_Handle_Geom_ElementarySurface", "p_Handle_Geom_ElementarySurface|Handle_Geom_ElementarySurface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom_Geometry = {"_p_Handle_Geom_Geometry", "p_Handle_Geom_Geometry|Handle_Geom_Geometry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom_SphericalSurface = {"_p_Handle_Geom_SphericalSurface", "p_Handle_Geom_SphericalSurface", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom_Surface = {"_p_Handle_Geom_Surface", "p_Handle_Geom_Surface|Handle_Geom_Surface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom_TrimmedCurve = {"_p_Handle_Geom_TrimmedCurve", "p_Handle_Geom_TrimmedCurve", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_MMgt_TShared = {"_p_Handle_MMgt_TShared", "p_Handle_MMgt_TShared|Handle_MMgt_TShared *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Standard_Transient = {"_p_Handle_Standard_Transient", "p_Handle_Standard_Transient|Handle_Standard_Transient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Standard_Type = {"_p_Handle_Standard_Type", "Handle_Standard_Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MMgt_TShared = {"_p_MMgt_TShared", "p_MMgt_TShared|MMgt_TShared *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Standard_Transient = {"_p_Standard_Transient", "p_Standard_Transient|Standard_Transient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *|Standard_Boolean *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "Standard_Real *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gp_Ax1 = {"_p_gp_Ax1", "gp_Ax1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gp_Ax2 = {"_p_gp_Ax2", "gp_Ax2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gp_Ax3 = {"_p_gp_Ax3", "gp_Ax3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gp_Circ = {"_p_gp_Circ", "gp_Circ *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gp_Cylinder = {"_p_gp_Cylinder", "gp_Cylinder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gp_Dir = {"_p_gp_Dir", "gp_Dir *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gp_GTrsf2d = {"_p_gp_GTrsf2d", "gp_GTrsf2d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gp_Pnt = {"_p_gp_Pnt", "gp_Pnt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gp_Sphere = {"_p_gp_Sphere", "gp_Sphere *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gp_Trsf = {"_p_gp_Trsf", "gp_Trsf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gp_Vec = {"_p_gp_Vec", "gp_Vec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|Standard_Integer *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_GeomAbs_Shape,
  &_swigt__p_Geom_Axis1Placement,
  &_swigt__p_Geom_AxisPlacement,
  &_swigt__p_Geom_BoundedCurve,
  &_swigt__p_Geom_Circle,
  &_swigt__p_Geom_Conic,
  &_swigt__p_Geom_Curve,
  &_swigt__p_Geom_CylindricalSurface,
  &_swigt__p_Geom_ElementarySurface,
  &_swigt__p_Geom_Geometry,
  &_swigt__p_Geom_SphericalSurface,
  &_swigt__p_Geom_Surface,
  &_swigt__p_Geom_TrimmedCurve,
  &_swigt__p_Handle_Geom_Axis1Placement,
  &_swigt__p_Handle_Geom_AxisPlacement,
  &_swigt__p_Handle_Geom_BoundedCurve,
  &_swigt__p_Handle_Geom_Circle,
  &_swigt__p_Handle_Geom_Conic,
  &_swigt__p_Handle_Geom_Curve,
  &_swigt__p_Handle_Geom_CylindricalSurface,
  &_swigt__p_Handle_Geom_ElementarySurface,
  &_swigt__p_Handle_Geom_Geometry,
  &_swigt__p_Handle_Geom_SphericalSurface,
  &_swigt__p_Handle_Geom_Surface,
  &_swigt__p_Handle_Geom_TrimmedCurve,
  &_swigt__p_Handle_MMgt_TShared,
  &_swigt__p_Handle_Standard_Transient,
  &_swigt__p_Handle_Standard_Type,
  &_swigt__p_MMgt_TShared,
  &_swigt__p_Standard_Transient,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_gp_Ax1,
  &_swigt__p_gp_Ax2,
  &_swigt__p_gp_Ax3,
  &_swigt__p_gp_Circ,
  &_swigt__p_gp_Cylinder,
  &_swigt__p_gp_Dir,
  &_swigt__p_gp_GTrsf2d,
  &_swigt__p_gp_Pnt,
  &_swigt__p_gp_Sphere,
  &_swigt__p_gp_Trsf,
  &_swigt__p_gp_Vec,
  &_swigt__p_int,
};

static swig_cast_info _swigc__p_GeomAbs_Shape[] = {  {&_swigt__p_GeomAbs_Shape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geom_Axis1Placement[] = {  {&_swigt__p_Geom_Axis1Placement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geom_AxisPlacement[] = {  {&_swigt__p_Geom_AxisPlacement, 0, 0, 0},  {&_swigt__p_Geom_Axis1Placement, _p_Geom_Axis1PlacementTo_p_Geom_AxisPlacement, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geom_BoundedCurve[] = {  {&_swigt__p_Geom_BoundedCurve, 0, 0, 0},  {&_swigt__p_Geom_TrimmedCurve, _p_Geom_TrimmedCurveTo_p_Geom_BoundedCurve, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geom_Circle[] = {  {&_swigt__p_Geom_Circle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geom_Conic[] = {  {&_swigt__p_Geom_Conic, 0, 0, 0},  {&_swigt__p_Geom_Circle, _p_Geom_CircleTo_p_Geom_Conic, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geom_Curve[] = {  {&_swigt__p_Geom_Curve, 0, 0, 0},  {&_swigt__p_Geom_Conic, _p_Geom_ConicTo_p_Geom_Curve, 0, 0},  {&_swigt__p_Geom_BoundedCurve, _p_Geom_BoundedCurveTo_p_Geom_Curve, 0, 0},  {&_swigt__p_Geom_TrimmedCurve, _p_Geom_TrimmedCurveTo_p_Geom_Curve, 0, 0},  {&_swigt__p_Geom_Circle, _p_Geom_CircleTo_p_Geom_Curve, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geom_CylindricalSurface[] = {  {&_swigt__p_Geom_CylindricalSurface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geom_ElementarySurface[] = {  {&_swigt__p_Geom_ElementarySurface, 0, 0, 0},  {&_swigt__p_Geom_SphericalSurface, _p_Geom_SphericalSurfaceTo_p_Geom_ElementarySurface, 0, 0},  {&_swigt__p_Geom_CylindricalSurface, _p_Geom_CylindricalSurfaceTo_p_Geom_ElementarySurface, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geom_Geometry[] = {  {&_swigt__p_Geom_Curve, _p_Geom_CurveTo_p_Geom_Geometry, 0, 0},  {&_swigt__p_Geom_Conic, _p_Geom_ConicTo_p_Geom_Geometry, 0, 0},  {&_swigt__p_Geom_Surface, _p_Geom_SurfaceTo_p_Geom_Geometry, 0, 0},  {&_swigt__p_Geom_ElementarySurface, _p_Geom_ElementarySurfaceTo_p_Geom_Geometry, 0, 0},  {&_swigt__p_Geom_SphericalSurface, _p_Geom_SphericalSurfaceTo_p_Geom_Geometry, 0, 0},  {&_swigt__p_Geom_CylindricalSurface, _p_Geom_CylindricalSurfaceTo_p_Geom_Geometry, 0, 0},  {&_swigt__p_Geom_AxisPlacement, _p_Geom_AxisPlacementTo_p_Geom_Geometry, 0, 0},  {&_swigt__p_Geom_Axis1Placement, _p_Geom_Axis1PlacementTo_p_Geom_Geometry, 0, 0},  {&_swigt__p_Geom_Geometry, 0, 0, 0},  {&_swigt__p_Geom_BoundedCurve, _p_Geom_BoundedCurveTo_p_Geom_Geometry, 0, 0},  {&_swigt__p_Geom_TrimmedCurve, _p_Geom_TrimmedCurveTo_p_Geom_Geometry, 0, 0},  {&_swigt__p_Geom_Circle, _p_Geom_CircleTo_p_Geom_Geometry, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geom_SphericalSurface[] = {  {&_swigt__p_Geom_SphericalSurface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geom_Surface[] = {  {&_swigt__p_Geom_Surface, 0, 0, 0},  {&_swigt__p_Geom_ElementarySurface, _p_Geom_ElementarySurfaceTo_p_Geom_Surface, 0, 0},  {&_swigt__p_Geom_SphericalSurface, _p_Geom_SphericalSurfaceTo_p_Geom_Surface, 0, 0},  {&_swigt__p_Geom_CylindricalSurface, _p_Geom_CylindricalSurfaceTo_p_Geom_Surface, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geom_TrimmedCurve[] = {  {&_swigt__p_Geom_TrimmedCurve, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom_Axis1Placement[] = {  {&_swigt__p_Handle_Geom_Axis1Placement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom_AxisPlacement[] = {  {&_swigt__p_Handle_Geom_AxisPlacement, 0, 0, 0},  {&_swigt__p_Handle_Geom_Axis1Placement, _p_Handle_Geom_Axis1PlacementTo_p_Handle_Geom_AxisPlacement, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom_BoundedCurve[] = {  {&_swigt__p_Handle_Geom_BoundedCurve, 0, 0, 0},  {&_swigt__p_Handle_Geom_TrimmedCurve, _p_Handle_Geom_TrimmedCurveTo_p_Handle_Geom_BoundedCurve, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom_Circle[] = {  {&_swigt__p_Handle_Geom_Circle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom_Conic[] = {  {&_swigt__p_Handle_Geom_Conic, 0, 0, 0},  {&_swigt__p_Handle_Geom_Circle, _p_Handle_Geom_CircleTo_p_Handle_Geom_Conic, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom_Curve[] = {  {&_swigt__p_Handle_Geom_Curve, 0, 0, 0},  {&_swigt__p_Handle_Geom_Conic, _p_Handle_Geom_ConicTo_p_Handle_Geom_Curve, 0, 0},  {&_swigt__p_Handle_Geom_BoundedCurve, _p_Handle_Geom_BoundedCurveTo_p_Handle_Geom_Curve, 0, 0},  {&_swigt__p_Handle_Geom_TrimmedCurve, _p_Handle_Geom_TrimmedCurveTo_p_Handle_Geom_Curve, 0, 0},  {&_swigt__p_Handle_Geom_Circle, _p_Handle_Geom_CircleTo_p_Handle_Geom_Curve, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom_CylindricalSurface[] = {  {&_swigt__p_Handle_Geom_CylindricalSurface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom_ElementarySurface[] = {  {&_swigt__p_Handle_Geom_ElementarySurface, 0, 0, 0},  {&_swigt__p_Handle_Geom_SphericalSurface, _p_Handle_Geom_SphericalSurfaceTo_p_Handle_Geom_ElementarySurface, 0, 0},  {&_swigt__p_Handle_Geom_CylindricalSurface, _p_Handle_Geom_CylindricalSurfaceTo_p_Handle_Geom_ElementarySurface, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom_Geometry[] = {  {&_swigt__p_Handle_Geom_Curve, _p_Handle_Geom_CurveTo_p_Handle_Geom_Geometry, 0, 0},  {&_swigt__p_Handle_Geom_Conic, _p_Handle_Geom_ConicTo_p_Handle_Geom_Geometry, 0, 0},  {&_swigt__p_Handle_Geom_Surface, _p_Handle_Geom_SurfaceTo_p_Handle_Geom_Geometry, 0, 0},  {&_swigt__p_Handle_Geom_ElementarySurface, _p_Handle_Geom_ElementarySurfaceTo_p_Handle_Geom_Geometry, 0, 0},  {&_swigt__p_Handle_Geom_SphericalSurface, _p_Handle_Geom_SphericalSurfaceTo_p_Handle_Geom_Geometry, 0, 0},  {&_swigt__p_Handle_Geom_CylindricalSurface, _p_Handle_Geom_CylindricalSurfaceTo_p_Handle_Geom_Geometry, 0, 0},  {&_swigt__p_Handle_Geom_AxisPlacement, _p_Handle_Geom_AxisPlacementTo_p_Handle_Geom_Geometry, 0, 0},  {&_swigt__p_Handle_Geom_Axis1Placement, _p_Handle_Geom_Axis1PlacementTo_p_Handle_Geom_Geometry, 0, 0},  {&_swigt__p_Handle_Geom_Geometry, 0, 0, 0},  {&_swigt__p_Handle_Geom_BoundedCurve, _p_Handle_Geom_BoundedCurveTo_p_Handle_Geom_Geometry, 0, 0},  {&_swigt__p_Handle_Geom_TrimmedCurve, _p_Handle_Geom_TrimmedCurveTo_p_Handle_Geom_Geometry, 0, 0},  {&_swigt__p_Handle_Geom_Circle, _p_Handle_Geom_CircleTo_p_Handle_Geom_Geometry, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom_SphericalSurface[] = {  {&_swigt__p_Handle_Geom_SphericalSurface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom_Surface[] = {  {&_swigt__p_Handle_Geom_Surface, 0, 0, 0},  {&_swigt__p_Handle_Geom_ElementarySurface, _p_Handle_Geom_ElementarySurfaceTo_p_Handle_Geom_Surface, 0, 0},  {&_swigt__p_Handle_Geom_SphericalSurface, _p_Handle_Geom_SphericalSurfaceTo_p_Handle_Geom_Surface, 0, 0},  {&_swigt__p_Handle_Geom_CylindricalSurface, _p_Handle_Geom_CylindricalSurfaceTo_p_Handle_Geom_Surface, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom_TrimmedCurve[] = {  {&_swigt__p_Handle_Geom_TrimmedCurve, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_MMgt_TShared[] = {  {&_swigt__p_Handle_Geom_Curve, _p_Handle_Geom_CurveTo_p_Handle_MMgt_TShared, 0, 0},  {&_swigt__p_Handle_MMgt_TShared, 0, 0, 0},  {&_swigt__p_Handle_Geom_Conic, _p_Handle_Geom_ConicTo_p_Handle_MMgt_TShared, 0, 0},  {&_swigt__p_Handle_Geom_Surface, _p_Handle_Geom_SurfaceTo_p_Handle_MMgt_TShared, 0, 0},  {&_swigt__p_Handle_Geom_ElementarySurface, _p_Handle_Geom_ElementarySurfaceTo_p_Handle_MMgt_TShared, 0, 0},  {&_swigt__p_Handle_Geom_SphericalSurface, _p_Handle_Geom_SphericalSurfaceTo_p_Handle_MMgt_TShared, 0, 0},  {&_swigt__p_Handle_Geom_CylindricalSurface, _p_Handle_Geom_CylindricalSurfaceTo_p_Handle_MMgt_TShared, 0, 0},  {&_swigt__p_Handle_Geom_AxisPlacement, _p_Handle_Geom_AxisPlacementTo_p_Handle_MMgt_TShared, 0, 0},  {&_swigt__p_Handle_Geom_Axis1Placement, _p_Handle_Geom_Axis1PlacementTo_p_Handle_MMgt_TShared, 0, 0},  {&_swigt__p_Handle_Geom_BoundedCurve, _p_Handle_Geom_BoundedCurveTo_p_Handle_MMgt_TShared, 0, 0},  {&_swigt__p_Handle_Geom_TrimmedCurve, _p_Handle_Geom_TrimmedCurveTo_p_Handle_MMgt_TShared, 0, 0},  {&_swigt__p_Handle_Geom_Geometry, _p_Handle_Geom_GeometryTo_p_Handle_MMgt_TShared, 0, 0},  {&_swigt__p_Handle_Geom_Circle, _p_Handle_Geom_CircleTo_p_Handle_MMgt_TShared, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Standard_Transient[] = {  {&_swigt__p_Handle_Geom_Conic, _p_Handle_Geom_ConicTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_Transient, 0, 0, 0},  {&_swigt__p_Handle_MMgt_TShared, _p_Handle_MMgt_TSharedTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Geom_TrimmedCurve, _p_Handle_Geom_TrimmedCurveTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Geom_BoundedCurve, _p_Handle_Geom_BoundedCurveTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Geom_Axis1Placement, _p_Handle_Geom_Axis1PlacementTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Geom_AxisPlacement, _p_Handle_Geom_AxisPlacementTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Geom_Curve, _p_Handle_Geom_CurveTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Geom_Circle, _p_Handle_Geom_CircleTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Geom_Geometry, _p_Handle_Geom_GeometryTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Geom_CylindricalSurface, _p_Handle_Geom_CylindricalSurfaceTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Geom_SphericalSurface, _p_Handle_Geom_SphericalSurfaceTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Geom_ElementarySurface, _p_Handle_Geom_ElementarySurfaceTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Geom_Surface, _p_Handle_Geom_SurfaceTo_p_Handle_Standard_Transient, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Standard_Type[] = {  {&_swigt__p_Handle_Standard_Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MMgt_TShared[] = {  {&_swigt__p_Geom_Curve, _p_Geom_CurveTo_p_MMgt_TShared, 0, 0},  {&_swigt__p_MMgt_TShared, 0, 0, 0},  {&_swigt__p_Geom_Conic, _p_Geom_ConicTo_p_MMgt_TShared, 0, 0},  {&_swigt__p_Geom_Surface, _p_Geom_SurfaceTo_p_MMgt_TShared, 0, 0},  {&_swigt__p_Geom_ElementarySurface, _p_Geom_ElementarySurfaceTo_p_MMgt_TShared, 0, 0},  {&_swigt__p_Geom_SphericalSurface, _p_Geom_SphericalSurfaceTo_p_MMgt_TShared, 0, 0},  {&_swigt__p_Geom_CylindricalSurface, _p_Geom_CylindricalSurfaceTo_p_MMgt_TShared, 0, 0},  {&_swigt__p_Geom_AxisPlacement, _p_Geom_AxisPlacementTo_p_MMgt_TShared, 0, 0},  {&_swigt__p_Geom_Axis1Placement, _p_Geom_Axis1PlacementTo_p_MMgt_TShared, 0, 0},  {&_swigt__p_Geom_BoundedCurve, _p_Geom_BoundedCurveTo_p_MMgt_TShared, 0, 0},  {&_swigt__p_Geom_TrimmedCurve, _p_Geom_TrimmedCurveTo_p_MMgt_TShared, 0, 0},  {&_swigt__p_Geom_Geometry, _p_Geom_GeometryTo_p_MMgt_TShared, 0, 0},  {&_swigt__p_Geom_Circle, _p_Geom_CircleTo_p_MMgt_TShared, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Standard_Transient[] = {  {&_swigt__p_Geom_Conic, _p_Geom_ConicTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_Transient, 0, 0, 0},  {&_swigt__p_MMgt_TShared, _p_MMgt_TSharedTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Geom_TrimmedCurve, _p_Geom_TrimmedCurveTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Geom_BoundedCurve, _p_Geom_BoundedCurveTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Geom_Axis1Placement, _p_Geom_Axis1PlacementTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Geom_AxisPlacement, _p_Geom_AxisPlacementTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Geom_Curve, _p_Geom_CurveTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Geom_Circle, _p_Geom_CircleTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Geom_Geometry, _p_Geom_GeometryTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Geom_CylindricalSurface, _p_Geom_CylindricalSurfaceTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Geom_SphericalSurface, _p_Geom_SphericalSurfaceTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Geom_ElementarySurface, _p_Geom_ElementarySurfaceTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Geom_Surface, _p_Geom_SurfaceTo_p_Standard_Transient, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gp_Ax1[] = {  {&_swigt__p_gp_Ax1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gp_Ax2[] = {  {&_swigt__p_gp_Ax2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gp_Ax3[] = {  {&_swigt__p_gp_Ax3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gp_Circ[] = {  {&_swigt__p_gp_Circ, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gp_Cylinder[] = {  {&_swigt__p_gp_Cylinder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gp_Dir[] = {  {&_swigt__p_gp_Dir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gp_GTrsf2d[] = {  {&_swigt__p_gp_GTrsf2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gp_Pnt[] = {  {&_swigt__p_gp_Pnt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gp_Sphere[] = {  {&_swigt__p_gp_Sphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gp_Trsf[] = {  {&_swigt__p_gp_Trsf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gp_Vec[] = {  {&_swigt__p_gp_Vec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_GeomAbs_Shape,
  _swigc__p_Geom_Axis1Placement,
  _swigc__p_Geom_AxisPlacement,
  _swigc__p_Geom_BoundedCurve,
  _swigc__p_Geom_Circle,
  _swigc__p_Geom_Conic,
  _swigc__p_Geom_Curve,
  _swigc__p_Geom_CylindricalSurface,
  _swigc__p_Geom_ElementarySurface,
  _swigc__p_Geom_Geometry,
  _swigc__p_Geom_SphericalSurface,
  _swigc__p_Geom_Surface,
  _swigc__p_Geom_TrimmedCurve,
  _swigc__p_Handle_Geom_Axis1Placement,
  _swigc__p_Handle_Geom_AxisPlacement,
  _swigc__p_Handle_Geom_BoundedCurve,
  _swigc__p_Handle_Geom_Circle,
  _swigc__p_Handle_Geom_Conic,
  _swigc__p_Handle_Geom_Curve,
  _swigc__p_Handle_Geom_CylindricalSurface,
  _swigc__p_Handle_Geom_ElementarySurface,
  _swigc__p_Handle_Geom_Geometry,
  _swigc__p_Handle_Geom_SphericalSurface,
  _swigc__p_Handle_Geom_Surface,
  _swigc__p_Handle_Geom_TrimmedCurve,
  _swigc__p_Handle_MMgt_TShared,
  _swigc__p_Handle_Standard_Transient,
  _swigc__p_Handle_Standard_Type,
  _swigc__p_MMgt_TShared,
  _swigc__p_Standard_Transient,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_gp_Ax1,
  _swigc__p_gp_Ax2,
  _swigc__p_gp_Ax3,
  _swigc__p_gp_Circ,
  _swigc__p_gp_Cylinder,
  _swigc__p_gp_Dir,
  _swigc__p_gp_GTrsf2d,
  _swigc__p_gp_Pnt,
  _swigc__p_gp_Sphere,
  _swigc__p_gp_Trsf,
  _swigc__p_gp_Vec,
  _swigc__p_int,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




#include <assert.h>

SWIGRUNTIME void
SWIG_V8_SetModule(void *, swig_module_info *swig_module) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::External> mod = SWIGV8_EXTERNAL_NEW(swig_module);
  assert(!mod.IsEmpty());
  global_obj->SetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"), mod);
}

SWIGRUNTIME swig_module_info *
SWIG_V8_GetModule(void *) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::Value> moduleinfo = global_obj->GetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"));

  if (moduleinfo.IsEmpty())
  {
    // It's not yet loaded
    return 0;
  }

  v8::Local<v8::External> moduleinfo_extern = v8::Local<v8::External>::Cast(moduleinfo);

  if (moduleinfo_extern.IsEmpty())
  {
    // Something's not right
    return 0;
  }

  void *ptr = moduleinfo_extern->Value();
  assert(ptr);
  swig_module_info *retptr = static_cast<swig_module_info *>(ptr);
  assert(retptr);
  return retptr;
}

#define SWIG_GetModule(clientdata)                SWIG_V8_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_V8_SetModule(clientdata, pointer)


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


// Note: 'extern "C"'' disables name mangling which makes it easier to load the symbol manually
// TODO: is it ok to do that?
extern "C"
#if (NODE_MODULE_VERSION < 0x000C)
void SWIGV8_INIT (v8::Handle<v8::Object> exports)
#else
void SWIGV8_INIT (v8::Handle<v8::Object> exports, v8::Handle<v8::Object> /*module*/)
#endif
{
  SWIG_InitializeModule(static_cast<void *>(&exports));

  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> exports_obj = exports;


  // a class template for creating proxies of undefined types
  SWIGV8_SET_CLASS_TEMPL(SWIGV8_SWIGTYPE_Proxy_class_templ, SWIGV8_CreateClassTemplate("SwigProxy"));

  /* create objects for namespaces */
  

  /* create class templates */
  /* Name: _exports_Standard_Transient, Type: p_Standard_Transient, Dtor: _wrap_delete_Standard_Transient */
v8::Handle<v8::FunctionTemplate> _exports_Standard_Transient_class = SWIGV8_CreateClassTemplate("_exports_Standard_Transient");
SWIGV8_SET_CLASS_TEMPL(_exports_Standard_Transient_clientData.class_templ, _exports_Standard_Transient_class);
_exports_Standard_Transient_clientData.dtor = _wrap_delete_Standard_Transient;
if (SWIGTYPE_p_Standard_Transient->clientdata == 0) {
  SWIGTYPE_p_Standard_Transient->clientdata = &_exports_Standard_Transient_clientData;
}
/* Name: _exports_MMgt_TShared, Type: p_MMgt_TShared, Dtor: _wrap_delete_MMgt_TShared */
v8::Handle<v8::FunctionTemplate> _exports_MMgt_TShared_class = SWIGV8_CreateClassTemplate("_exports_MMgt_TShared");
SWIGV8_SET_CLASS_TEMPL(_exports_MMgt_TShared_clientData.class_templ, _exports_MMgt_TShared_class);
_exports_MMgt_TShared_clientData.dtor = _wrap_delete_MMgt_TShared;
if (SWIGTYPE_p_MMgt_TShared->clientdata == 0) {
  SWIGTYPE_p_MMgt_TShared->clientdata = &_exports_MMgt_TShared_clientData;
}
/* Name: _exports_Handle_Standard_Transient, Type: p_Handle_Standard_Transient, Dtor: _wrap_delete_Handle_Standard_Transient */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Standard_Transient_class = SWIGV8_CreateClassTemplate("_exports_Handle_Standard_Transient");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_Standard_Transient_clientData.class_templ, _exports_Handle_Standard_Transient_class);
_exports_Handle_Standard_Transient_clientData.dtor = _wrap_delete_Handle_Standard_Transient;
if (SWIGTYPE_p_Handle_Standard_Transient->clientdata == 0) {
  SWIGTYPE_p_Handle_Standard_Transient->clientdata = &_exports_Handle_Standard_Transient_clientData;
}
/* Name: _exports_Handle_MMgt_TShared, Type: p_Handle_MMgt_TShared, Dtor: _wrap_delete_Handle_MMgt_TShared */
v8::Handle<v8::FunctionTemplate> _exports_Handle_MMgt_TShared_class = SWIGV8_CreateClassTemplate("_exports_Handle_MMgt_TShared");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_MMgt_TShared_clientData.class_templ, _exports_Handle_MMgt_TShared_class);
_exports_Handle_MMgt_TShared_clientData.dtor = _wrap_delete_Handle_MMgt_TShared;
if (SWIGTYPE_p_Handle_MMgt_TShared->clientdata == 0) {
  SWIGTYPE_p_Handle_MMgt_TShared->clientdata = &_exports_Handle_MMgt_TShared_clientData;
}
/* Name: _exports_Geometry, Type: p_Geom_Geometry, Dtor: _wrap_delete_Geometry */
v8::Handle<v8::FunctionTemplate> _exports_Geometry_class = SWIGV8_CreateClassTemplate("_exports_Geometry");
SWIGV8_SET_CLASS_TEMPL(_exports_Geometry_clientData.class_templ, _exports_Geometry_class);
_exports_Geometry_clientData.dtor = _wrap_delete_Geometry;
if (SWIGTYPE_p_Geom_Geometry->clientdata == 0) {
  SWIGTYPE_p_Geom_Geometry->clientdata = &_exports_Geometry_clientData;
}
/* Name: _exports_Surface, Type: p_Geom_Surface, Dtor: _wrap_delete_Surface */
v8::Handle<v8::FunctionTemplate> _exports_Surface_class = SWIGV8_CreateClassTemplate("_exports_Surface");
SWIGV8_SET_CLASS_TEMPL(_exports_Surface_clientData.class_templ, _exports_Surface_class);
_exports_Surface_clientData.dtor = _wrap_delete_Surface;
if (SWIGTYPE_p_Geom_Surface->clientdata == 0) {
  SWIGTYPE_p_Geom_Surface->clientdata = &_exports_Surface_clientData;
}
/* Name: _exports_ElementarySurface, Type: p_Geom_ElementarySurface, Dtor: _wrap_delete_ElementarySurface */
v8::Handle<v8::FunctionTemplate> _exports_ElementarySurface_class = SWIGV8_CreateClassTemplate("_exports_ElementarySurface");
SWIGV8_SET_CLASS_TEMPL(_exports_ElementarySurface_clientData.class_templ, _exports_ElementarySurface_class);
_exports_ElementarySurface_clientData.dtor = _wrap_delete_ElementarySurface;
if (SWIGTYPE_p_Geom_ElementarySurface->clientdata == 0) {
  SWIGTYPE_p_Geom_ElementarySurface->clientdata = &_exports_ElementarySurface_clientData;
}
/* Name: _exports_SphericalSurface, Type: p_Geom_SphericalSurface, Dtor: _wrap_delete_SphericalSurface */
v8::Handle<v8::FunctionTemplate> _exports_SphericalSurface_class = SWIGV8_CreateClassTemplate("_exports_SphericalSurface");
SWIGV8_SET_CLASS_TEMPL(_exports_SphericalSurface_clientData.class_templ, _exports_SphericalSurface_class);
_exports_SphericalSurface_clientData.dtor = _wrap_delete_SphericalSurface;
if (SWIGTYPE_p_Geom_SphericalSurface->clientdata == 0) {
  SWIGTYPE_p_Geom_SphericalSurface->clientdata = &_exports_SphericalSurface_clientData;
}
/* Name: _exports_CylindricalSurface, Type: p_Geom_CylindricalSurface, Dtor: _wrap_delete_CylindricalSurface */
v8::Handle<v8::FunctionTemplate> _exports_CylindricalSurface_class = SWIGV8_CreateClassTemplate("_exports_CylindricalSurface");
SWIGV8_SET_CLASS_TEMPL(_exports_CylindricalSurface_clientData.class_templ, _exports_CylindricalSurface_class);
_exports_CylindricalSurface_clientData.dtor = _wrap_delete_CylindricalSurface;
if (SWIGTYPE_p_Geom_CylindricalSurface->clientdata == 0) {
  SWIGTYPE_p_Geom_CylindricalSurface->clientdata = &_exports_CylindricalSurface_clientData;
}
/* Name: _exports_AxisPlacement, Type: p_Geom_AxisPlacement, Dtor: _wrap_delete_AxisPlacement */
v8::Handle<v8::FunctionTemplate> _exports_AxisPlacement_class = SWIGV8_CreateClassTemplate("_exports_AxisPlacement");
SWIGV8_SET_CLASS_TEMPL(_exports_AxisPlacement_clientData.class_templ, _exports_AxisPlacement_class);
_exports_AxisPlacement_clientData.dtor = _wrap_delete_AxisPlacement;
if (SWIGTYPE_p_Geom_AxisPlacement->clientdata == 0) {
  SWIGTYPE_p_Geom_AxisPlacement->clientdata = &_exports_AxisPlacement_clientData;
}
/* Name: _exports_Axis1Placement, Type: p_Geom_Axis1Placement, Dtor: _wrap_delete_Axis1Placement */
v8::Handle<v8::FunctionTemplate> _exports_Axis1Placement_class = SWIGV8_CreateClassTemplate("_exports_Axis1Placement");
SWIGV8_SET_CLASS_TEMPL(_exports_Axis1Placement_clientData.class_templ, _exports_Axis1Placement_class);
_exports_Axis1Placement_clientData.dtor = _wrap_delete_Axis1Placement;
if (SWIGTYPE_p_Geom_Axis1Placement->clientdata == 0) {
  SWIGTYPE_p_Geom_Axis1Placement->clientdata = &_exports_Axis1Placement_clientData;
}
/* Name: _exports_Curve, Type: p_Geom_Curve, Dtor: _wrap_delete_Curve */
v8::Handle<v8::FunctionTemplate> _exports_Curve_class = SWIGV8_CreateClassTemplate("_exports_Curve");
SWIGV8_SET_CLASS_TEMPL(_exports_Curve_clientData.class_templ, _exports_Curve_class);
_exports_Curve_clientData.dtor = _wrap_delete_Curve;
if (SWIGTYPE_p_Geom_Curve->clientdata == 0) {
  SWIGTYPE_p_Geom_Curve->clientdata = &_exports_Curve_clientData;
}
/* Name: _exports_Conic, Type: p_Geom_Conic, Dtor: _wrap_delete_Conic */
v8::Handle<v8::FunctionTemplate> _exports_Conic_class = SWIGV8_CreateClassTemplate("_exports_Conic");
SWIGV8_SET_CLASS_TEMPL(_exports_Conic_clientData.class_templ, _exports_Conic_class);
_exports_Conic_clientData.dtor = _wrap_delete_Conic;
if (SWIGTYPE_p_Geom_Conic->clientdata == 0) {
  SWIGTYPE_p_Geom_Conic->clientdata = &_exports_Conic_clientData;
}
/* Name: _exports_BoundedCurve, Type: p_Geom_BoundedCurve, Dtor: _wrap_delete_BoundedCurve */
v8::Handle<v8::FunctionTemplate> _exports_BoundedCurve_class = SWIGV8_CreateClassTemplate("_exports_BoundedCurve");
SWIGV8_SET_CLASS_TEMPL(_exports_BoundedCurve_clientData.class_templ, _exports_BoundedCurve_class);
_exports_BoundedCurve_clientData.dtor = _wrap_delete_BoundedCurve;
if (SWIGTYPE_p_Geom_BoundedCurve->clientdata == 0) {
  SWIGTYPE_p_Geom_BoundedCurve->clientdata = &_exports_BoundedCurve_clientData;
}
/* Name: _exports_Circle, Type: p_Geom_Circle, Dtor: _wrap_delete_Circle */
v8::Handle<v8::FunctionTemplate> _exports_Circle_class = SWIGV8_CreateClassTemplate("_exports_Circle");
SWIGV8_SET_CLASS_TEMPL(_exports_Circle_clientData.class_templ, _exports_Circle_class);
_exports_Circle_clientData.dtor = _wrap_delete_Circle;
if (SWIGTYPE_p_Geom_Circle->clientdata == 0) {
  SWIGTYPE_p_Geom_Circle->clientdata = &_exports_Circle_clientData;
}
/* Name: _exports_TrimmedCurve, Type: p_Geom_TrimmedCurve, Dtor: _wrap_delete_TrimmedCurve */
v8::Handle<v8::FunctionTemplate> _exports_TrimmedCurve_class = SWIGV8_CreateClassTemplate("_exports_TrimmedCurve");
SWIGV8_SET_CLASS_TEMPL(_exports_TrimmedCurve_clientData.class_templ, _exports_TrimmedCurve_class);
_exports_TrimmedCurve_clientData.dtor = _wrap_delete_TrimmedCurve;
if (SWIGTYPE_p_Geom_TrimmedCurve->clientdata == 0) {
  SWIGTYPE_p_Geom_TrimmedCurve->clientdata = &_exports_TrimmedCurve_clientData;
}
/* Name: _exports_Handle_Geometry, Type: p_Handle_Geom_Geometry, Dtor: _wrap_delete_Handle_Geometry */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Geometry_class = SWIGV8_CreateClassTemplate("_exports_Handle_Geometry");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_Geometry_clientData.class_templ, _exports_Handle_Geometry_class);
_exports_Handle_Geometry_clientData.dtor = _wrap_delete_Handle_Geometry;
if (SWIGTYPE_p_Handle_Geom_Geometry->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom_Geometry->clientdata = &_exports_Handle_Geometry_clientData;
}
/* Name: _exports_Handle_Surface, Type: p_Handle_Geom_Surface, Dtor: _wrap_delete_Handle_Surface */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Surface_class = SWIGV8_CreateClassTemplate("_exports_Handle_Surface");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_Surface_clientData.class_templ, _exports_Handle_Surface_class);
_exports_Handle_Surface_clientData.dtor = _wrap_delete_Handle_Surface;
if (SWIGTYPE_p_Handle_Geom_Surface->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom_Surface->clientdata = &_exports_Handle_Surface_clientData;
}
/* Name: _exports_Handle_ElementarySurface, Type: p_Handle_Geom_ElementarySurface, Dtor: _wrap_delete_Handle_ElementarySurface */
v8::Handle<v8::FunctionTemplate> _exports_Handle_ElementarySurface_class = SWIGV8_CreateClassTemplate("_exports_Handle_ElementarySurface");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_ElementarySurface_clientData.class_templ, _exports_Handle_ElementarySurface_class);
_exports_Handle_ElementarySurface_clientData.dtor = _wrap_delete_Handle_ElementarySurface;
if (SWIGTYPE_p_Handle_Geom_ElementarySurface->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom_ElementarySurface->clientdata = &_exports_Handle_ElementarySurface_clientData;
}
/* Name: _exports_Handle_SphericalSurface, Type: p_Handle_Geom_SphericalSurface, Dtor: _wrap_delete_Handle_SphericalSurface */
v8::Handle<v8::FunctionTemplate> _exports_Handle_SphericalSurface_class = SWIGV8_CreateClassTemplate("_exports_Handle_SphericalSurface");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_SphericalSurface_clientData.class_templ, _exports_Handle_SphericalSurface_class);
_exports_Handle_SphericalSurface_clientData.dtor = _wrap_delete_Handle_SphericalSurface;
if (SWIGTYPE_p_Handle_Geom_SphericalSurface->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom_SphericalSurface->clientdata = &_exports_Handle_SphericalSurface_clientData;
}
/* Name: _exports_Handle_CylindricalSurface, Type: p_Handle_Geom_CylindricalSurface, Dtor: _wrap_delete_Handle_CylindricalSurface */
v8::Handle<v8::FunctionTemplate> _exports_Handle_CylindricalSurface_class = SWIGV8_CreateClassTemplate("_exports_Handle_CylindricalSurface");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_CylindricalSurface_clientData.class_templ, _exports_Handle_CylindricalSurface_class);
_exports_Handle_CylindricalSurface_clientData.dtor = _wrap_delete_Handle_CylindricalSurface;
if (SWIGTYPE_p_Handle_Geom_CylindricalSurface->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom_CylindricalSurface->clientdata = &_exports_Handle_CylindricalSurface_clientData;
}
/* Name: _exports_Handle_AxisPlacement, Type: p_Handle_Geom_AxisPlacement, Dtor: _wrap_delete_Handle_AxisPlacement */
v8::Handle<v8::FunctionTemplate> _exports_Handle_AxisPlacement_class = SWIGV8_CreateClassTemplate("_exports_Handle_AxisPlacement");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_AxisPlacement_clientData.class_templ, _exports_Handle_AxisPlacement_class);
_exports_Handle_AxisPlacement_clientData.dtor = _wrap_delete_Handle_AxisPlacement;
if (SWIGTYPE_p_Handle_Geom_AxisPlacement->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom_AxisPlacement->clientdata = &_exports_Handle_AxisPlacement_clientData;
}
/* Name: _exports_Handle_Axis1Placement, Type: p_Handle_Geom_Axis1Placement, Dtor: _wrap_delete_Handle_Axis1Placement */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Axis1Placement_class = SWIGV8_CreateClassTemplate("_exports_Handle_Axis1Placement");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_Axis1Placement_clientData.class_templ, _exports_Handle_Axis1Placement_class);
_exports_Handle_Axis1Placement_clientData.dtor = _wrap_delete_Handle_Axis1Placement;
if (SWIGTYPE_p_Handle_Geom_Axis1Placement->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom_Axis1Placement->clientdata = &_exports_Handle_Axis1Placement_clientData;
}
/* Name: _exports_Handle_Curve, Type: p_Handle_Geom_Curve, Dtor: _wrap_delete_Handle_Curve */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Curve_class = SWIGV8_CreateClassTemplate("_exports_Handle_Curve");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_Curve_clientData.class_templ, _exports_Handle_Curve_class);
_exports_Handle_Curve_clientData.dtor = _wrap_delete_Handle_Curve;
if (SWIGTYPE_p_Handle_Geom_Curve->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom_Curve->clientdata = &_exports_Handle_Curve_clientData;
}
/* Name: _exports_Handle_Conic, Type: p_Handle_Geom_Conic, Dtor: _wrap_delete_Handle_Conic */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Conic_class = SWIGV8_CreateClassTemplate("_exports_Handle_Conic");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_Conic_clientData.class_templ, _exports_Handle_Conic_class);
_exports_Handle_Conic_clientData.dtor = _wrap_delete_Handle_Conic;
if (SWIGTYPE_p_Handle_Geom_Conic->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom_Conic->clientdata = &_exports_Handle_Conic_clientData;
}
/* Name: _exports_Handle_BoundedCurve, Type: p_Handle_Geom_BoundedCurve, Dtor: _wrap_delete_Handle_BoundedCurve */
v8::Handle<v8::FunctionTemplate> _exports_Handle_BoundedCurve_class = SWIGV8_CreateClassTemplate("_exports_Handle_BoundedCurve");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_BoundedCurve_clientData.class_templ, _exports_Handle_BoundedCurve_class);
_exports_Handle_BoundedCurve_clientData.dtor = _wrap_delete_Handle_BoundedCurve;
if (SWIGTYPE_p_Handle_Geom_BoundedCurve->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom_BoundedCurve->clientdata = &_exports_Handle_BoundedCurve_clientData;
}
/* Name: _exports_Handle_Circle, Type: p_Handle_Geom_Circle, Dtor: _wrap_delete_Handle_Circle */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Circle_class = SWIGV8_CreateClassTemplate("_exports_Handle_Circle");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_Circle_clientData.class_templ, _exports_Handle_Circle_class);
_exports_Handle_Circle_clientData.dtor = _wrap_delete_Handle_Circle;
if (SWIGTYPE_p_Handle_Geom_Circle->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom_Circle->clientdata = &_exports_Handle_Circle_clientData;
}
/* Name: _exports_Handle_TrimmedCurve, Type: p_Handle_Geom_TrimmedCurve, Dtor: _wrap_delete_Handle_TrimmedCurve */
v8::Handle<v8::FunctionTemplate> _exports_Handle_TrimmedCurve_class = SWIGV8_CreateClassTemplate("_exports_Handle_TrimmedCurve");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_TrimmedCurve_clientData.class_templ, _exports_Handle_TrimmedCurve_class);
_exports_Handle_TrimmedCurve_clientData.dtor = _wrap_delete_Handle_TrimmedCurve;
if (SWIGTYPE_p_Handle_Geom_TrimmedCurve->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom_TrimmedCurve->clientdata = &_exports_Handle_TrimmedCurve_clientData;
}


  /* register wrapper functions */
  SWIGV8_AddMemberFunction(_exports_Geometry_class, "mirror", _wrap_Geometry__wrap_Geometry_mirror);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "rotate", _wrap_Geometry_rotate);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "scale", _wrap_Geometry_scale);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "translate", _wrap_Geometry__wrap_Geometry_translate);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "transform", _wrap_Geometry_transform);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "mirrored", _wrap_Geometry__wrap_Geometry_mirrored);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "rotated", _wrap_Geometry_rotated);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "scaled", _wrap_Geometry_scaled);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "transformed", _wrap_Geometry_transformed);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "translated", _wrap_Geometry__wrap_Geometry_translated);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "copy", _wrap_Geometry_copy);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "dynamicType", _wrap_Geometry_dynamicType);
SWIGV8_AddMemberFunction(_exports_Surface_class, "ureverse", _wrap_Surface_ureverse);
SWIGV8_AddMemberFunction(_exports_Surface_class, "ureversed", _wrap_Surface_ureversed);
SWIGV8_AddMemberFunction(_exports_Surface_class, "ureversedParameter", _wrap_Surface_ureversedParameter);
SWIGV8_AddMemberFunction(_exports_Surface_class, "vreverse", _wrap_Surface_vreverse);
SWIGV8_AddMemberFunction(_exports_Surface_class, "vreversed", _wrap_Surface_vreversed);
SWIGV8_AddMemberFunction(_exports_Surface_class, "vreversedParameter", _wrap_Surface_vreversedParameter);
SWIGV8_AddMemberFunction(_exports_Surface_class, "transformParameters", _wrap_Surface_transformParameters);
SWIGV8_AddMemberFunction(_exports_Surface_class, "parametricTransformation", _wrap_Surface_parametricTransformation);
SWIGV8_AddMemberFunction(_exports_Surface_class, "bounds", _wrap_Surface_bounds);
SWIGV8_AddMemberFunction(_exports_Surface_class, "isUclosed", _wrap_Surface_isUclosed);
SWIGV8_AddMemberFunction(_exports_Surface_class, "isVclosed", _wrap_Surface_isVclosed);
SWIGV8_AddMemberFunction(_exports_Surface_class, "isUperiodic", _wrap_Surface_isUperiodic);
SWIGV8_AddMemberFunction(_exports_Surface_class, "uperiod", _wrap_Surface_uperiod);
SWIGV8_AddMemberFunction(_exports_Surface_class, "isVperiodic", _wrap_Surface_isVperiodic);
SWIGV8_AddMemberFunction(_exports_Surface_class, "vperiod", _wrap_Surface_vperiod);
SWIGV8_AddMemberFunction(_exports_Surface_class, "uiso", _wrap_Surface_uiso);
SWIGV8_AddMemberFunction(_exports_Surface_class, "viso", _wrap_Surface_viso);
SWIGV8_AddMemberFunction(_exports_Surface_class, "continuity", _wrap_Surface_continuity);
SWIGV8_AddMemberFunction(_exports_Surface_class, "isCnu", _wrap_Surface_isCnu);
SWIGV8_AddMemberFunction(_exports_Surface_class, "isCnv", _wrap_Surface_isCnv);
SWIGV8_AddMemberFunction(_exports_Surface_class, "d0", _wrap_Surface_d0);
SWIGV8_AddMemberFunction(_exports_Surface_class, "d1", _wrap_Surface_d1);
SWIGV8_AddMemberFunction(_exports_Surface_class, "d2", _wrap_Surface_d2);
SWIGV8_AddMemberFunction(_exports_Surface_class, "d3", _wrap_Surface_d3);
SWIGV8_AddMemberFunction(_exports_Surface_class, "dn", _wrap_Surface_dn);
SWIGV8_AddMemberFunction(_exports_Surface_class, "value", _wrap_Surface_value);
SWIGV8_AddMemberFunction(_exports_Surface_class, "dynamicType", _wrap_Surface_dynamicType);
SWIGV8_AddMemberFunction(_exports_ElementarySurface_class, "setAxis", _wrap_ElementarySurface_setAxis);
SWIGV8_AddMemberFunction(_exports_ElementarySurface_class, "setLocation", _wrap_ElementarySurface_setLocation);
SWIGV8_AddMemberFunction(_exports_ElementarySurface_class, "setPosition", _wrap_ElementarySurface_setPosition);
SWIGV8_AddMemberFunction(_exports_ElementarySurface_class, "axis", _wrap_ElementarySurface_axis);
SWIGV8_AddMemberFunction(_exports_ElementarySurface_class, "location", _wrap_ElementarySurface_location);
SWIGV8_AddMemberFunction(_exports_ElementarySurface_class, "position", _wrap_ElementarySurface_position);
SWIGV8_AddMemberFunction(_exports_ElementarySurface_class, "ureverse", _wrap_ElementarySurface_ureverse);
SWIGV8_AddMemberFunction(_exports_ElementarySurface_class, "ureversedParameter", _wrap_ElementarySurface_ureversedParameter);
SWIGV8_AddMemberFunction(_exports_ElementarySurface_class, "vreverse", _wrap_ElementarySurface_vreverse);
SWIGV8_AddMemberFunction(_exports_ElementarySurface_class, "vreversedParameter", _wrap_ElementarySurface_vreversedParameter);
SWIGV8_AddMemberFunction(_exports_ElementarySurface_class, "continuity", _wrap_ElementarySurface_continuity);
SWIGV8_AddMemberFunction(_exports_ElementarySurface_class, "isCnu", _wrap_ElementarySurface_isCnu);
SWIGV8_AddMemberFunction(_exports_ElementarySurface_class, "isCnv", _wrap_ElementarySurface_isCnv);
SWIGV8_AddMemberFunction(_exports_ElementarySurface_class, "dynamicType", _wrap_ElementarySurface_dynamicType);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "setRadius", _wrap_SphericalSurface_setRadius);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "setSphere", _wrap_SphericalSurface_setSphere);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "sphere", _wrap_SphericalSurface_sphere);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "ureversedParameter", _wrap_SphericalSurface_ureversedParameter);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "vreversedParameter", _wrap_SphericalSurface_vreversedParameter);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "area", _wrap_SphericalSurface_area);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "bounds", _wrap_SphericalSurface_bounds);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "coefficients", _wrap_SphericalSurface_coefficients);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "radius", _wrap_SphericalSurface_radius);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "volume", _wrap_SphericalSurface_volume);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "isUclosed", _wrap_SphericalSurface_isUclosed);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "isVclosed", _wrap_SphericalSurface_isVclosed);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "isUperiodic", _wrap_SphericalSurface_isUperiodic);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "isVperiodic", _wrap_SphericalSurface_isVperiodic);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "uiso", _wrap_SphericalSurface_uiso);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "viso", _wrap_SphericalSurface_viso);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "d0", _wrap_SphericalSurface_d0);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "d1", _wrap_SphericalSurface_d1);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "d2", _wrap_SphericalSurface_d2);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "d3", _wrap_SphericalSurface_d3);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "dn", _wrap_SphericalSurface_dn);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "transform", _wrap_SphericalSurface_transform);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "copy", _wrap_SphericalSurface_copy);
SWIGV8_AddMemberFunction(_exports_SphericalSurface_class, "dynamicType", _wrap_SphericalSurface_dynamicType);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "setCylinder", _wrap_CylindricalSurface_setCylinder);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "setRadius", _wrap_CylindricalSurface_setRadius);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "cylinder", _wrap_CylindricalSurface_cylinder);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "ureversedParameter", _wrap_CylindricalSurface_ureversedParameter);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "vreversedParameter", _wrap_CylindricalSurface_vreversedParameter);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "transformParameters", _wrap_CylindricalSurface_transformParameters);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "parametricTransformation", _wrap_CylindricalSurface_parametricTransformation);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "bounds", _wrap_CylindricalSurface_bounds);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "coefficients", _wrap_CylindricalSurface_coefficients);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "radius", _wrap_CylindricalSurface_radius);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "isUclosed", _wrap_CylindricalSurface_isUclosed);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "isVclosed", _wrap_CylindricalSurface_isVclosed);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "isUperiodic", _wrap_CylindricalSurface_isUperiodic);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "isVperiodic", _wrap_CylindricalSurface_isVperiodic);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "uiso", _wrap_CylindricalSurface_uiso);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "viso", _wrap_CylindricalSurface_viso);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "d0", _wrap_CylindricalSurface_d0);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "d1", _wrap_CylindricalSurface_d1);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "d2", _wrap_CylindricalSurface_d2);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "d3", _wrap_CylindricalSurface_d3);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "dn", _wrap_CylindricalSurface_dn);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "transform", _wrap_CylindricalSurface_transform);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "copy", _wrap_CylindricalSurface_copy);
SWIGV8_AddMemberFunction(_exports_CylindricalSurface_class, "dynamicType", _wrap_CylindricalSurface_dynamicType);
SWIGV8_AddMemberFunction(_exports_AxisPlacement_class, "setAxis", _wrap_AxisPlacement_setAxis);
SWIGV8_AddMemberFunction(_exports_AxisPlacement_class, "setDirection", _wrap_AxisPlacement_setDirection);
SWIGV8_AddMemberFunction(_exports_AxisPlacement_class, "setLocation", _wrap_AxisPlacement_setLocation);
SWIGV8_AddMemberFunction(_exports_AxisPlacement_class, "angle", _wrap_AxisPlacement_angle);
SWIGV8_AddMemberFunction(_exports_AxisPlacement_class, "axis", _wrap_AxisPlacement_axis);
SWIGV8_AddMemberFunction(_exports_AxisPlacement_class, "direction", _wrap_AxisPlacement_direction);
SWIGV8_AddMemberFunction(_exports_AxisPlacement_class, "location", _wrap_AxisPlacement_location);
SWIGV8_AddMemberFunction(_exports_AxisPlacement_class, "dynamicType", _wrap_AxisPlacement_dynamicType);
SWIGV8_AddMemberFunction(_exports_Axis1Placement_class, "ax1", _wrap_Axis1Placement_ax1);
SWIGV8_AddMemberFunction(_exports_Axis1Placement_class, "reverse", _wrap_Axis1Placement_reverse);
SWIGV8_AddMemberFunction(_exports_Axis1Placement_class, "reversed", _wrap_Axis1Placement_reversed);
SWIGV8_AddMemberFunction(_exports_Axis1Placement_class, "setDirection", _wrap_Axis1Placement_setDirection);
SWIGV8_AddMemberFunction(_exports_Axis1Placement_class, "transform", _wrap_Axis1Placement_transform);
SWIGV8_AddMemberFunction(_exports_Axis1Placement_class, "copy", _wrap_Axis1Placement_copy);
SWIGV8_AddMemberFunction(_exports_Axis1Placement_class, "dynamicType", _wrap_Axis1Placement_dynamicType);
SWIGV8_AddMemberFunction(_exports_Curve_class, "reverse", _wrap_Curve_reverse);
SWIGV8_AddMemberFunction(_exports_Curve_class, "reversedParameter", _wrap_Curve_reversedParameter);
SWIGV8_AddMemberFunction(_exports_Curve_class, "transformedParameter", _wrap_Curve_transformedParameter);
SWIGV8_AddMemberFunction(_exports_Curve_class, "parametricTransformation", _wrap_Curve_parametricTransformation);
SWIGV8_AddMemberFunction(_exports_Curve_class, "reversed", _wrap_Curve_reversed);
SWIGV8_AddMemberFunction(_exports_Curve_class, "firstParameter", _wrap_Curve_firstParameter);
SWIGV8_AddMemberFunction(_exports_Curve_class, "lastParameter", _wrap_Curve_lastParameter);
SWIGV8_AddMemberFunction(_exports_Curve_class, "isClosed", _wrap_Curve_isClosed);
SWIGV8_AddMemberFunction(_exports_Curve_class, "isPeriodic", _wrap_Curve_isPeriodic);
SWIGV8_AddMemberFunction(_exports_Curve_class, "period", _wrap_Curve_period);
SWIGV8_AddMemberFunction(_exports_Curve_class, "continuity", _wrap_Curve_continuity);
SWIGV8_AddMemberFunction(_exports_Curve_class, "isCn", _wrap_Curve_isCn);
SWIGV8_AddMemberFunction(_exports_Curve_class, "d0", _wrap_Curve_d0);
SWIGV8_AddMemberFunction(_exports_Curve_class, "d1", _wrap_Curve_d1);
SWIGV8_AddMemberFunction(_exports_Curve_class, "d2", _wrap_Curve_d2);
SWIGV8_AddMemberFunction(_exports_Curve_class, "d3", _wrap_Curve_d3);
SWIGV8_AddMemberFunction(_exports_Curve_class, "dn", _wrap_Curve_dn);
SWIGV8_AddMemberFunction(_exports_Curve_class, "value", _wrap_Curve_value);
SWIGV8_AddMemberFunction(_exports_Curve_class, "dynamicType", _wrap_Curve_dynamicType);
SWIGV8_AddMemberFunction(_exports_Conic_class, "setAxis", _wrap_Conic_setAxis);
SWIGV8_AddMemberFunction(_exports_Conic_class, "setLocation", _wrap_Conic_setLocation);
SWIGV8_AddMemberFunction(_exports_Conic_class, "setPosition", _wrap_Conic_setPosition);
SWIGV8_AddMemberFunction(_exports_Conic_class, "axis", _wrap_Conic_axis);
SWIGV8_AddMemberFunction(_exports_Conic_class, "eccentricity", _wrap_Conic_eccentricity);
SWIGV8_AddMemberFunction(_exports_Conic_class, "location", _wrap_Conic_location);
SWIGV8_AddMemberFunction(_exports_Conic_class, "position", _wrap_Conic_position);
SWIGV8_AddMemberFunction(_exports_Conic_class, "xaxis", _wrap_Conic_xaxis);
SWIGV8_AddMemberFunction(_exports_Conic_class, "yaxis", _wrap_Conic_yaxis);
SWIGV8_AddMemberFunction(_exports_Conic_class, "reverse", _wrap_Conic_reverse);
SWIGV8_AddMemberFunction(_exports_Conic_class, "reversedParameter", _wrap_Conic_reversedParameter);
SWIGV8_AddMemberFunction(_exports_Conic_class, "continuity", _wrap_Conic_continuity);
SWIGV8_AddMemberFunction(_exports_Conic_class, "isCn", _wrap_Conic_isCn);
SWIGV8_AddMemberFunction(_exports_Conic_class, "dynamicType", _wrap_Conic_dynamicType);
SWIGV8_AddMemberFunction(_exports_BoundedCurve_class, "endPoint", _wrap_BoundedCurve_endPoint);
SWIGV8_AddMemberFunction(_exports_BoundedCurve_class, "startPoint", _wrap_BoundedCurve_startPoint);
SWIGV8_AddMemberFunction(_exports_BoundedCurve_class, "dynamicType", _wrap_BoundedCurve_dynamicType);
SWIGV8_AddMemberFunction(_exports_Circle_class, "setCirc", _wrap_Circle_setCirc);
SWIGV8_AddMemberFunction(_exports_Circle_class, "setRadius", _wrap_Circle_setRadius);
SWIGV8_AddMemberFunction(_exports_Circle_class, "circ", _wrap_Circle_circ);
SWIGV8_AddMemberFunction(_exports_Circle_class, "radius", _wrap_Circle_radius);
SWIGV8_AddMemberFunction(_exports_Circle_class, "reversedParameter", _wrap_Circle_reversedParameter);
SWIGV8_AddMemberFunction(_exports_Circle_class, "eccentricity", _wrap_Circle_eccentricity);
SWIGV8_AddMemberFunction(_exports_Circle_class, "firstParameter", _wrap_Circle_firstParameter);
SWIGV8_AddMemberFunction(_exports_Circle_class, "lastParameter", _wrap_Circle_lastParameter);
SWIGV8_AddMemberFunction(_exports_Circle_class, "isClosed", _wrap_Circle_isClosed);
SWIGV8_AddMemberFunction(_exports_Circle_class, "isPeriodic", _wrap_Circle_isPeriodic);
SWIGV8_AddMemberFunction(_exports_Circle_class, "d0", _wrap_Circle_d0);
SWIGV8_AddMemberFunction(_exports_Circle_class, "d1", _wrap_Circle_d1);
SWIGV8_AddMemberFunction(_exports_Circle_class, "d2", _wrap_Circle_d2);
SWIGV8_AddMemberFunction(_exports_Circle_class, "d3", _wrap_Circle_d3);
SWIGV8_AddMemberFunction(_exports_Circle_class, "dn", _wrap_Circle_dn);
SWIGV8_AddMemberFunction(_exports_Circle_class, "transform", _wrap_Circle_transform);
SWIGV8_AddMemberFunction(_exports_Circle_class, "copy", _wrap_Circle_copy);
SWIGV8_AddMemberFunction(_exports_Circle_class, "dynamicType", _wrap_Circle_dynamicType);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "reverse", _wrap_TrimmedCurve_reverse);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "reversedParameter", _wrap_TrimmedCurve_reversedParameter);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "setTrim", _wrap_TrimmedCurve_setTrim);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "basisCurve", _wrap_TrimmedCurve_basisCurve);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "continuity", _wrap_TrimmedCurve_continuity);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "isCn", _wrap_TrimmedCurve_isCn);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "endPoint", _wrap_TrimmedCurve_endPoint);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "firstParameter", _wrap_TrimmedCurve_firstParameter);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "isClosed", _wrap_TrimmedCurve_isClosed);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "isPeriodic", _wrap_TrimmedCurve_isPeriodic);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "period", _wrap_TrimmedCurve_period);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "lastParameter", _wrap_TrimmedCurve_lastParameter);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "startPoint", _wrap_TrimmedCurve_startPoint);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "d0", _wrap_TrimmedCurve_d0);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "d1", _wrap_TrimmedCurve_d1);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "d2", _wrap_TrimmedCurve_d2);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "d3", _wrap_TrimmedCurve_d3);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "dn", _wrap_TrimmedCurve_dn);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "transform", _wrap_TrimmedCurve_transform);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "transformedParameter", _wrap_TrimmedCurve_transformedParameter);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "parametricTransformation", _wrap_TrimmedCurve_parametricTransformation);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "copy", _wrap_TrimmedCurve_copy);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "dynamicType", _wrap_TrimmedCurve_dynamicType);


  /* setup inheritances */
  if (SWIGTYPE_p_Standard_Transient->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Standard_Transient->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_MMgt_TShared_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Standard_Transient->clientdata)->class_templ);
#else
  _exports_MMgt_TShared_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Standard_Transient->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_MMgt_TShared _Standard_Transient\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_MMgt_TShared _Standard_Transient\n");
#endif
}
if (SWIGTYPE_p_Handle_Standard_Transient->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Standard_Transient->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_MMgt_TShared_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Standard_Transient->clientdata)->class_templ);
#else
  _exports_Handle_MMgt_TShared_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Standard_Transient->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_MMgt_TShared _Handle_Standard_Transient\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_MMgt_TShared _Handle_Standard_Transient\n");
#endif
}
if (SWIGTYPE_p_MMgt_TShared->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_MMgt_TShared->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Geometry_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_MMgt_TShared->clientdata)->class_templ);
#else
  _exports_Geometry_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_MMgt_TShared->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Geometry _MMgt_TShared\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Geometry _MMgt_TShared\n");
#endif
}
if (SWIGTYPE_p_Geom_Geometry->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Geometry->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Surface_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Geometry->clientdata)->class_templ);
#else
  _exports_Surface_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Geometry->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Surface _Geom_Geometry\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Surface _Geom_Geometry\n");
#endif
}
if (SWIGTYPE_p_Geom_Surface->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Surface->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_ElementarySurface_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Surface->clientdata)->class_templ);
#else
  _exports_ElementarySurface_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Surface->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_ElementarySurface _Geom_Surface\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_ElementarySurface _Geom_Surface\n");
#endif
}
if (SWIGTYPE_p_Geom_ElementarySurface->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_ElementarySurface->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_SphericalSurface_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_ElementarySurface->clientdata)->class_templ);
#else
  _exports_SphericalSurface_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_ElementarySurface->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_SphericalSurface _Geom_ElementarySurface\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_SphericalSurface _Geom_ElementarySurface\n");
#endif
}
if (SWIGTYPE_p_Geom_ElementarySurface->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_ElementarySurface->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_CylindricalSurface_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_ElementarySurface->clientdata)->class_templ);
#else
  _exports_CylindricalSurface_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_ElementarySurface->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_CylindricalSurface _Geom_ElementarySurface\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_CylindricalSurface _Geom_ElementarySurface\n");
#endif
}
if (SWIGTYPE_p_Geom_Geometry->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Geometry->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_AxisPlacement_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Geometry->clientdata)->class_templ);
#else
  _exports_AxisPlacement_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Geometry->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_AxisPlacement _Geom_Geometry\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_AxisPlacement _Geom_Geometry\n");
#endif
}
if (SWIGTYPE_p_Geom_AxisPlacement->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_AxisPlacement->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Axis1Placement_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_AxisPlacement->clientdata)->class_templ);
#else
  _exports_Axis1Placement_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_AxisPlacement->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Axis1Placement _Geom_AxisPlacement\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Axis1Placement _Geom_AxisPlacement\n");
#endif
}
if (SWIGTYPE_p_Geom_Geometry->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Geometry->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Curve_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Geometry->clientdata)->class_templ);
#else
  _exports_Curve_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Geometry->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Curve _Geom_Geometry\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Curve _Geom_Geometry\n");
#endif
}
if (SWIGTYPE_p_Geom_Curve->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Curve->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Conic_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Curve->clientdata)->class_templ);
#else
  _exports_Conic_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Curve->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Conic _Geom_Curve\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Conic _Geom_Curve\n");
#endif
}
if (SWIGTYPE_p_Geom_Curve->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Curve->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_BoundedCurve_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Curve->clientdata)->class_templ);
#else
  _exports_BoundedCurve_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Curve->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_BoundedCurve _Geom_Curve\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_BoundedCurve _Geom_Curve\n");
#endif
}
if (SWIGTYPE_p_Geom_Conic->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Conic->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Circle_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Conic->clientdata)->class_templ);
#else
  _exports_Circle_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_Conic->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Circle _Geom_Conic\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Circle _Geom_Conic\n");
#endif
}
if (SWIGTYPE_p_Geom_BoundedCurve->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_BoundedCurve->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_TrimmedCurve_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_BoundedCurve->clientdata)->class_templ);
#else
  _exports_TrimmedCurve_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom_BoundedCurve->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_TrimmedCurve _Geom_BoundedCurve\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_TrimmedCurve _Geom_BoundedCurve\n");
#endif
}
if (SWIGTYPE_p_Handle_MMgt_TShared->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_MMgt_TShared->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_Geometry_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_MMgt_TShared->clientdata)->class_templ);
#else
  _exports_Handle_Geometry_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_MMgt_TShared->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_Geometry _Handle_MMgt_TShared\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_Geometry _Handle_MMgt_TShared\n");
#endif
}
if (SWIGTYPE_p_Handle_Geom_Geometry->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Geometry->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_Surface_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Geometry->clientdata)->class_templ);
#else
  _exports_Handle_Surface_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Geometry->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_Surface _Handle_Geom_Geometry\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_Surface _Handle_Geom_Geometry\n");
#endif
}
if (SWIGTYPE_p_Handle_Geom_Surface->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Surface->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_ElementarySurface_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Surface->clientdata)->class_templ);
#else
  _exports_Handle_ElementarySurface_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Surface->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_ElementarySurface _Handle_Geom_Surface\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_ElementarySurface _Handle_Geom_Surface\n");
#endif
}
if (SWIGTYPE_p_Handle_Geom_ElementarySurface->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_ElementarySurface->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_SphericalSurface_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_ElementarySurface->clientdata)->class_templ);
#else
  _exports_Handle_SphericalSurface_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_ElementarySurface->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_SphericalSurface _Handle_Geom_ElementarySurface\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_SphericalSurface _Handle_Geom_ElementarySurface\n");
#endif
}
if (SWIGTYPE_p_Handle_Geom_ElementarySurface->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_ElementarySurface->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_CylindricalSurface_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_ElementarySurface->clientdata)->class_templ);
#else
  _exports_Handle_CylindricalSurface_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_ElementarySurface->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_CylindricalSurface _Handle_Geom_ElementarySurface\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_CylindricalSurface _Handle_Geom_ElementarySurface\n");
#endif
}
if (SWIGTYPE_p_Handle_Geom_Geometry->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Geometry->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_AxisPlacement_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Geometry->clientdata)->class_templ);
#else
  _exports_Handle_AxisPlacement_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Geometry->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_AxisPlacement _Handle_Geom_Geometry\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_AxisPlacement _Handle_Geom_Geometry\n");
#endif
}
if (SWIGTYPE_p_Handle_Geom_AxisPlacement->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_AxisPlacement->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_Axis1Placement_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_AxisPlacement->clientdata)->class_templ);
#else
  _exports_Handle_Axis1Placement_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_AxisPlacement->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_Axis1Placement _Handle_Geom_AxisPlacement\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_Axis1Placement _Handle_Geom_AxisPlacement\n");
#endif
}
if (SWIGTYPE_p_Handle_Geom_Geometry->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Geometry->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_Curve_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Geometry->clientdata)->class_templ);
#else
  _exports_Handle_Curve_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Geometry->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_Curve _Handle_Geom_Geometry\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_Curve _Handle_Geom_Geometry\n");
#endif
}
if (SWIGTYPE_p_Handle_Geom_Curve->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Curve->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_Conic_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Curve->clientdata)->class_templ);
#else
  _exports_Handle_Conic_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Curve->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_Conic _Handle_Geom_Curve\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_Conic _Handle_Geom_Curve\n");
#endif
}
if (SWIGTYPE_p_Handle_Geom_Curve->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Curve->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_BoundedCurve_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Curve->clientdata)->class_templ);
#else
  _exports_Handle_BoundedCurve_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Curve->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_BoundedCurve _Handle_Geom_Curve\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_BoundedCurve _Handle_Geom_Curve\n");
#endif
}
if (SWIGTYPE_p_Handle_Geom_Conic->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Conic->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_Circle_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Conic->clientdata)->class_templ);
#else
  _exports_Handle_Circle_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_Conic->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_Circle _Handle_Geom_Conic\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_Circle _Handle_Geom_Conic\n");
#endif
}
if (SWIGTYPE_p_Handle_Geom_BoundedCurve->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_BoundedCurve->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_TrimmedCurve_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_BoundedCurve->clientdata)->class_templ);
#else
  _exports_Handle_TrimmedCurve_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom_BoundedCurve->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_TrimmedCurve _Handle_Geom_BoundedCurve\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_TrimmedCurve _Handle_Geom_BoundedCurve\n");
#endif
}


  /* class instances */
  /* Class: Standard_Transient (_exports_Standard_Transient) */
v8::Handle<v8::FunctionTemplate> _exports_Standard_Transient_class_0 = SWIGV8_CreateClassTemplate("Standard_Transient");
_exports_Standard_Transient_class_0->SetCallHandler(_wrap_new_Standard_Transient);
_exports_Standard_Transient_class_0->Inherit(_exports_Standard_Transient_class);
_exports_Standard_Transient_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Standard_Transient_obj = _exports_Standard_Transient_class_0->GetFunction();
/* Class: MMgt_TShared (_exports_MMgt_TShared) */
v8::Handle<v8::FunctionTemplate> _exports_MMgt_TShared_class_0 = SWIGV8_CreateClassTemplate("MMgt_TShared");
_exports_MMgt_TShared_class_0->SetCallHandler(_wrap_new_MMgt_TShared);
_exports_MMgt_TShared_class_0->Inherit(_exports_MMgt_TShared_class);
_exports_MMgt_TShared_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_MMgt_TShared_obj = _exports_MMgt_TShared_class_0->GetFunction();
/* Class: Handle_Standard_Transient (_exports_Handle_Standard_Transient) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Standard_Transient_class_0 = SWIGV8_CreateClassTemplate("Handle_Standard_Transient");
_exports_Handle_Standard_Transient_class_0->SetCallHandler(_wrap_new_Handle_Standard_Transient);
_exports_Handle_Standard_Transient_class_0->Inherit(_exports_Handle_Standard_Transient_class);
_exports_Handle_Standard_Transient_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_Standard_Transient_obj = _exports_Handle_Standard_Transient_class_0->GetFunction();
/* Class: Handle_MMgt_TShared (_exports_Handle_MMgt_TShared) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_MMgt_TShared_class_0 = SWIGV8_CreateClassTemplate("Handle_MMgt_TShared");
_exports_Handle_MMgt_TShared_class_0->SetCallHandler(_wrap_new_Handle_MMgt_TShared);
_exports_Handle_MMgt_TShared_class_0->Inherit(_exports_Handle_MMgt_TShared_class);
_exports_Handle_MMgt_TShared_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_MMgt_TShared_obj = _exports_Handle_MMgt_TShared_class_0->GetFunction();
/* Class: Geometry (_exports_Geometry) */
v8::Handle<v8::FunctionTemplate> _exports_Geometry_class_0 = SWIGV8_CreateClassTemplate("Geometry");
_exports_Geometry_class_0->SetCallHandler(_wrap_new_veto_Geometry);
_exports_Geometry_class_0->Inherit(_exports_Geometry_class);
_exports_Geometry_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Geometry_obj = _exports_Geometry_class_0->GetFunction();
/* Class: Surface (_exports_Surface) */
v8::Handle<v8::FunctionTemplate> _exports_Surface_class_0 = SWIGV8_CreateClassTemplate("Surface");
_exports_Surface_class_0->SetCallHandler(_wrap_new_veto_Surface);
_exports_Surface_class_0->Inherit(_exports_Surface_class);
_exports_Surface_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Surface_obj = _exports_Surface_class_0->GetFunction();
/* Class: ElementarySurface (_exports_ElementarySurface) */
v8::Handle<v8::FunctionTemplate> _exports_ElementarySurface_class_0 = SWIGV8_CreateClassTemplate("ElementarySurface");
_exports_ElementarySurface_class_0->SetCallHandler(_wrap_new_veto_ElementarySurface);
_exports_ElementarySurface_class_0->Inherit(_exports_ElementarySurface_class);
_exports_ElementarySurface_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ElementarySurface_obj = _exports_ElementarySurface_class_0->GetFunction();
/* Class: SphericalSurface (_exports_SphericalSurface) */
v8::Handle<v8::FunctionTemplate> _exports_SphericalSurface_class_0 = SWIGV8_CreateClassTemplate("SphericalSurface");
_exports_SphericalSurface_class_0->SetCallHandler(_wrap_new_SphericalSurface);
_exports_SphericalSurface_class_0->Inherit(_exports_SphericalSurface_class);
_exports_SphericalSurface_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_SphericalSurface_obj = _exports_SphericalSurface_class_0->GetFunction();
/* Class: CylindricalSurface (_exports_CylindricalSurface) */
v8::Handle<v8::FunctionTemplate> _exports_CylindricalSurface_class_0 = SWIGV8_CreateClassTemplate("CylindricalSurface");
_exports_CylindricalSurface_class_0->SetCallHandler(_wrap_new_CylindricalSurface);
_exports_CylindricalSurface_class_0->Inherit(_exports_CylindricalSurface_class);
_exports_CylindricalSurface_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_CylindricalSurface_obj = _exports_CylindricalSurface_class_0->GetFunction();
/* Class: AxisPlacement (_exports_AxisPlacement) */
v8::Handle<v8::FunctionTemplate> _exports_AxisPlacement_class_0 = SWIGV8_CreateClassTemplate("AxisPlacement");
_exports_AxisPlacement_class_0->SetCallHandler(_wrap_new_veto_AxisPlacement);
_exports_AxisPlacement_class_0->Inherit(_exports_AxisPlacement_class);
_exports_AxisPlacement_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_AxisPlacement_obj = _exports_AxisPlacement_class_0->GetFunction();
/* Class: Axis1Placement (_exports_Axis1Placement) */
v8::Handle<v8::FunctionTemplate> _exports_Axis1Placement_class_0 = SWIGV8_CreateClassTemplate("Axis1Placement");
_exports_Axis1Placement_class_0->SetCallHandler(_wrap_new_Axis1Placement);
_exports_Axis1Placement_class_0->Inherit(_exports_Axis1Placement_class);
_exports_Axis1Placement_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Axis1Placement_obj = _exports_Axis1Placement_class_0->GetFunction();
/* Class: Curve (_exports_Curve) */
v8::Handle<v8::FunctionTemplate> _exports_Curve_class_0 = SWIGV8_CreateClassTemplate("Curve");
_exports_Curve_class_0->SetCallHandler(_wrap_new_veto_Curve);
_exports_Curve_class_0->Inherit(_exports_Curve_class);
_exports_Curve_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Curve_obj = _exports_Curve_class_0->GetFunction();
/* Class: Conic (_exports_Conic) */
v8::Handle<v8::FunctionTemplate> _exports_Conic_class_0 = SWIGV8_CreateClassTemplate("Conic");
_exports_Conic_class_0->SetCallHandler(_wrap_new_veto_Conic);
_exports_Conic_class_0->Inherit(_exports_Conic_class);
_exports_Conic_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Conic_obj = _exports_Conic_class_0->GetFunction();
/* Class: BoundedCurve (_exports_BoundedCurve) */
v8::Handle<v8::FunctionTemplate> _exports_BoundedCurve_class_0 = SWIGV8_CreateClassTemplate("BoundedCurve");
_exports_BoundedCurve_class_0->SetCallHandler(_wrap_new_veto_BoundedCurve);
_exports_BoundedCurve_class_0->Inherit(_exports_BoundedCurve_class);
_exports_BoundedCurve_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_BoundedCurve_obj = _exports_BoundedCurve_class_0->GetFunction();
/* Class: Circle (_exports_Circle) */
v8::Handle<v8::FunctionTemplate> _exports_Circle_class_0 = SWIGV8_CreateClassTemplate("Circle");
_exports_Circle_class_0->SetCallHandler(_wrap_new_Circle);
_exports_Circle_class_0->Inherit(_exports_Circle_class);
_exports_Circle_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Circle_obj = _exports_Circle_class_0->GetFunction();
/* Class: TrimmedCurve (_exports_TrimmedCurve) */
v8::Handle<v8::FunctionTemplate> _exports_TrimmedCurve_class_0 = SWIGV8_CreateClassTemplate("TrimmedCurve");
_exports_TrimmedCurve_class_0->SetCallHandler(_wrap_new_TrimmedCurve);
_exports_TrimmedCurve_class_0->Inherit(_exports_TrimmedCurve_class);
_exports_TrimmedCurve_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TrimmedCurve_obj = _exports_TrimmedCurve_class_0->GetFunction();
/* Class: Handle_Geometry (_exports_Handle_Geometry) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Geometry_class_0 = SWIGV8_CreateClassTemplate("Handle_Geometry");
_exports_Handle_Geometry_class_0->SetCallHandler(_wrap_new_Handle_Geometry);
_exports_Handle_Geometry_class_0->Inherit(_exports_Handle_Geometry_class);
_exports_Handle_Geometry_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_Geometry_obj = _exports_Handle_Geometry_class_0->GetFunction();
/* Class: Handle_Surface (_exports_Handle_Surface) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Surface_class_0 = SWIGV8_CreateClassTemplate("Handle_Surface");
_exports_Handle_Surface_class_0->SetCallHandler(_wrap_new_Handle_Surface);
_exports_Handle_Surface_class_0->Inherit(_exports_Handle_Surface_class);
_exports_Handle_Surface_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_Surface_obj = _exports_Handle_Surface_class_0->GetFunction();
/* Class: Handle_ElementarySurface (_exports_Handle_ElementarySurface) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_ElementarySurface_class_0 = SWIGV8_CreateClassTemplate("Handle_ElementarySurface");
_exports_Handle_ElementarySurface_class_0->SetCallHandler(_wrap_new_Handle_ElementarySurface);
_exports_Handle_ElementarySurface_class_0->Inherit(_exports_Handle_ElementarySurface_class);
_exports_Handle_ElementarySurface_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_ElementarySurface_obj = _exports_Handle_ElementarySurface_class_0->GetFunction();
/* Class: Handle_SphericalSurface (_exports_Handle_SphericalSurface) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_SphericalSurface_class_0 = SWIGV8_CreateClassTemplate("Handle_SphericalSurface");
_exports_Handle_SphericalSurface_class_0->SetCallHandler(_wrap_new_Handle_SphericalSurface);
_exports_Handle_SphericalSurface_class_0->Inherit(_exports_Handle_SphericalSurface_class);
_exports_Handle_SphericalSurface_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_SphericalSurface_obj = _exports_Handle_SphericalSurface_class_0->GetFunction();
/* Class: Handle_CylindricalSurface (_exports_Handle_CylindricalSurface) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_CylindricalSurface_class_0 = SWIGV8_CreateClassTemplate("Handle_CylindricalSurface");
_exports_Handle_CylindricalSurface_class_0->SetCallHandler(_wrap_new_Handle_CylindricalSurface);
_exports_Handle_CylindricalSurface_class_0->Inherit(_exports_Handle_CylindricalSurface_class);
_exports_Handle_CylindricalSurface_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_CylindricalSurface_obj = _exports_Handle_CylindricalSurface_class_0->GetFunction();
/* Class: Handle_AxisPlacement (_exports_Handle_AxisPlacement) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_AxisPlacement_class_0 = SWIGV8_CreateClassTemplate("Handle_AxisPlacement");
_exports_Handle_AxisPlacement_class_0->SetCallHandler(_wrap_new_Handle_AxisPlacement);
_exports_Handle_AxisPlacement_class_0->Inherit(_exports_Handle_AxisPlacement_class);
_exports_Handle_AxisPlacement_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_AxisPlacement_obj = _exports_Handle_AxisPlacement_class_0->GetFunction();
/* Class: Handle_Axis1Placement (_exports_Handle_Axis1Placement) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Axis1Placement_class_0 = SWIGV8_CreateClassTemplate("Handle_Axis1Placement");
_exports_Handle_Axis1Placement_class_0->SetCallHandler(_wrap_new_Handle_Axis1Placement);
_exports_Handle_Axis1Placement_class_0->Inherit(_exports_Handle_Axis1Placement_class);
_exports_Handle_Axis1Placement_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_Axis1Placement_obj = _exports_Handle_Axis1Placement_class_0->GetFunction();
/* Class: Handle_Curve (_exports_Handle_Curve) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Curve_class_0 = SWIGV8_CreateClassTemplate("Handle_Curve");
_exports_Handle_Curve_class_0->SetCallHandler(_wrap_new_Handle_Curve);
_exports_Handle_Curve_class_0->Inherit(_exports_Handle_Curve_class);
_exports_Handle_Curve_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_Curve_obj = _exports_Handle_Curve_class_0->GetFunction();
/* Class: Handle_Conic (_exports_Handle_Conic) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Conic_class_0 = SWIGV8_CreateClassTemplate("Handle_Conic");
_exports_Handle_Conic_class_0->SetCallHandler(_wrap_new_Handle_Conic);
_exports_Handle_Conic_class_0->Inherit(_exports_Handle_Conic_class);
_exports_Handle_Conic_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_Conic_obj = _exports_Handle_Conic_class_0->GetFunction();
/* Class: Handle_BoundedCurve (_exports_Handle_BoundedCurve) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_BoundedCurve_class_0 = SWIGV8_CreateClassTemplate("Handle_BoundedCurve");
_exports_Handle_BoundedCurve_class_0->SetCallHandler(_wrap_new_Handle_BoundedCurve);
_exports_Handle_BoundedCurve_class_0->Inherit(_exports_Handle_BoundedCurve_class);
_exports_Handle_BoundedCurve_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_BoundedCurve_obj = _exports_Handle_BoundedCurve_class_0->GetFunction();
/* Class: Handle_Circle (_exports_Handle_Circle) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Circle_class_0 = SWIGV8_CreateClassTemplate("Handle_Circle");
_exports_Handle_Circle_class_0->SetCallHandler(_wrap_new_Handle_Circle);
_exports_Handle_Circle_class_0->Inherit(_exports_Handle_Circle_class);
_exports_Handle_Circle_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_Circle_obj = _exports_Handle_Circle_class_0->GetFunction();
/* Class: Handle_TrimmedCurve (_exports_Handle_TrimmedCurve) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_TrimmedCurve_class_0 = SWIGV8_CreateClassTemplate("Handle_TrimmedCurve");
_exports_Handle_TrimmedCurve_class_0->SetCallHandler(_wrap_new_Handle_TrimmedCurve);
_exports_Handle_TrimmedCurve_class_0->Inherit(_exports_Handle_TrimmedCurve_class);
_exports_Handle_TrimmedCurve_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_TrimmedCurve_obj = _exports_Handle_TrimmedCurve_class_0->GetFunction();


  /* add static class functions and variables */
  SWIGV8_AddStaticFunction(_exports_Circle_obj, "makeCircle", _wrap_Circle__wrap_Circle_makeCircle);


  /* register classes */
  exports_obj->Set(SWIGV8_SYMBOL_NEW("Standard_Transient"), _exports_Standard_Transient_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("MMgt_TShared"), _exports_MMgt_TShared_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_Standard_Transient"), _exports_Handle_Standard_Transient_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_MMgt_TShared"), _exports_Handle_MMgt_TShared_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Geometry"), _exports_Geometry_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Surface"), _exports_Surface_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("ElementarySurface"), _exports_ElementarySurface_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("SphericalSurface"), _exports_SphericalSurface_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("CylindricalSurface"), _exports_CylindricalSurface_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("AxisPlacement"), _exports_AxisPlacement_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Axis1Placement"), _exports_Axis1Placement_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Curve"), _exports_Curve_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Conic"), _exports_Conic_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("BoundedCurve"), _exports_BoundedCurve_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Circle"), _exports_Circle_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TrimmedCurve"), _exports_TrimmedCurve_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_Geometry"), _exports_Handle_Geometry_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_Surface"), _exports_Handle_Surface_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_ElementarySurface"), _exports_Handle_ElementarySurface_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_SphericalSurface"), _exports_Handle_SphericalSurface_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_CylindricalSurface"), _exports_Handle_CylindricalSurface_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_AxisPlacement"), _exports_Handle_AxisPlacement_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_Axis1Placement"), _exports_Handle_Axis1Placement_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_Curve"), _exports_Handle_Curve_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_Conic"), _exports_Handle_Conic_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_BoundedCurve"), _exports_Handle_BoundedCurve_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_Circle"), _exports_Handle_Circle_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_TrimmedCurve"), _exports_Handle_TrimmedCurve_obj);


  /* create and register namespace objects */
  
}

#if defined(BUILDING_NODE_EXTENSION)
NODE_MODULE(gp, gp_initialize)
#endif
