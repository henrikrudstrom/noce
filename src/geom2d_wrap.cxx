/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifndef SWIG_V8_VERSION
#define SWIG_V8_VERSION 0x031110
#endif


#include <node.h>


#include <v8.h>

#include <errno.h>
#include <limits.h>
#include <stdlib.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* ---------------------------------------------------------------------------
 * These typedefs and defines are used to deal with v8 API changes
 *
 * ---------------------------------------------------------------------------*/

// First v8 version that uses "SetWeak" and not "MakeWeak"

#define SWIGV8_SETWEAK_VERSION 0x032224

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031803)
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::New(cstr, len)
#else
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), cstr, v8::String::kNormalString, len)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::Handle<v8::Value> SwigV8ReturnValue;
typedef v8::Arguments SwigV8Arguments;
typedef v8::AccessorInfo SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) return scope.Close(val)
#define SWIGV8_RETURN_INFO(val, info) return scope.Close(val)
#else
typedef void SwigV8ReturnValue;
typedef v8::FunctionCallbackInfo<v8::Value> SwigV8Arguments;
typedef v8::PropertyCallbackInfo<v8::Value> SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) args.GetReturnValue().Set(val); return
#define SWIGV8_RETURN_INFO(val, info) info.GetReturnValue().Set(val); return
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032117)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#else
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::EscapableHandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Escape(val)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_ADJUST_MEMORY(size) v8::V8::AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Context::GetCurrent()
#define SWIGV8_THROW_EXCEPTION(err) v8::ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::New(str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewSymbol(sym)
#else
#define SWIGV8_ADJUST_MEMORY(size) v8::Isolate::GetCurrent()->AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Isolate::GetCurrent()->GetCurrentContext()
#define SWIGV8_THROW_EXCEPTION(err) v8::Isolate::GetCurrent()->ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), sym)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032318)
#define SWIGV8_ARRAY_NEW() v8::Array::New()
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New()
#define SWIGV8_INT32_NEW(num) v8::Int32::New(num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(num)
#define SWIGV8_OBJECT_NEW() v8::Object::New()
#define SWIGV8_UNDEFINED() v8::Undefined()
#define SWIGV8_NULL() v8::Null()
#else
#define SWIGV8_ARRAY_NEW() v8::Array::New(v8::Isolate::GetCurrent())
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(v8::Isolate::GetCurrent(), bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(v8::Isolate::GetCurrent(), val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(v8::Isolate::GetCurrent(), func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New(v8::Isolate::GetCurrent())
#define SWIGV8_INT32_NEW(num) v8::Int32::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(v8::Isolate::GetCurrent(), num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_OBJECT_NEW() v8::Object::New(v8::Isolate::GetCurrent())
#define SWIGV8_UNDEFINED() v8::Undefined(v8::Isolate::GetCurrent())
#define SWIGV8_NULL() v8::Null(v8::Isolate::GetCurrent())
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(class);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(v8::Isolate::GetCurrent(), class);
#else
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ.Reset(v8::Isolate::GetCurrent(), class);
#endif

/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

#define SWIG_Error(code, msg)     SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_exception(code, msg) SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_fail                 goto fail
#define SWIGV8_OVERLOAD false

SWIGINTERN void SWIG_V8_Raise(const char *msg) {
  SWIGV8_THROW_EXCEPTION(v8::Exception::Error(SWIGV8_STRING_NEW(msg)));
}

/*
  Note: There are two contexts for handling errors.
  A static V8ErrorHandler is used in not overloaded methods.
  For overloaded methods the throwing type checking mechanism is used
  during dispatching. As V8 exceptions can not be resetted properly
  the trick is to use a dynamic ErrorHandler with same local name as the global
  one.

  - See defintion of SWIG_Error above.
  - See code templates 'JS_function_dispatcher', 'JS_functionwrapper_overload',
    and 'JS_function_dispatch_case' in javascriptcode.swg

*/
class V8ErrorHandler {
public:
  virtual ~V8ErrorHandler() {}
  virtual void error(int code, const char *msg) {
    SWIG_V8_Raise(msg);
  }
};
// this is used in usually
SWIGRUNTIME V8ErrorHandler SWIGV8_ErrorHandler;

// instances of this are used in overloaded functions
class OverloadErrorHandler: public V8ErrorHandler {
public:
  virtual void error(int code, const char *msg) {
    err = v8::Exception::Error(SWIGV8_STRING_NEW(msg));
    if(code != SWIG_TypeError) {
        SWIGV8_THROW_EXCEPTION(err);
    }
  }
  v8::Handle<v8::Value> err;
};

/* ---------------------------------------------------------------------------
 * Basic Proxy object
 *
 * ---------------------------------------------------------------------------*/

// Note: to trigger the v8 gc more often one can tell v8 about the memory consumption
// TODO: we could add a v8 specific parameter to control this value
#define SWIGV8_AVG_OBJ_SIZE 1000

class SWIGV8_Proxy {
public:
  SWIGV8_Proxy(): swigCMemOwn(false), swigCObject(0), info(0) {
    SWIGV8_ADJUST_MEMORY(SWIGV8_AVG_OBJ_SIZE);
  };

  ~SWIGV8_Proxy() {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
    handle.ClearWeak();
    handle.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
    handle.ClearWeak(v8::Isolate::GetCurrent());
    handle.Dispose(v8::Isolate::GetCurrent());
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.ClearWeak();
    handle.Dispose();
#else    
    handle.ClearWeak();
    handle.Reset();
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.Clear();
#endif

    SWIGV8_ADJUST_MEMORY(-SWIGV8_AVG_OBJ_SIZE);
  }

  bool swigCMemOwn;
  void *swigCObject;
  swig_type_info *info;
  v8::Persistent<v8::Object> handle;
};

class SWIGV8_ClientData {
public:
  v8::Persistent<v8::FunctionTemplate> class_templ;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  void (*dtor) (v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy);
#else
  void (*dtor) (const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data);
#endif
};

SWIGRUNTIME v8::Persistent<v8::FunctionTemplate> SWIGV8_SWIGTYPE_Proxy_class_templ;

SWIGRUNTIME int SWIG_V8_ConvertInstancePtr(v8::Handle<v8::Object> objRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }
  if(cdata->info != info) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(cdata->info, info);
    if (!tc && cdata->info->name) {
      tc = SWIG_TypeCheck(cdata->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
  }
  *ptr = cdata->swigCObject;
  if(flags & SWIG_POINTER_DISOWN) {
    cdata->swigCMemOwn = false;
  }
  return SWIG_OK;
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy) {
#else
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
  SWIGV8_Proxy *proxy = data.GetParameter();
#endif

  delete proxy;
}

SWIGRUNTIME int SWIG_V8_GetInstancePtr(v8::Handle<v8::Value> valRef, void **ptr) {
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }

  *ptr = cdata->swigCObject;

  return SWIG_OK;
}

SWIGRUNTIME void SWIGV8_SetPrivateData(v8::Handle<v8::Object> obj, void *ptr, swig_type_info *info, int flags) {
  SWIGV8_Proxy *cdata = new SWIGV8_Proxy();
  cdata->swigCObject = ptr;
  cdata->swigCMemOwn = (flags & SWIG_POINTER_OWN) ? 1 : 0;
  cdata->info = info;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  // clientdata must be set for owned data as we need to register the dtor
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#else
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.SetWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

}

SWIGRUNTIME int SWIG_V8_ConvertPtr(v8::Handle<v8::Value> valRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();
  
  /* special case: JavaScript null => C NULL pointer */
  if(valRef->IsNull()) {
    *ptr=0;
    return SWIG_OK;
  }
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  return SWIG_V8_ConvertInstancePtr(objRef, ptr, info, flags);
}

SWIGRUNTIME v8::Handle<v8::Value> SWIG_V8_NewPointerObj(void *ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE_ESC();
  
  v8::Handle<v8::FunctionTemplate> class_templ;

  if (ptr == NULL) {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    SWIGV8_ESCAPE(SWIGV8_NULL());
#else    
    v8::Local<v8::Primitive> result = SWIGV8_NULL();
    SWIGV8_ESCAPE(result);
#endif
  }

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  if(info->clientdata != 0) {
    class_templ = ((SWIGV8_ClientData*) info->clientdata)->class_templ;
  } else {
    class_templ = SWIGV8_SWIGTYPE_Proxy_class_templ;
  }
#else
  v8::Isolate *isolate = v8::Isolate::GetCurrent();

  if(info->clientdata != 0) {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, ((SWIGV8_ClientData*) info->clientdata)->class_templ);
  } else {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, SWIGV8_SWIGTYPE_Proxy_class_templ);
  }
#endif

//  v8::Handle<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  v8::Local<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  SWIGV8_SetPrivateData(result, ptr, info, flags);

  SWIGV8_ESCAPE(result);
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)    SWIG_V8_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)      SWIG_V8_NewPointerObj(ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_V8_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_V8_NewPointerObj(thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_V8_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_V8_NewPointerObj(ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)    SWIG_V8_GetInstancePtr(obj, ptr)

SWIGRUNTIME SwigV8ReturnValue _SWIGV8_wrap_equals(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(args[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult =  SWIGV8_BOOLEAN_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

SWIGRUNTIME SwigV8ReturnValue _wrap_getCPtr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = SWIGV8_NUMBER_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

/* ---------------------------------------------------------------------------
 * PackedData object
 *
 * ---------------------------------------------------------------------------*/

class SwigV8PackedData {
public:
  SwigV8PackedData(void *data, size_t size, swig_type_info *type): data(data), size(size), type(type) {};

  ~SwigV8PackedData() {
  };

  void *data;
  size_t size;
  swig_type_info *type;

  v8::Persistent<v8::Object> handle;
};

SWIGRUNTIMEINLINE
int SwigV8Packed_Check(v8::Handle<v8::Value> valRef) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  if(objRef->InternalFieldCount() < 1) return false;
  v8::Handle<v8::Value> flag = objRef->GetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"));
  return (flag->IsBoolean() && flag->BooleanValue());
}

SWIGRUNTIME
swig_type_info *SwigV8Packed_UnpackData(v8::Handle<v8::Value> valRef, void *ptr, size_t size) {
  if (SwigV8Packed_Check(valRef)) {
    SWIGV8_HANDLESCOPE();
    
    SwigV8PackedData *sobj;

    v8::Handle<v8::Object> objRef = valRef->ToObject();

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
    v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
    sobj = static_cast<SwigV8PackedData*>(v8::External::Unwrap(cdataRef));
#else
    sobj = static_cast<SwigV8PackedData*>(objRef->GetAlignedPointerFromInternalField(0));
#endif
    if (sobj == NULL || sobj->size != size) return 0;
    memcpy(ptr, sobj->data, size);
    return sobj->type;
  } else {
    return 0;
  }
}

SWIGRUNTIME
int SWIGV8_ConvertPacked(v8::Handle<v8::Value> valRef, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigV8Packed_UnpackData(valRef, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Persistent< v8::Value > object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Object> *object, SwigV8PackedData *cdata) {
#else
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackData<v8::Object, SwigV8PackedData> &data) {
  v8::Local<v8::Object> object = data.GetValue();
  SwigV8PackedData *cdata = data.GetParameter();
#endif

  delete cdata;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  object.Clear();
  object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  object.Clear();
  object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  object->Dispose();
#else
  object.Clear();
#endif
}

SWIGRUNTIME
v8::Handle<v8::Value> SWIGV8_NewPackedObj(void *data, size_t size, swig_type_info *type) {
  SWIGV8_HANDLESCOPE_ESC();

  SwigV8PackedData *cdata = new SwigV8PackedData(data, size, type);
//  v8::Handle<v8::Object> obj = SWIGV8_OBJECT_NEW();
  v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();

  obj->SetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"), SWIGV8_BOOLEAN_NEW(true));

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#else
  cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete);
//  v8::V8::SetWeak(&cdata->handle, cdata, _wrap_SwigV8PackedData_delete);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

  SWIGV8_ESCAPE(obj);
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIGV8_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIGV8_NewPackedObj(ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Handle<v8::Value> result, v8::Handle<v8::Value> obj) {
#else
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Local<v8::Value> result, v8::Handle<v8::Value> obj) {
#endif
  SWIGV8_HANDLESCOPE_ESC();
  
  if (result->IsUndefined()) {
    result = SWIGV8_ARRAY_NEW();
  }
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  v8::Handle<v8::Array> arr = v8::Handle<v8::Array>::Cast(result);
#else  
  v8::Local<v8::Array> arr = v8::Local<v8::Array>::Cast(result);
#endif
  arr->Set(arr->Length(), obj);

  SWIGV8_ESCAPE(arr);
}



// Note: since 3.19 there are new CallBack types, since 03.21.9 the old ones have been removed
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::InvocationCallback  SwigV8FunctionCallback;
typedef v8::AccessorGetter      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetter      SwigV8AccessorSetterCallback;
typedef v8::AccessorInfo        SwigV8PropertyCallbackInfoVoid;
#else
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorGetterCallback      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetterCallback      SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#endif

/**
 * Creates a class template for a class with specified initialization function.
 */
SWIGRUNTIME v8::Handle<v8::FunctionTemplate> SWIGV8_CreateClassTemplate(const char* symbol) {
    SWIGV8_HANDLESCOPE_ESC();
    
    v8::Local<v8::FunctionTemplate> class_templ = SWIGV8_FUNCTEMPLATE_NEW_VOID();
    class_templ->SetClassName(SWIGV8_SYMBOL_NEW(symbol));

    v8::Handle<v8::ObjectTemplate> inst_templ = class_templ->InstanceTemplate();
    inst_templ->SetInternalFieldCount(1);

    v8::Handle<v8::ObjectTemplate> equals_templ = class_templ->PrototypeTemplate();
    equals_templ->Set(SWIGV8_SYMBOL_NEW("equals"), SWIGV8_FUNCTEMPLATE_NEW(_SWIGV8_wrap_equals));

    v8::Handle<v8::ObjectTemplate> cptr_templ = class_templ->PrototypeTemplate();
    cptr_templ->Set(SWIGV8_SYMBOL_NEW("getCPtr"), SWIGV8_FUNCTEMPLATE_NEW(_wrap_getCPtr));

    SWIGV8_ESCAPE(class_templ);
}

/**
 * Registers a class method with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberFunction(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8FunctionCallback _func) {
    v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->PrototypeTemplate();
    proto_templ->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func));
}

/**
 * Registers a class property with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberVariable(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->InstanceTemplate();
  proto_templ->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticFunction(v8::Handle<v8::Object> obj, const char* symbol,
  const SwigV8FunctionCallback& _func) {
  obj->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func)->GetFunction());
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticVariable(v8::Handle<v8::Object> obj, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  obj->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info)
{
    char buffer[256];
    char msg[512];
    int res;

    property->WriteUtf8(buffer, 256);
    res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);

    if(res<0) {
      SWIG_exception(SWIG_ERROR, "Tried to write read-only variable.");
    } else {
      SWIG_exception(SWIG_ERROR, msg);
    }
}



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Geom2d_BezierCurve swig_types[0]
#define SWIGTYPE_p_Geom2d_BoundedCurve swig_types[1]
#define SWIGTYPE_p_Geom2d_Circle swig_types[2]
#define SWIGTYPE_p_Geom2d_Conic swig_types[3]
#define SWIGTYPE_p_Geom2d_Curve swig_types[4]
#define SWIGTYPE_p_Geom2d_Ellipse swig_types[5]
#define SWIGTYPE_p_Geom2d_Geometry swig_types[6]
#define SWIGTYPE_p_Geom2d_Line swig_types[7]
#define SWIGTYPE_p_Geom2d_TrimmedCurve swig_types[8]
#define SWIGTYPE_p_Handle_Geom2d_BezierCurve swig_types[9]
#define SWIGTYPE_p_Handle_Geom2d_BoundedCurve swig_types[10]
#define SWIGTYPE_p_Handle_Geom2d_Circle swig_types[11]
#define SWIGTYPE_p_Handle_Geom2d_Conic swig_types[12]
#define SWIGTYPE_p_Handle_Geom2d_Curve swig_types[13]
#define SWIGTYPE_p_Handle_Geom2d_Ellipse swig_types[14]
#define SWIGTYPE_p_Handle_Geom2d_Geometry swig_types[15]
#define SWIGTYPE_p_Handle_Geom2d_Line swig_types[16]
#define SWIGTYPE_p_Handle_Geom2d_TrimmedCurve swig_types[17]
#define SWIGTYPE_p_Handle_MMgt_TShared swig_types[18]
#define SWIGTYPE_p_Handle_Standard_Transient swig_types[19]
#define SWIGTYPE_p_MMgt_TShared swig_types[20]
#define SWIGTYPE_p_Standard_Transient swig_types[21]
#define SWIGTYPE_p_TColStd_Array1OfReal swig_types[22]
#define SWIGTYPE_p_TColgp_Array1OfPnt2d swig_types[23]
#define SWIGTYPE_p_bool swig_types[24]
#define SWIGTYPE_p_char swig_types[25]
#define SWIGTYPE_p_double swig_types[26]
#define SWIGTYPE_p_gp_Ax22d swig_types[27]
#define SWIGTYPE_p_gp_Ax2d swig_types[28]
#define SWIGTYPE_p_gp_Circ2d swig_types[29]
#define SWIGTYPE_p_gp_Dir2d swig_types[30]
#define SWIGTYPE_p_gp_Elips2d swig_types[31]
#define SWIGTYPE_p_gp_Lin2d swig_types[32]
#define SWIGTYPE_p_gp_Pnt2d swig_types[33]
#define SWIGTYPE_p_gp_Trsf2d swig_types[34]
#define SWIGTYPE_p_gp_Vec2d swig_types[35]
#define SWIGTYPE_p_int swig_types[36]
#define SWIGTYPE_p_std__ostream swig_types[37]
static swig_type_info *swig_types[39];
static swig_module_info swig_module = {swig_types, 38, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#define SWIGVERSION 0x030009 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) (void *)((const void *)(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),(void**)(a)) 


#include <stdexcept>


#include <gp_XYZ.hxx>
#include <Standard_Real.hxx>
#include <Standard_Boolean.hxx>
#include <gp_Ax1.hxx>
#include <gp_Ax2.hxx>
#include <gp_Trsf.hxx>
#include <gp_Vec.hxx>
#include <gp_Dir.hxx>
#include <gp_Pnt.hxx>
#include <gp_Trsf2d.hxx>
#include <gp_Quaternion.hxx>
#include <gp_Ax3.hxx>
#include <gp_TrsfForm.hxx>
#include <gp_Mat.hxx>
#include <Standard_Integer.hxx>
#include <gp_XY.hxx>
#include <gp_Ax2d.hxx>
#include <gp_Vec2d.hxx>
#include <gp_Dir2d.hxx>
#include <gp_Pnt2d.hxx>
#include <gp_Mat2d.hxx>
#include <gp_Pnt.hxx>
#include <gp_Vec.hxx>
#include <gp_Dir.hxx>
#include <gp_Ax1.hxx>
#include <gp_Ax2.hxx>
#include <gp_Ax3.hxx>
#include <gp_Trsf.hxx>
#include <gp_Pnt2d.hxx>
#include <gp_Vec2d.hxx>
#include <gp_Dir2d.hxx>
#include <gp_Ax2d.hxx>
#include <gp_Ax22d.hxx>
#include <gp_Trsf2d.hxx>


#ifdef WNT
#pragma warning(disable : 4716)
#endif
#include <Standard_Transient.hxx>
#include <MMgt_TShared.hxx>
#include <Handle_Standard_Transient.hxx>
#include <Handle_MMgt_TShared.hxx>
#include <Standard_Real.hxx>
#include <Standard_Integer.hxx>
#include <Standard_Boolean.hxx>
#include <Standard_CString.hxx>
#include <Standard_TypeDef.hxx>
#include <Standard_Stream.hxx>
#include <Standard_OStream.hxx>
#include <Standard_Storable.hxx>
#include <sstream>
#include <string>
#include <iostream>


#include <stdlib.h>


#include <string>


#include <stdexcept>


#include <stdio.h>


#include <Standard_Failure.hxx>
#include <Standard_ErrorHandler.hxx>


    char* GetErrorMessage(){
        Handle(Standard_Failure) error = Standard_Failure::Caught ();
        char *error_name = (char*) error->DynamicType()->Name();
        char *error_message = (char*) error->GetMessageString();
        // concatenate the two strings
        char *message = (char *)malloc(strlen(error_name) + strlen(error_message) + 1);
        strcpy(message, error_name);
        strcat(message,": ");
        strcat(message, error_message);
        return message;
    }


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      // TODO: handle extra long strings
      return SWIGV8_UNDEFINED();
    } else {
      v8::Handle<v8::String> js_str = SWIGV8_STRING_NEW2(carray, size);
      return js_str;
    }
  } else {
    return SWIGV8_UNDEFINED();
  }
}


SWIGINTERNINLINE v8::Handle<v8::Value> 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


// TODO: seems wasteful to compile this in for every module...




#include <gp_Pnt2d.hxx>
#include <gp_Ax2d.hxx>
#include <Standard_Real.hxx>
#include <gp_Vec2d.hxx>
#include <gp_Trsf2d.hxx>
#include <Standard_Boolean.hxx>
#include <GeomAbs_Shape.hxx>
#include <Standard_Integer.hxx>
#include <gp_Lin2d.hxx>
#include <gp_Dir2d.hxx>
#include <Geom2d_Geometry.hxx>
#include <Handle_Geom2d_Geometry.hxx>
#include <gp_Ax22d.hxx>
#include <gp_Circ2d.hxx>
#include <GCE2d_MakeCircle.hxx>
#include <gp_Elips2d.hxx>
#include <Geom2d_Curve.hxx>
#include <Handle_Geom2d_Curve.hxx>
#include <GCE2d_MakeArcOfCircle.hxx>
#include <GCE2d_MakeSegment.hxx>
#include <Geom2d_Line.hxx>
#include <Handle_Geom2d_Line.hxx>
#include <Geom2d_Conic.hxx>
#include <Handle_Geom2d_Conic.hxx>
#include <Geom2d_Circle.hxx>
#include <Handle_Geom2d_Circle.hxx>
#include <Geom2d_Ellipse.hxx>
#include <Handle_Geom2d_Ellipse.hxx>
#include <Geom2d_BoundedCurve.hxx>
#include <Handle_Geom2d_BoundedCurve.hxx>
#include <Geom2d_TrimmedCurve.hxx>
#include <Handle_Geom2d_TrimmedCurve.hxx>
#include <Geom2d_BezierCurve.hxx>
#include <Handle_Geom2d_BezierCurve.hxx>
#include <Geom2d_Geometry.hxx>
#include <Handle_Geom2d_Geometry.hxx>
#include <Geom2d_Curve.hxx>
#include <Handle_Geom2d_Curve.hxx>
#include <Geom2d_Line.hxx>
#include <Handle_Geom2d_Line.hxx>
#include <Geom2d_Conic.hxx>
#include <Handle_Geom2d_Conic.hxx>
#include <Geom2d_Circle.hxx>
#include <Handle_Geom2d_Circle.hxx>
#include <Geom2d_Ellipse.hxx>
#include <Handle_Geom2d_Ellipse.hxx>
#include <Geom2d_BoundedCurve.hxx>
#include <Handle_Geom2d_BoundedCurve.hxx>
#include <Geom2d_TrimmedCurve.hxx>
#include <Handle_Geom2d_TrimmedCurve.hxx>
#include <Geom2d_BezierCurve.hxx>
#include <Handle_Geom2d_BezierCurve.hxx>
#include <GeomAbs_Shape.hxx>
#include <Handle_Geom2d_Geometry.hxx>
#include <Handle_Geom2d_Curve.hxx>
#include <Handle_Geom2d_Line.hxx>
#include <Handle_Geom2d_Conic.hxx>
#include <Handle_Geom2d_Circle.hxx>
#include <Handle_Geom2d_Ellipse.hxx>
#include <Handle_Geom2d_BoundedCurve.hxx>
#include <Handle_Geom2d_TrimmedCurve.hxx>
#include <Handle_Geom2d_BezierCurve.hxx>
#include <MMgt_TShared.hxx>
#include <Handle_MMgt_TShared.hxx>
#include <Handle_MMgt_TShared.hxx>


#include<TCollection.hxx>
#include<TColgp_Array1OfPnt2d.hxx>
#include<TColStd_Array1OfReal.hxx>
#include<Standard_RangeError.hxx>
#include<Standard_DimensionMismatch.hxx>
#include<Standard_OutOfRange.hxx>
#include<Standard_OutOfMemory.hxx>
class TColgp_Array1OfPnt;
class TColStd_Array1OfReal;


SWIGINTERN
int SWIG_AsVal_double (v8::Handle<v8::Value> obj, double *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = obj->NumberValue();

  return SWIG_OK;
}


SWIGINTERN
v8::Handle<v8::Value> SWIG_From_double   (double val)
{
  return SWIGV8_NUMBER_NEW(val);
}


SWIGINTERNINLINE
v8::Handle<v8::Value>
SWIG_From_bool  (bool value)
{
  return SWIGV8_BOOLEAN_NEW(value);
}


SWIGINTERN
int SWIG_AsVal_int (v8::Handle<v8::Value> valRef, int* val)
{
  if (!valRef->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = valRef->IntegerValue();

  return SWIG_OK;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN
int SWIG_AsVal_long (v8::Handle<v8::Value> obj, long* val)
{
  if (!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = (long) obj->IntegerValue();

  return SWIG_OK;
}


SWIGINTERN
int SWIG_AsVal_bool (v8::Handle<v8::Value> obj, bool *val)
{
  if(!obj->IsBoolean()) {
    return SWIG_ERROR;
  }

  if (val) *val = obj->BooleanValue();
  return SWIG_OK;
}

SWIGINTERN Handle_Geom2d_Circle const Geom2d_Circle_makeCircle__SWIG_0(gp_Circ2d const &C){
    GCE2d_MakeCircle* obj = new GCE2d_MakeCircle(C);
    return obj->Value();
  }
SWIGINTERN Handle_Geom2d_Circle const Geom2d_Circle_makeCircle__SWIG_1(gp_Ax2d const &A,Standard_Real const Radius,Standard_Boolean const Sense){
    GCE2d_MakeCircle* obj = new GCE2d_MakeCircle(A, Radius, Sense);
    return obj->Value();
  }
SWIGINTERN Handle_Geom2d_Circle const Geom2d_Circle_makeCircle__SWIG_2(gp_Ax22d const &A,Standard_Real const Radius){
    GCE2d_MakeCircle* obj = new GCE2d_MakeCircle(A, Radius);
    return obj->Value();
  }
SWIGINTERN Handle_Geom2d_Circle const Geom2d_Circle_makeCircle__SWIG_3(gp_Circ2d const &Circ,Standard_Real const Dist){
    GCE2d_MakeCircle* obj = new GCE2d_MakeCircle(Circ, Dist);
    return obj->Value();
  }
SWIGINTERN Handle_Geom2d_Circle const Geom2d_Circle_makeCircle__SWIG_4(gp_Circ2d const &Circ,gp_Pnt2d const &Point){
    GCE2d_MakeCircle* obj = new GCE2d_MakeCircle(Circ, Point);
    return obj->Value();
  }
SWIGINTERN Handle_Geom2d_Circle const Geom2d_Circle_makeCircle__SWIG_5(gp_Pnt2d const &P1,gp_Pnt2d const &P2,gp_Pnt2d const &P3){
    GCE2d_MakeCircle* obj = new GCE2d_MakeCircle(P1, P2, P3);
    return obj->Value();
  }
SWIGINTERN Handle_Geom2d_Circle const Geom2d_Circle_makeCircle__SWIG_6(gp_Pnt2d const &P,Standard_Real const Radius,Standard_Boolean const Sense){
    GCE2d_MakeCircle* obj = new GCE2d_MakeCircle(P, Radius, Sense);
    return obj->Value();
  }
SWIGINTERN Handle_Geom2d_Circle const Geom2d_Circle_makeCircle__SWIG_7(gp_Pnt2d const &Center,gp_Pnt2d const &Point,Standard_Boolean const Sense){
    GCE2d_MakeCircle* obj = new GCE2d_MakeCircle(Center, Point, Sense);
    return obj->Value();
  }
SWIGINTERN Handle_Geom2d_TrimmedCurve const Geom2d_TrimmedCurve_makeArcOfCircle__SWIG_0(gp_Circ2d const &Circ,Standard_Real const Alpha1,Standard_Real const Alpha2,Standard_Boolean const Sense){
    GCE2d_MakeArcOfCircle* obj = new GCE2d_MakeArcOfCircle(Circ, Alpha1, Alpha2, Sense);
    return obj->Value();
  }
SWIGINTERN Handle_Geom2d_TrimmedCurve const Geom2d_TrimmedCurve_makeArcOfCircle__SWIG_1(gp_Circ2d const &Circ,gp_Pnt2d const &P,Standard_Real const Alpha,Standard_Boolean const Sense){
    GCE2d_MakeArcOfCircle* obj = new GCE2d_MakeArcOfCircle(Circ, P, Alpha, Sense);
    return obj->Value();
  }
SWIGINTERN Handle_Geom2d_TrimmedCurve const Geom2d_TrimmedCurve_makeArcOfCircle__SWIG_2(gp_Circ2d const &Circ,gp_Pnt2d const &P1,gp_Pnt2d const &P2,Standard_Boolean const Sense){
    GCE2d_MakeArcOfCircle* obj = new GCE2d_MakeArcOfCircle(Circ, P1, P2, Sense);
    return obj->Value();
  }
SWIGINTERN Handle_Geom2d_TrimmedCurve const Geom2d_TrimmedCurve_makeArcOfCircle__SWIG_3(gp_Pnt2d const &P1,gp_Pnt2d const &P2,gp_Pnt2d const &P3){
    GCE2d_MakeArcOfCircle* obj = new GCE2d_MakeArcOfCircle(P1, P2, P3);
    return obj->Value();
  }
SWIGINTERN Handle_Geom2d_TrimmedCurve const Geom2d_TrimmedCurve_makeArcOfCircle__SWIG_4(gp_Pnt2d const &P1,gp_Vec2d const &V,gp_Pnt2d const &P2){
    GCE2d_MakeArcOfCircle* obj = new GCE2d_MakeArcOfCircle(P1, V, P2);
    return obj->Value();
  }
SWIGINTERN Handle_Geom2d_TrimmedCurve const Geom2d_TrimmedCurve_makeSegment__SWIG_0(gp_Pnt2d const &P1,gp_Pnt2d const &P2){
    GCE2d_MakeSegment* obj = new GCE2d_MakeSegment(P1, P2);
    return obj->Value();
  }
SWIGINTERN Handle_Geom2d_TrimmedCurve const Geom2d_TrimmedCurve_makeSegment__SWIG_1(gp_Pnt2d const &P1,gp_Dir2d const &V,gp_Pnt2d const &P2){
    GCE2d_MakeSegment* obj = new GCE2d_MakeSegment(P1, V, P2);
    return obj->Value();
  }
SWIGINTERN Handle_Geom2d_TrimmedCurve const Geom2d_TrimmedCurve_makeSegment__SWIG_2(gp_Lin2d const &Line,Standard_Real const U1,Standard_Real const U2){
    GCE2d_MakeSegment* obj = new GCE2d_MakeSegment(Line, U1, U2);
    return obj->Value();
  }
SWIGINTERN Handle_Geom2d_TrimmedCurve const Geom2d_TrimmedCurve_makeSegment__SWIG_3(gp_Lin2d const &Line,gp_Pnt2d const &Point,Standard_Real const Ulast){
    GCE2d_MakeSegment* obj = new GCE2d_MakeSegment(Line, Point, Ulast);
    return obj->Value();
  }
SWIGINTERN Handle_Geom2d_TrimmedCurve const Geom2d_TrimmedCurve_makeSegment__SWIG_4(gp_Lin2d const &Line,gp_Pnt2d const &P1,gp_Pnt2d const &P2){
    GCE2d_MakeSegment* obj = new GCE2d_MakeSegment(Line, P1, P2);
    return obj->Value();
  }

SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_int  (int value)
{
  return SWIGV8_INT32_NEW(value);
}


#define SWIGV8_INIT geom2d_initialize


SWIGV8_ClientData _exports_Standard_Transient_clientData;
SWIGV8_ClientData _exports_MMgt_TShared_clientData;
SWIGV8_ClientData _exports_Handle_Standard_Transient_clientData;
SWIGV8_ClientData _exports_Handle_MMgt_TShared_clientData;
SWIGV8_ClientData _exports_Geometry_clientData;
SWIGV8_ClientData _exports_Curve_clientData;
SWIGV8_ClientData _exports_Line_clientData;
SWIGV8_ClientData _exports_Conic_clientData;
SWIGV8_ClientData _exports_Circle_clientData;
SWIGV8_ClientData _exports_Ellipse_clientData;
SWIGV8_ClientData _exports_BoundedCurve_clientData;
SWIGV8_ClientData _exports_TrimmedCurve_clientData;
SWIGV8_ClientData _exports_BezierCurve_clientData;
SWIGV8_ClientData _exports_Handle_Geometry_clientData;
SWIGV8_ClientData _exports_Handle_Curve_clientData;
SWIGV8_ClientData _exports_Handle_Line_clientData;
SWIGV8_ClientData _exports_Handle_Conic_clientData;
SWIGV8_ClientData _exports_Handle_Circle_clientData;
SWIGV8_ClientData _exports_Handle_Ellipse_clientData;
SWIGV8_ClientData _exports_Handle_BoundedCurve_clientData;
SWIGV8_ClientData _exports_Handle_TrimmedCurve_clientData;
SWIGV8_ClientData _exports_Handle_BezierCurve_clientData;


static SwigV8ReturnValue _wrap_GetErrorMessage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_GetErrorMessage.");
  
  result = (char *)GetErrorMessage();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Standard_Transient(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Standard_Transient *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Standard_Transient.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Transient *)new Standard_Transient();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Standard_Transient, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Standard_Transient(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Standard_Transient(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Standard_Transient(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Standard_Transient(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Standard_Transient * arg1 = (Standard_Transient *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_MMgt_TShared(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  MMgt_TShared *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_MMgt_TShared.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (MMgt_TShared *)new MMgt_TShared();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_MMgt_TShared, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_MMgt_TShared(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_MMgt_TShared(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_MMgt_TShared(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_MMgt_TShared(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          MMgt_TShared * arg1 = (MMgt_TShared *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_Standard_Transient(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Standard_Transient *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Standard_Transient.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Standard_Transient *)new Handle_Standard_Transient();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Standard_Transient, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_Standard_Transient(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_Standard_Transient(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_Standard_Transient(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_Standard_Transient(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Standard_Transient * arg1 = (Handle_Standard_Transient *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_MMgt_TShared(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_MMgt_TShared *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_MMgt_TShared.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_MMgt_TShared *)new Handle_MMgt_TShared();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_MMgt_TShared, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_MMgt_TShared(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_MMgt_TShared(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_MMgt_TShared(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_MMgt_TShared(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_MMgt_TShared * arg1 = (Handle_MMgt_TShared *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_Geometry_mirror__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Geometry *arg1 = (Geom2d_Geometry *) 0 ;
  gp_Pnt2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_mirror" "', argument " "1"" of type '" "Geom2d_Geometry *""'"); 
  }
  arg1 = (Geom2d_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_mirror" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_mirror" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg2 = (gp_Pnt2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Mirror((gp_Pnt2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_mirror__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Geometry *arg1 = (Geom2d_Geometry *) 0 ;
  gp_Ax2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_mirror" "', argument " "1"" of type '" "Geom2d_Geometry *""'"); 
  }
  arg1 = (Geom2d_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Ax2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_mirror" "', argument " "2"" of type '" "gp_Ax2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_mirror" "', argument " "2"" of type '" "gp_Ax2d const &""'"); 
  }
  arg2 = (gp_Ax2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Mirror((gp_Ax2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry__wrap_Geometry_mirror(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Geometry_mirror__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Geometry_mirror__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Geometry_mirror__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Geometry_mirror__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mirror.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_rotate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Geometry *arg1 = (Geom2d_Geometry *) 0 ;
  gp_Pnt2d *arg2 = 0 ;
  Standard_Real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Geometry_rotate.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_rotate" "', argument " "1"" of type '" "Geom2d_Geometry *""'"); 
  }
  arg1 = (Geom2d_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_rotate" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_rotate" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg2 = (gp_Pnt2d *)(argp2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Geometry_rotate" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Rotate((gp_Pnt2d const &)*arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_scale(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Geometry *arg1 = (Geom2d_Geometry *) 0 ;
  gp_Pnt2d *arg2 = 0 ;
  Standard_Real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Geometry_scale.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_scale" "', argument " "1"" of type '" "Geom2d_Geometry *""'"); 
  }
  arg1 = (Geom2d_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_scale" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_scale" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg2 = (gp_Pnt2d *)(argp2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Geometry_scale" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Scale((gp_Pnt2d const &)*arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_translate__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Geometry *arg1 = (Geom2d_Geometry *) 0 ;
  gp_Vec2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_translate" "', argument " "1"" of type '" "Geom2d_Geometry *""'"); 
  }
  arg1 = (Geom2d_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Vec2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_translate" "', argument " "2"" of type '" "gp_Vec2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_translate" "', argument " "2"" of type '" "gp_Vec2d const &""'"); 
  }
  arg2 = (gp_Vec2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Translate((gp_Vec2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_translate__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Geometry *arg1 = (Geom2d_Geometry *) 0 ;
  gp_Pnt2d *arg2 = 0 ;
  gp_Pnt2d *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_translate" "', argument " "1"" of type '" "Geom2d_Geometry *""'"); 
  }
  arg1 = (Geom2d_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_translate" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_translate" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg2 = (gp_Pnt2d *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Geometry_translate" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_translate" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg3 = (gp_Pnt2d *)(argp3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Translate((gp_Pnt2d const &)*arg2,(gp_Pnt2d const &)*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry__wrap_Geometry_translate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Geometry_translate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Geometry_translate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Geometry_translate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Geometry_translate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function translate.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_transform(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Geometry *arg1 = (Geom2d_Geometry *) 0 ;
  gp_Trsf2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Geometry_transform.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_transform" "', argument " "1"" of type '" "Geom2d_Geometry *""'"); 
  }
  arg1 = (Geom2d_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_transform" "', argument " "2"" of type '" "gp_Trsf2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_transform" "', argument " "2"" of type '" "gp_Trsf2d const &""'"); 
  }
  arg2 = (gp_Trsf2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Transform((gp_Trsf2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_mirrored__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Geometry *arg1 = (Geom2d_Geometry *) 0 ;
  gp_Pnt2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Handle_Geom2d_Geometry result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_mirrored" "', argument " "1"" of type '" "Geom2d_Geometry *""'"); 
  }
  arg1 = (Geom2d_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_mirrored" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_mirrored" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg2 = (gp_Pnt2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Mirrored((gp_Pnt2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Geometry *handle = (Handle_Geom2d_Geometry *)new Handle_Geom2d_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_mirrored__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Geometry *arg1 = (Geom2d_Geometry *) 0 ;
  gp_Ax2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Handle_Geom2d_Geometry result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_mirrored" "', argument " "1"" of type '" "Geom2d_Geometry *""'"); 
  }
  arg1 = (Geom2d_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Ax2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_mirrored" "', argument " "2"" of type '" "gp_Ax2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_mirrored" "', argument " "2"" of type '" "gp_Ax2d const &""'"); 
  }
  arg2 = (gp_Ax2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Mirrored((gp_Ax2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Geometry *handle = (Handle_Geom2d_Geometry *)new Handle_Geom2d_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry__wrap_Geometry_mirrored(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Geometry_mirrored__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Geometry_mirrored__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Geometry_mirrored__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Geometry_mirrored__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mirrored.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_rotated(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Geometry *arg1 = (Geom2d_Geometry *) 0 ;
  gp_Pnt2d *arg2 = 0 ;
  Standard_Real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  Handle_Geom2d_Geometry result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Geometry_rotated.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_rotated" "', argument " "1"" of type '" "Geom2d_Geometry *""'"); 
  }
  arg1 = (Geom2d_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_rotated" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_rotated" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg2 = (gp_Pnt2d *)(argp2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Geometry_rotated" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Rotated((gp_Pnt2d const &)*arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Geometry *handle = (Handle_Geom2d_Geometry *)new Handle_Geom2d_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_scaled(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Geometry *arg1 = (Geom2d_Geometry *) 0 ;
  gp_Pnt2d *arg2 = 0 ;
  Standard_Real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  Handle_Geom2d_Geometry result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Geometry_scaled.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_scaled" "', argument " "1"" of type '" "Geom2d_Geometry *""'"); 
  }
  arg1 = (Geom2d_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_scaled" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_scaled" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg2 = (gp_Pnt2d *)(argp2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Geometry_scaled" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Scaled((gp_Pnt2d const &)*arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Geometry *handle = (Handle_Geom2d_Geometry *)new Handle_Geom2d_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_transformed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Geometry *arg1 = (Geom2d_Geometry *) 0 ;
  gp_Trsf2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Handle_Geom2d_Geometry result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Geometry_transformed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_transformed" "', argument " "1"" of type '" "Geom2d_Geometry *""'"); 
  }
  arg1 = (Geom2d_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_transformed" "', argument " "2"" of type '" "gp_Trsf2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_transformed" "', argument " "2"" of type '" "gp_Trsf2d const &""'"); 
  }
  arg2 = (gp_Trsf2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Transformed((gp_Trsf2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Geometry *handle = (Handle_Geom2d_Geometry *)new Handle_Geom2d_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_translated__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Geometry *arg1 = (Geom2d_Geometry *) 0 ;
  gp_Vec2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Handle_Geom2d_Geometry result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_translated" "', argument " "1"" of type '" "Geom2d_Geometry *""'"); 
  }
  arg1 = (Geom2d_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Vec2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_translated" "', argument " "2"" of type '" "gp_Vec2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_translated" "', argument " "2"" of type '" "gp_Vec2d const &""'"); 
  }
  arg2 = (gp_Vec2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Translated((gp_Vec2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Geometry *handle = (Handle_Geom2d_Geometry *)new Handle_Geom2d_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_translated__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Geometry *arg1 = (Geom2d_Geometry *) 0 ;
  gp_Pnt2d *arg2 = 0 ;
  gp_Pnt2d *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Handle_Geom2d_Geometry result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_translated" "', argument " "1"" of type '" "Geom2d_Geometry *""'"); 
  }
  arg1 = (Geom2d_Geometry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_translated" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_translated" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg2 = (gp_Pnt2d *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Geometry_translated" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Geometry_translated" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg3 = (gp_Pnt2d *)(argp3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Translated((gp_Pnt2d const &)*arg2,(gp_Pnt2d const &)*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Geometry *handle = (Handle_Geom2d_Geometry *)new Handle_Geom2d_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry__wrap_Geometry_translated(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Geometry_translated__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Geometry_translated__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Geometry_translated__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Geometry_translated__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function translated.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Geometry_copy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Geometry *arg1 = (Geom2d_Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom2d_Geometry result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Geometry_copy.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_copy" "', argument " "1"" of type '" "Geom2d_Geometry *""'"); 
  }
  arg1 = (Geom2d_Geometry *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Copy();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Geometry *handle = (Handle_Geom2d_Geometry *)new Handle_Geom2d_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Geometry(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Geometry(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Geometry(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Geometry(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom2d_Geometry * arg1 = (Geom2d_Geometry *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_Geometry(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class Geometry can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_reverse(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Curve *arg1 = (Geom2d_Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_reverse.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_reverse" "', argument " "1"" of type '" "Geom2d_Curve *""'"); 
  }
  arg1 = (Geom2d_Curve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Reverse();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_reversedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Curve *arg1 = (Geom2d_Curve *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_reversedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_reversedParameter" "', argument " "1"" of type '" "Geom2d_Curve *""'"); 
  }
  arg1 = (Geom2d_Curve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Curve_reversedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->ReversedParameter(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_transformedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Curve *arg1 = (Geom2d_Curve *) 0 ;
  Standard_Real arg2 ;
  gp_Trsf2d *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_transformedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_transformedParameter" "', argument " "1"" of type '" "Geom2d_Curve *""'"); 
  }
  arg1 = (Geom2d_Curve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Curve_transformedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Trsf2d,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Curve_transformedParameter" "', argument " "3"" of type '" "gp_Trsf2d const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Curve_transformedParameter" "', argument " "3"" of type '" "gp_Trsf2d const &""'"); 
  }
  arg3 = (gp_Trsf2d *)(argp3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->TransformedParameter(arg2,(gp_Trsf2d const &)*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_parametricTransformation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Curve *arg1 = (Geom2d_Curve *) 0 ;
  gp_Trsf2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_parametricTransformation.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_parametricTransformation" "', argument " "1"" of type '" "Geom2d_Curve *""'"); 
  }
  arg1 = (Geom2d_Curve *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Curve_parametricTransformation" "', argument " "2"" of type '" "gp_Trsf2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Curve_parametricTransformation" "', argument " "2"" of type '" "gp_Trsf2d const &""'"); 
  }
  arg2 = (gp_Trsf2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->ParametricTransformation((gp_Trsf2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_reversed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Curve *arg1 = (Geom2d_Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom2d_Curve result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_reversed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_reversed" "', argument " "1"" of type '" "Geom2d_Curve *""'"); 
  }
  arg1 = (Geom2d_Curve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Reversed();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Curve *handle = (Handle_Geom2d_Curve *)new Handle_Geom2d_Curve(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_firstParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Curve *arg1 = (Geom2d_Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_firstParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_firstParameter" "', argument " "1"" of type '" "Geom2d_Curve *""'"); 
  }
  arg1 = (Geom2d_Curve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->FirstParameter();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_lastParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Curve *arg1 = (Geom2d_Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_lastParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_lastParameter" "', argument " "1"" of type '" "Geom2d_Curve *""'"); 
  }
  arg1 = (Geom2d_Curve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->LastParameter();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_isClosed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Curve *arg1 = (Geom2d_Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_isClosed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_isClosed" "', argument " "1"" of type '" "Geom2d_Curve *""'"); 
  }
  arg1 = (Geom2d_Curve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsClosed();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_isPeriodic(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Curve *arg1 = (Geom2d_Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_isPeriodic.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_isPeriodic" "', argument " "1"" of type '" "Geom2d_Curve *""'"); 
  }
  arg1 = (Geom2d_Curve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsPeriodic();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_period(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Curve *arg1 = (Geom2d_Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_period.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_period" "', argument " "1"" of type '" "Geom2d_Curve *""'"); 
  }
  arg1 = (Geom2d_Curve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->Period();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_continuity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Curve *arg1 = (Geom2d_Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GeomAbs_Shape result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_continuity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_continuity" "', argument " "1"" of type '" "Geom2d_Curve *""'"); 
  }
  arg1 = (Geom2d_Curve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Continuity();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    jsresult = SWIGV8_NUMBER_NEW(static_cast<int>(result));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_isCn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Curve *arg1 = (Geom2d_Curve *) 0 ;
  Standard_Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_isCn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_isCn" "', argument " "1"" of type '" "Geom2d_Curve *""'"); 
  }
  arg1 = (Geom2d_Curve *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Curve_isCn" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsCN(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_d0(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Curve *arg1 = (Geom2d_Curve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_d0.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_d0" "', argument " "1"" of type '" "Geom2d_Curve *""'"); 
  }
  arg1 = (Geom2d_Curve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Curve_d0" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d0
    arg3 = &argout13;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D0(arg2,*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderSingleValueOutmap for d0
    
    
    jsresult = SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 );
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_d1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Curve *arg1 = (Geom2d_Curve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  gp_Vec2d *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  gp_Vec2d argout23 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_d1.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_d1" "', argument " "1"" of type '" "Geom2d_Curve *""'"); 
  }
  arg1 = (Geom2d_Curve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Curve_d1" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d1
    arg3 = &argout13;
    arg4 = &argout23;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D1(arg2,*arg3,*arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderObjectOutmap for d1
    
    v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();
    obj->Set(SWIGV8_STRING_NEW("p"), SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v1"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg4)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    jsresult = obj;
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_d2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Curve *arg1 = (Geom2d_Curve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  gp_Vec2d *arg4 = 0 ;
  gp_Vec2d *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  gp_Vec2d argout23 ;
  gp_Vec2d argout33 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_d2.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_d2" "', argument " "1"" of type '" "Geom2d_Curve *""'"); 
  }
  arg1 = (Geom2d_Curve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Curve_d2" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d2
    arg3 = &argout13;
    arg4 = &argout23;
    arg5 = &argout33;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D2(arg2,*arg3,*arg4,*arg5);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderObjectOutmap for d2
    
    v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();
    obj->Set(SWIGV8_STRING_NEW("p"), SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v1"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg4)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v2"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg5)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    jsresult = obj;
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_d3(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Curve *arg1 = (Geom2d_Curve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  gp_Vec2d *arg4 = 0 ;
  gp_Vec2d *arg5 = 0 ;
  gp_Vec2d *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  gp_Vec2d argout23 ;
  gp_Vec2d argout33 ;
  gp_Vec2d argout43 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_d3.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_d3" "', argument " "1"" of type '" "Geom2d_Curve *""'"); 
  }
  arg1 = (Geom2d_Curve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Curve_d3" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d3
    arg3 = &argout13;
    arg4 = &argout23;
    arg5 = &argout33;
    arg6 = &argout43;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D3(arg2,*arg3,*arg4,*arg5,*arg6);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderObjectOutmap for d3
    
    v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();
    obj->Set(SWIGV8_STRING_NEW("p"), SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v1"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg4)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v2"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg5)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v3"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg6)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    jsresult = obj;
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_dn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Curve *arg1 = (Geom2d_Curve *) 0 ;
  Standard_Real arg2 ;
  Standard_Integer arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  gp_Vec2d result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_dn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_dn" "', argument " "1"" of type '" "Geom2d_Curve *""'"); 
  }
  arg1 = (Geom2d_Curve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Curve_dn" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Curve_dn" "', argument " "3"" of type '" "Standard_Integer""'");
  } 
  arg3 = (Standard_Integer)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DN(arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d&)(result))), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Curve_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Curve *arg1 = (Geom2d_Curve *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Curve_value.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Curve_value" "', argument " "1"" of type '" "Geom2d_Curve *""'"); 
  }
  arg1 = (Geom2d_Curve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Curve_value" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Value(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d&)(result))), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Curve(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Curve(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Curve(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Curve(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom2d_Curve * arg1 = (Geom2d_Curve *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_Curve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class Curve can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Line__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  gp_Ax2d *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Geom2d_Line *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Line__SWIG_0.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Ax2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Line" "', argument " "1"" of type '" "gp_Ax2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Line" "', argument " "1"" of type '" "gp_Ax2d const &""'"); 
  }
  arg1 = (gp_Ax2d *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom2d_Line *)new Geom2d_Line((gp_Ax2d const &)*arg1);
    // hacked
    Handle_Geom2d_Line *handle;
    handle = (Handle_Geom2d_Line *)new Handle_Geom2d_Line((Geom2d_Line const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom2d_Line, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Line__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  gp_Lin2d *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Geom2d_Line *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Line__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Lin2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Line" "', argument " "1"" of type '" "gp_Lin2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Line" "', argument " "1"" of type '" "gp_Lin2d const &""'"); 
  }
  arg1 = (gp_Lin2d *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom2d_Line *)new Geom2d_Line((gp_Lin2d const &)*arg1);
    // hacked
    Handle_Geom2d_Line *handle;
    handle = (Handle_Geom2d_Line *)new Handle_Geom2d_Line((Geom2d_Line const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom2d_Line, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Line__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  gp_Pnt2d *arg1 = 0 ;
  gp_Dir2d *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Geom2d_Line *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Line__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Line" "', argument " "1"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Line" "', argument " "1"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg1 = (gp_Pnt2d *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_gp_Dir2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Line" "', argument " "2"" of type '" "gp_Dir2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Line" "', argument " "2"" of type '" "gp_Dir2d const &""'"); 
  }
  arg2 = (gp_Dir2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom2d_Line *)new Geom2d_Line((gp_Pnt2d const &)*arg1,(gp_Dir2d const &)*arg2);
    // hacked
    Handle_Geom2d_Line *handle;
    handle = (Handle_Geom2d_Line *)new Handle_Geom2d_Line((Geom2d_Line const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom2d_Line, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Line(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Line__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Line__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Line__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Line__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Line__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Line__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Line");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_setLin2D(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  gp_Lin2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_setLin2D.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_setLin2D" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Lin2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Line_setLin2D" "', argument " "2"" of type '" "gp_Lin2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Line_setLin2D" "', argument " "2"" of type '" "gp_Lin2d const &""'"); 
  }
  arg2 = (gp_Lin2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetLin2d((gp_Lin2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_setDirection(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  gp_Dir2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_setDirection.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_setDirection" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Dir2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Line_setDirection" "', argument " "2"" of type '" "gp_Dir2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Line_setDirection" "', argument " "2"" of type '" "gp_Dir2d const &""'"); 
  }
  arg2 = (gp_Dir2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetDirection((gp_Dir2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_direction(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Dir2d result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_direction.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_direction" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Direction();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Dir2d((const gp_Dir2d&)(result))), SWIGTYPE_p_gp_Dir2d, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_setLocation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  gp_Pnt2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_setLocation.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_setLocation" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Line_setLocation" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Line_setLocation" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg2 = (gp_Pnt2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetLocation((gp_Pnt2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_location(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Pnt2d result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_location.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_location" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Location();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d&)(result))), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_setPosition(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  gp_Ax2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_setPosition.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_setPosition" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Ax2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Line_setPosition" "', argument " "2"" of type '" "gp_Ax2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Line_setPosition" "', argument " "2"" of type '" "gp_Ax2d const &""'"); 
  }
  arg2 = (gp_Ax2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetPosition((gp_Ax2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_position(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Ax2d result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_position.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_position" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Position();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Ax2d((const gp_Ax2d&)(result))), SWIGTYPE_p_gp_Ax2d, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_lin2D(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Lin2d result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_lin2D.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_lin2D" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Lin2d();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Lin2d((const gp_Lin2d&)(result))), SWIGTYPE_p_gp_Lin2d, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_reverse(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_reverse.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_reverse" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Reverse();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_reversedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_reversedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_reversedParameter" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Line_reversedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->ReversedParameter(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_firstParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_firstParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_firstParameter" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->FirstParameter();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_lastParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_lastParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_lastParameter" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->LastParameter();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_isClosed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_isClosed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_isClosed" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsClosed();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_isPeriodic(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_isPeriodic.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_isPeriodic" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsPeriodic();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_continuity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GeomAbs_Shape result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_continuity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_continuity" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Continuity();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    jsresult = SWIGV8_NUMBER_NEW(static_cast<int>(result));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_distance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  gp_Pnt2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_distance.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_distance" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Line_distance" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Line_distance" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg2 = (gp_Pnt2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->Distance((gp_Pnt2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_isCn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  Standard_Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_isCn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_isCn" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Line_isCn" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsCN(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_d0(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_d0.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_d0" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Line_d0" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d0
    arg3 = &argout13;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D0(arg2,*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderSingleValueOutmap for d0
    
    
    jsresult = SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 );
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_d1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  gp_Vec2d *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  gp_Vec2d argout23 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_d1.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_d1" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Line_d1" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d1
    arg3 = &argout13;
    arg4 = &argout23;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D1(arg2,*arg3,*arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderObjectOutmap for d1
    
    v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();
    obj->Set(SWIGV8_STRING_NEW("p"), SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v1"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg4)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    jsresult = obj;
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_d2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  gp_Vec2d *arg4 = 0 ;
  gp_Vec2d *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  gp_Vec2d argout23 ;
  gp_Vec2d argout33 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_d2.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_d2" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Line_d2" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d2
    arg3 = &argout13;
    arg4 = &argout23;
    arg5 = &argout33;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D2(arg2,*arg3,*arg4,*arg5);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderObjectOutmap for d2
    
    v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();
    obj->Set(SWIGV8_STRING_NEW("p"), SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v1"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg4)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v2"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg5)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    jsresult = obj;
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_d3(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  gp_Vec2d *arg4 = 0 ;
  gp_Vec2d *arg5 = 0 ;
  gp_Vec2d *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  gp_Vec2d argout23 ;
  gp_Vec2d argout33 ;
  gp_Vec2d argout43 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_d3.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_d3" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Line_d3" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d3
    arg3 = &argout13;
    arg4 = &argout23;
    arg5 = &argout33;
    arg6 = &argout43;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D3(arg2,*arg3,*arg4,*arg5,*arg6);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderObjectOutmap for d3
    
    v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();
    obj->Set(SWIGV8_STRING_NEW("p"), SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v1"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg4)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v2"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg5)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v3"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg6)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    jsresult = obj;
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_dn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  Standard_Real arg2 ;
  Standard_Integer arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  gp_Vec2d result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_dn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_dn" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Line_dn" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Line_dn" "', argument " "3"" of type '" "Standard_Integer""'");
  } 
  arg3 = (Standard_Integer)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DN(arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d&)(result))), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_transform(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  gp_Trsf2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_transform.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_transform" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Line_transform" "', argument " "2"" of type '" "gp_Trsf2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Line_transform" "', argument " "2"" of type '" "gp_Trsf2d const &""'"); 
  }
  arg2 = (gp_Trsf2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Transform((gp_Trsf2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_transformedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  Standard_Real arg2 ;
  gp_Trsf2d *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_transformedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_transformedParameter" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Line_transformedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Trsf2d,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Line_transformedParameter" "', argument " "3"" of type '" "gp_Trsf2d const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Line_transformedParameter" "', argument " "3"" of type '" "gp_Trsf2d const &""'"); 
  }
  arg3 = (gp_Trsf2d *)(argp3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->TransformedParameter(arg2,(gp_Trsf2d const &)*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_parametricTransformation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  gp_Trsf2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_parametricTransformation.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_parametricTransformation" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Line_parametricTransformation" "', argument " "2"" of type '" "gp_Trsf2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Line_parametricTransformation" "', argument " "2"" of type '" "gp_Trsf2d const &""'"); 
  }
  arg2 = (gp_Trsf2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->ParametricTransformation((gp_Trsf2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Line_copy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom2d_Geometry result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Line_copy.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_copy" "', argument " "1"" of type '" "Geom2d_Line *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Copy();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Geometry *handle = (Handle_Geom2d_Geometry *)new Handle_Geom2d_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Line(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Line(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Line(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Line(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom2d_Line * arg1 = (Geom2d_Line *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_Conic_setAxis(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Conic *arg1 = (Geom2d_Conic *) 0 ;
  gp_Ax22d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_setAxis.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_setAxis" "', argument " "1"" of type '" "Geom2d_Conic *""'"); 
  }
  arg1 = (Geom2d_Conic *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Ax22d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Conic_setAxis" "', argument " "2"" of type '" "gp_Ax22d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Conic_setAxis" "', argument " "2"" of type '" "gp_Ax22d const &""'"); 
  }
  arg2 = (gp_Ax22d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetAxis((gp_Ax22d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_setXaxis(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Conic *arg1 = (Geom2d_Conic *) 0 ;
  gp_Ax2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_setXaxis.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_setXaxis" "', argument " "1"" of type '" "Geom2d_Conic *""'"); 
  }
  arg1 = (Geom2d_Conic *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Ax2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Conic_setXaxis" "', argument " "2"" of type '" "gp_Ax2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Conic_setXaxis" "', argument " "2"" of type '" "gp_Ax2d const &""'"); 
  }
  arg2 = (gp_Ax2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetXAxis((gp_Ax2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_setYaxis(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Conic *arg1 = (Geom2d_Conic *) 0 ;
  gp_Ax2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_setYaxis.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_setYaxis" "', argument " "1"" of type '" "Geom2d_Conic *""'"); 
  }
  arg1 = (Geom2d_Conic *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Ax2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Conic_setYaxis" "', argument " "2"" of type '" "gp_Ax2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Conic_setYaxis" "', argument " "2"" of type '" "gp_Ax2d const &""'"); 
  }
  arg2 = (gp_Ax2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetYAxis((gp_Ax2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_setLocation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Conic *arg1 = (Geom2d_Conic *) 0 ;
  gp_Pnt2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_setLocation.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_setLocation" "', argument " "1"" of type '" "Geom2d_Conic *""'"); 
  }
  arg1 = (Geom2d_Conic *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Conic_setLocation" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Conic_setLocation" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg2 = (gp_Pnt2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetLocation((gp_Pnt2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_xaxis(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Conic *arg1 = (Geom2d_Conic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Ax2d result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_xaxis.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_xaxis" "', argument " "1"" of type '" "Geom2d_Conic *""'"); 
  }
  arg1 = (Geom2d_Conic *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->XAxis();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Ax2d((const gp_Ax2d&)(result))), SWIGTYPE_p_gp_Ax2d, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_yaxis(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Conic *arg1 = (Geom2d_Conic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Ax2d result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_yaxis.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_yaxis" "', argument " "1"" of type '" "Geom2d_Conic *""'"); 
  }
  arg1 = (Geom2d_Conic *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->YAxis();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Ax2d((const gp_Ax2d&)(result))), SWIGTYPE_p_gp_Ax2d, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_eccentricity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Conic *arg1 = (Geom2d_Conic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_eccentricity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_eccentricity" "', argument " "1"" of type '" "Geom2d_Conic *""'"); 
  }
  arg1 = (Geom2d_Conic *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->Eccentricity();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_location(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Conic *arg1 = (Geom2d_Conic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Pnt2d result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_location.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_location" "', argument " "1"" of type '" "Geom2d_Conic *""'"); 
  }
  arg1 = (Geom2d_Conic *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Location();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d&)(result))), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_position(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Conic *arg1 = (Geom2d_Conic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Ax22d result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_position.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_position" "', argument " "1"" of type '" "Geom2d_Conic *""'"); 
  }
  arg1 = (Geom2d_Conic *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Position();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Ax22d((const gp_Ax22d&)(result))), SWIGTYPE_p_gp_Ax22d, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_reverse(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Conic *arg1 = (Geom2d_Conic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_reverse.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_reverse" "', argument " "1"" of type '" "Geom2d_Conic *""'"); 
  }
  arg1 = (Geom2d_Conic *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Reverse();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_reversedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Conic *arg1 = (Geom2d_Conic *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_reversedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_reversedParameter" "', argument " "1"" of type '" "Geom2d_Conic *""'"); 
  }
  arg1 = (Geom2d_Conic *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Conic_reversedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->ReversedParameter(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_continuity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Conic *arg1 = (Geom2d_Conic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GeomAbs_Shape result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_continuity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_continuity" "', argument " "1"" of type '" "Geom2d_Conic *""'"); 
  }
  arg1 = (Geom2d_Conic *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Continuity();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    jsresult = SWIGV8_NUMBER_NEW(static_cast<int>(result));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_isCn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Conic *arg1 = (Geom2d_Conic *) 0 ;
  Standard_Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_isCn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conic_isCn" "', argument " "1"" of type '" "Geom2d_Conic *""'"); 
  }
  arg1 = (Geom2d_Conic *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Conic_isCn" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsCN(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Conic(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Conic(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Conic(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Conic(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom2d_Conic * arg1 = (Geom2d_Conic *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_Conic(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class Conic can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Circle__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  gp_Circ2d *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Geom2d_Circle *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Circle__SWIG_0.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Circ2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Circle" "', argument " "1"" of type '" "gp_Circ2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Circle" "', argument " "1"" of type '" "gp_Circ2d const &""'"); 
  }
  arg1 = (gp_Circ2d *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom2d_Circle *)new Geom2d_Circle((gp_Circ2d const &)*arg1);
    // hacked
    Handle_Geom2d_Circle *handle;
    handle = (Handle_Geom2d_Circle *)new Handle_Geom2d_Circle((Geom2d_Circle const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom2d_Circle, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Circle__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  gp_Ax2d *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Boolean arg3 = (Standard_Boolean) (Standard_Boolean)true ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  Geom2d_Circle *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Circle__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Ax2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Circle" "', argument " "1"" of type '" "gp_Ax2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Circle" "', argument " "1"" of type '" "gp_Ax2d const &""'"); 
  }
  arg1 = (gp_Ax2d *)(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Circle" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Circle" "', argument " "3"" of type '" "Standard_Boolean""'");
  } 
  arg3 = (Standard_Boolean)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom2d_Circle *)new Geom2d_Circle((gp_Ax2d const &)*arg1,arg2,arg3);
    // hacked
    Handle_Geom2d_Circle *handle;
    handle = (Handle_Geom2d_Circle *)new Handle_Geom2d_Circle((Geom2d_Circle const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom2d_Circle, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Circle__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  gp_Ax22d *arg1 = 0 ;
  Standard_Real arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Geom2d_Circle *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Circle__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Ax22d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Circle" "', argument " "1"" of type '" "gp_Ax22d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Circle" "', argument " "1"" of type '" "gp_Ax22d const &""'"); 
  }
  arg1 = (gp_Ax22d *)(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Circle" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom2d_Circle *)new Geom2d_Circle((gp_Ax22d const &)*arg1,arg2);
    // hacked
    Handle_Geom2d_Circle *handle;
    handle = (Handle_Geom2d_Circle *)new Handle_Geom2d_Circle((Geom2d_Circle const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom2d_Circle, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Circle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Circle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Circle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Circle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Circle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Circle__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Circle__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Circle");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_setCirc2D(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Circle *arg1 = (Geom2d_Circle *) 0 ;
  gp_Circ2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_setCirc2D.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_setCirc2D" "', argument " "1"" of type '" "Geom2d_Circle *""'"); 
  }
  arg1 = (Geom2d_Circle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Circ2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Circle_setCirc2D" "', argument " "2"" of type '" "gp_Circ2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_setCirc2D" "', argument " "2"" of type '" "gp_Circ2d const &""'"); 
  }
  arg2 = (gp_Circ2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetCirc2d((gp_Circ2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_setRadius(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Circle *arg1 = (Geom2d_Circle *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_setRadius.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_setRadius" "', argument " "1"" of type '" "Geom2d_Circle *""'"); 
  }
  arg1 = (Geom2d_Circle *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_setRadius" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetRadius(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_circ2D(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Circle *arg1 = (Geom2d_Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Circ2d result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_circ2D.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_circ2D" "', argument " "1"" of type '" "Geom2d_Circle *""'"); 
  }
  arg1 = (Geom2d_Circle *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Circ2d();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Circ2d((const gp_Circ2d&)(result))), SWIGTYPE_p_gp_Circ2d, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_radius(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Circle *arg1 = (Geom2d_Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_radius.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_radius" "', argument " "1"" of type '" "Geom2d_Circle *""'"); 
  }
  arg1 = (Geom2d_Circle *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->Radius();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_reversedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Circle *arg1 = (Geom2d_Circle *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_reversedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_reversedParameter" "', argument " "1"" of type '" "Geom2d_Circle *""'"); 
  }
  arg1 = (Geom2d_Circle *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_reversedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->ReversedParameter(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_eccentricity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Circle *arg1 = (Geom2d_Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_eccentricity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_eccentricity" "', argument " "1"" of type '" "Geom2d_Circle *""'"); 
  }
  arg1 = (Geom2d_Circle *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->Eccentricity();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_firstParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Circle *arg1 = (Geom2d_Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_firstParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_firstParameter" "', argument " "1"" of type '" "Geom2d_Circle *""'"); 
  }
  arg1 = (Geom2d_Circle *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->FirstParameter();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_lastParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Circle *arg1 = (Geom2d_Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_lastParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_lastParameter" "', argument " "1"" of type '" "Geom2d_Circle *""'"); 
  }
  arg1 = (Geom2d_Circle *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->LastParameter();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_isClosed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Circle *arg1 = (Geom2d_Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_isClosed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_isClosed" "', argument " "1"" of type '" "Geom2d_Circle *""'"); 
  }
  arg1 = (Geom2d_Circle *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsClosed();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_isPeriodic(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Circle *arg1 = (Geom2d_Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_isPeriodic.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_isPeriodic" "', argument " "1"" of type '" "Geom2d_Circle *""'"); 
  }
  arg1 = (Geom2d_Circle *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsPeriodic();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_d0(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Circle *arg1 = (Geom2d_Circle *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_d0.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_d0" "', argument " "1"" of type '" "Geom2d_Circle *""'"); 
  }
  arg1 = (Geom2d_Circle *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_d0" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d0
    arg3 = &argout13;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D0(arg2,*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderSingleValueOutmap for d0
    
    
    jsresult = SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 );
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_d1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Circle *arg1 = (Geom2d_Circle *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  gp_Vec2d *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  gp_Vec2d argout23 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_d1.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_d1" "', argument " "1"" of type '" "Geom2d_Circle *""'"); 
  }
  arg1 = (Geom2d_Circle *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_d1" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d1
    arg3 = &argout13;
    arg4 = &argout23;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D1(arg2,*arg3,*arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderObjectOutmap for d1
    
    v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();
    obj->Set(SWIGV8_STRING_NEW("p"), SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v1"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg4)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    jsresult = obj;
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_d2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Circle *arg1 = (Geom2d_Circle *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  gp_Vec2d *arg4 = 0 ;
  gp_Vec2d *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  gp_Vec2d argout23 ;
  gp_Vec2d argout33 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_d2.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_d2" "', argument " "1"" of type '" "Geom2d_Circle *""'"); 
  }
  arg1 = (Geom2d_Circle *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_d2" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d2
    arg3 = &argout13;
    arg4 = &argout23;
    arg5 = &argout33;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D2(arg2,*arg3,*arg4,*arg5);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderObjectOutmap for d2
    
    v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();
    obj->Set(SWIGV8_STRING_NEW("p"), SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v1"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg4)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v2"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg5)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    jsresult = obj;
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_d3(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Circle *arg1 = (Geom2d_Circle *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  gp_Vec2d *arg4 = 0 ;
  gp_Vec2d *arg5 = 0 ;
  gp_Vec2d *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  gp_Vec2d argout23 ;
  gp_Vec2d argout33 ;
  gp_Vec2d argout43 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_d3.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_d3" "', argument " "1"" of type '" "Geom2d_Circle *""'"); 
  }
  arg1 = (Geom2d_Circle *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_d3" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d3
    arg3 = &argout13;
    arg4 = &argout23;
    arg5 = &argout33;
    arg6 = &argout43;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D3(arg2,*arg3,*arg4,*arg5,*arg6);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderObjectOutmap for d3
    
    v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();
    obj->Set(SWIGV8_STRING_NEW("p"), SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v1"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg4)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v2"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg5)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v3"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg6)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    jsresult = obj;
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_dn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Circle *arg1 = (Geom2d_Circle *) 0 ;
  Standard_Real arg2 ;
  Standard_Integer arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  gp_Vec2d result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_dn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_dn" "', argument " "1"" of type '" "Geom2d_Circle *""'"); 
  }
  arg1 = (Geom2d_Circle *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_dn" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Circle_dn" "', argument " "3"" of type '" "Standard_Integer""'");
  } 
  arg3 = (Standard_Integer)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DN(arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d&)(result))), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_transform(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Circle *arg1 = (Geom2d_Circle *) 0 ;
  gp_Trsf2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_transform.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_transform" "', argument " "1"" of type '" "Geom2d_Circle *""'"); 
  }
  arg1 = (Geom2d_Circle *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Circle_transform" "', argument " "2"" of type '" "gp_Trsf2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_transform" "', argument " "2"" of type '" "gp_Trsf2d const &""'"); 
  }
  arg2 = (gp_Trsf2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Transform((gp_Trsf2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_copy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Circle *arg1 = (Geom2d_Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom2d_Geometry result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Circle_copy.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_copy" "', argument " "1"" of type '" "Geom2d_Circle *""'"); 
  }
  arg1 = (Geom2d_Circle *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Copy();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Geometry *handle = (Handle_Geom2d_Geometry *)new Handle_Geom2d_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_makeCircle__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Circ2d *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Handle_Geom2d_Circle result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Circ2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Circ2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Circ2d const &""'"); 
  }
  arg1 = (gp_Circ2d *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom2d_Circle_makeCircle__SWIG_0((gp_Circ2d const &)*arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Circle *handle = (Handle_Geom2d_Circle *)new Handle_Geom2d_Circle(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_makeCircle__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Ax2d *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Boolean arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  Handle_Geom2d_Circle result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Ax2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Ax2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Ax2d const &""'"); 
  }
  arg1 = (gp_Ax2d *)(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Circle_makeCircle" "', argument " "3"" of type '" "Standard_Boolean""'");
  } 
  arg3 = (Standard_Boolean)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom2d_Circle_makeCircle__SWIG_1((gp_Ax2d const &)*arg1,arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Circle *handle = (Handle_Geom2d_Circle *)new Handle_Geom2d_Circle(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_makeCircle__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Ax22d *arg1 = 0 ;
  Standard_Real arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Handle_Geom2d_Circle result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Ax22d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Ax22d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Ax22d const &""'"); 
  }
  arg1 = (gp_Ax22d *)(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom2d_Circle_makeCircle__SWIG_2((gp_Ax22d const &)*arg1,arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Circle *handle = (Handle_Geom2d_Circle *)new Handle_Geom2d_Circle(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_makeCircle__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Circ2d *arg1 = 0 ;
  Standard_Real arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Handle_Geom2d_Circle result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Circ2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Circ2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Circ2d const &""'"); 
  }
  arg1 = (gp_Circ2d *)(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom2d_Circle_makeCircle__SWIG_3((gp_Circ2d const &)*arg1,arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Circle *handle = (Handle_Geom2d_Circle *)new Handle_Geom2d_Circle(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_makeCircle__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Circ2d *arg1 = 0 ;
  gp_Pnt2d *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Handle_Geom2d_Circle result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Circ2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Circ2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Circ2d const &""'"); 
  }
  arg1 = (gp_Circ2d *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg2 = (gp_Pnt2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom2d_Circle_makeCircle__SWIG_4((gp_Circ2d const &)*arg1,(gp_Pnt2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Circle *handle = (Handle_Geom2d_Circle *)new Handle_Geom2d_Circle(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_makeCircle__SWIG_5(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Pnt2d *arg1 = 0 ;
  gp_Pnt2d *arg2 = 0 ;
  gp_Pnt2d *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Handle_Geom2d_Circle result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg1 = (gp_Pnt2d *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg2 = (gp_Pnt2d *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Circle_makeCircle" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg3 = (gp_Pnt2d *)(argp3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom2d_Circle_makeCircle__SWIG_5((gp_Pnt2d const &)*arg1,(gp_Pnt2d const &)*arg2,(gp_Pnt2d const &)*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Circle *handle = (Handle_Geom2d_Circle *)new Handle_Geom2d_Circle(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_makeCircle__SWIG_6(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Pnt2d *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Boolean arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  Handle_Geom2d_Circle result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg1 = (gp_Pnt2d *)(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Circle_makeCircle" "', argument " "3"" of type '" "Standard_Boolean""'");
  } 
  arg3 = (Standard_Boolean)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom2d_Circle_makeCircle__SWIG_6((gp_Pnt2d const &)*arg1,arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Circle *handle = (Handle_Geom2d_Circle *)new Handle_Geom2d_Circle(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle_makeCircle__SWIG_7(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Pnt2d *arg1 = 0 ;
  gp_Pnt2d *arg2 = 0 ;
  Standard_Boolean arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  Handle_Geom2d_Circle result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "1"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg1 = (gp_Pnt2d *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Circle_makeCircle" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg2 = (gp_Pnt2d *)(argp2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Circle_makeCircle" "', argument " "3"" of type '" "Standard_Boolean""'");
  } 
  arg3 = (Standard_Boolean)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom2d_Circle_makeCircle__SWIG_7((gp_Pnt2d const &)*arg1,(gp_Pnt2d const &)*arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Circle *handle = (Handle_Geom2d_Circle *)new Handle_Geom2d_Circle(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Circle__wrap_Circle_makeCircle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Circle_makeCircle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Circle_makeCircle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Circle_makeCircle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Circle_makeCircle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Circle_makeCircle__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Circle_makeCircle__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Circle_makeCircle__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Circle_makeCircle__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Circle_makeCircle__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Circle_makeCircle__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Circle_makeCircle__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Circle_makeCircle__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Circle_makeCircle__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Circle_makeCircle__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Circle_makeCircle__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Circle_makeCircle__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function makeCircle.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Circle(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Circle(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Circle(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Circle(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom2d_Circle * arg1 = (Geom2d_Circle *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Ellipse__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  gp_Elips2d *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Geom2d_Ellipse *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Ellipse__SWIG_0.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Elips2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Ellipse" "', argument " "1"" of type '" "gp_Elips2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Ellipse" "', argument " "1"" of type '" "gp_Elips2d const &""'"); 
  }
  arg1 = (gp_Elips2d *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom2d_Ellipse *)new Geom2d_Ellipse((gp_Elips2d const &)*arg1);
    // hacked
    Handle_Geom2d_Ellipse *handle;
    handle = (Handle_Geom2d_Ellipse *)new Handle_Geom2d_Ellipse((Geom2d_Ellipse const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom2d_Ellipse, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Ellipse__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  gp_Ax2d *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Boolean arg4 = (Standard_Boolean) (Standard_Boolean)true ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  Geom2d_Ellipse *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Ellipse__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Ax2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Ellipse" "', argument " "1"" of type '" "gp_Ax2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Ellipse" "', argument " "1"" of type '" "gp_Ax2d const &""'"); 
  }
  arg1 = (gp_Ax2d *)(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Ellipse" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Ellipse" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Ellipse" "', argument " "4"" of type '" "Standard_Boolean""'");
  } 
  arg4 = (Standard_Boolean)(val4);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom2d_Ellipse *)new Geom2d_Ellipse((gp_Ax2d const &)*arg1,arg2,arg3,arg4);
    // hacked
    Handle_Geom2d_Ellipse *handle;
    handle = (Handle_Geom2d_Ellipse *)new Handle_Geom2d_Ellipse((Geom2d_Ellipse const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom2d_Ellipse, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Ellipse__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  gp_Ax22d *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  Geom2d_Ellipse *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Ellipse__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Ax22d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Ellipse" "', argument " "1"" of type '" "gp_Ax22d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Ellipse" "', argument " "1"" of type '" "gp_Ax22d const &""'"); 
  }
  arg1 = (gp_Ax22d *)(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Ellipse" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Ellipse" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom2d_Ellipse *)new Geom2d_Ellipse((gp_Ax22d const &)*arg1,arg2,arg3);
    // hacked
    Handle_Geom2d_Ellipse *handle;
    handle = (Handle_Geom2d_Ellipse *)new Handle_Geom2d_Ellipse((Geom2d_Ellipse const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom2d_Ellipse, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Ellipse(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Ellipse__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Ellipse__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Ellipse__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Ellipse__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Ellipse__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Ellipse__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Ellipse");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_setElips2D(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  gp_Elips2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_setElips2D.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_setElips2D" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Elips2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ellipse_setElips2D" "', argument " "2"" of type '" "gp_Elips2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ellipse_setElips2D" "', argument " "2"" of type '" "gp_Elips2d const &""'"); 
  }
  arg2 = (gp_Elips2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetElips2d((gp_Elips2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_setMajorRadius(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_setMajorRadius.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_setMajorRadius" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellipse_setMajorRadius" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetMajorRadius(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_setMinorRadius(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_setMinorRadius.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_setMinorRadius" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellipse_setMinorRadius" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetMinorRadius(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_elips2D(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Elips2d result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_elips2D.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_elips2D" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Elips2d();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Elips2d((const gp_Elips2d&)(result))), SWIGTYPE_p_gp_Elips2d, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_reversedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_reversedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_reversedParameter" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellipse_reversedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->ReversedParameter(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_directrix1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Ax2d result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_directrix1.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_directrix1" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Directrix1();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Ax2d((const gp_Ax2d&)(result))), SWIGTYPE_p_gp_Ax2d, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_directrix2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Ax2d result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_directrix2.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_directrix2" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Directrix2();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Ax2d((const gp_Ax2d&)(result))), SWIGTYPE_p_gp_Ax2d, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_eccentricity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_eccentricity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_eccentricity" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->Eccentricity();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_focal(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_focal.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_focal" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->Focal();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_focus1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Pnt2d result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_focus1.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_focus1" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Focus1();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d&)(result))), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_focus2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Pnt2d result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_focus2.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_focus2" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Focus2();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d&)(result))), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_majorRadius(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_majorRadius.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_majorRadius" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->MajorRadius();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_minorRadius(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_minorRadius.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_minorRadius" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->MinorRadius();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_parameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_parameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_parameter" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->Parameter();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_firstParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_firstParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_firstParameter" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->FirstParameter();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_lastParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_lastParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_lastParameter" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->LastParameter();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_isClosed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_isClosed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_isClosed" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsClosed();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_isPeriodic(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_isPeriodic.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_isPeriodic" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsPeriodic();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_d0(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_d0.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_d0" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellipse_d0" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d0
    arg3 = &argout13;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D0(arg2,*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderSingleValueOutmap for d0
    
    
    jsresult = SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 );
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_d1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  gp_Vec2d *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  gp_Vec2d argout23 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_d1.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_d1" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellipse_d1" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d1
    arg3 = &argout13;
    arg4 = &argout23;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D1(arg2,*arg3,*arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderObjectOutmap for d1
    
    v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();
    obj->Set(SWIGV8_STRING_NEW("p"), SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v1"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg4)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    jsresult = obj;
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_d2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  gp_Vec2d *arg4 = 0 ;
  gp_Vec2d *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  gp_Vec2d argout23 ;
  gp_Vec2d argout33 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_d2.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_d2" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellipse_d2" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d2
    arg3 = &argout13;
    arg4 = &argout23;
    arg5 = &argout33;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D2(arg2,*arg3,*arg4,*arg5);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderObjectOutmap for d2
    
    v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();
    obj->Set(SWIGV8_STRING_NEW("p"), SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v1"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg4)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v2"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg5)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    jsresult = obj;
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_d3(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  gp_Vec2d *arg4 = 0 ;
  gp_Vec2d *arg5 = 0 ;
  gp_Vec2d *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  gp_Vec2d argout23 ;
  gp_Vec2d argout33 ;
  gp_Vec2d argout43 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_d3.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_d3" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellipse_d3" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d3
    arg3 = &argout13;
    arg4 = &argout23;
    arg5 = &argout33;
    arg6 = &argout43;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D3(arg2,*arg3,*arg4,*arg5,*arg6);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderObjectOutmap for d3
    
    v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();
    obj->Set(SWIGV8_STRING_NEW("p"), SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v1"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg4)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v2"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg5)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v3"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg6)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    jsresult = obj;
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_dn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  Standard_Real arg2 ;
  Standard_Integer arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  gp_Vec2d result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_dn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_dn" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellipse_dn" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ellipse_dn" "', argument " "3"" of type '" "Standard_Integer""'");
  } 
  arg3 = (Standard_Integer)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DN(arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d&)(result))), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_transform(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  gp_Trsf2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_transform.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_transform" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ellipse_transform" "', argument " "2"" of type '" "gp_Trsf2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ellipse_transform" "', argument " "2"" of type '" "gp_Trsf2d const &""'"); 
  }
  arg2 = (gp_Trsf2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Transform((gp_Trsf2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Ellipse_copy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom2d_Geometry result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Ellipse_copy.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellipse_copy" "', argument " "1"" of type '" "Geom2d_Ellipse *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Copy();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Geometry *handle = (Handle_Geom2d_Geometry *)new Handle_Geom2d_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Ellipse(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Ellipse(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Ellipse(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Ellipse(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom2d_Ellipse * arg1 = (Geom2d_Ellipse *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_BoundedCurve_endPoint(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BoundedCurve *arg1 = (Geom2d_BoundedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Pnt2d result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BoundedCurve_endPoint.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BoundedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoundedCurve_endPoint" "', argument " "1"" of type '" "Geom2d_BoundedCurve *""'"); 
  }
  arg1 = (Geom2d_BoundedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->EndPoint();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d&)(result))), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BoundedCurve_startPoint(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BoundedCurve *arg1 = (Geom2d_BoundedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Pnt2d result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BoundedCurve_startPoint.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BoundedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoundedCurve_startPoint" "', argument " "1"" of type '" "Geom2d_BoundedCurve *""'"); 
  }
  arg1 = (Geom2d_BoundedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->StartPoint();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d&)(result))), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_BoundedCurve(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_BoundedCurve(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_BoundedCurve(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_BoundedCurve(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom2d_BoundedCurve * arg1 = (Geom2d_BoundedCurve *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_BoundedCurve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class BoundedCurve can not be instantiated");
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TrimmedCurve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom2d_Curve *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Boolean arg4 = (Standard_Boolean) (Standard_Boolean)true ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  Geom2d_TrimmedCurve *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TrimmedCurve.");
  {
    // handlein
    void *argpointer ;
    int res = SWIG_ConvertPtr(args[0]->ToObject()->Get(SWIGV8_SYMBOL_NEW("_handle")), &argpointer, SWIGTYPE_p_Handle_Standard_Transient, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_TrimmedCurve" "', argument " "1"" of type '" "Geom2d_Curve""'");
    }
    arg1 = (Handle_Geom2d_Curve *)(argpointer);
  }
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TrimmedCurve" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TrimmedCurve" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TrimmedCurve" "', argument " "4"" of type '" "Standard_Boolean""'");
  } 
  arg4 = (Standard_Boolean)(val4);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom2d_TrimmedCurve *)new Geom2d_TrimmedCurve((Handle_Geom2d_Curve const &)*arg1,arg2,arg3,arg4);
    // hacked
    Handle_Geom2d_TrimmedCurve *handle;
    handle = (Handle_Geom2d_TrimmedCurve *)new Handle_Geom2d_TrimmedCurve((Geom2d_TrimmedCurve const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom2d_TrimmedCurve, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_reverse(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_reverse.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_reverse" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Reverse();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_reversedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_reversedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_reversedParameter" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrimmedCurve_reversedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->ReversedParameter(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_setTrim(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Boolean arg4 = (Standard_Boolean) (Standard_Boolean)true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_setTrim.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_setTrim" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrimmedCurve_setTrim" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TrimmedCurve_setTrim" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TrimmedCurve_setTrim" "', argument " "4"" of type '" "Standard_Boolean""'");
  } 
  arg4 = (Standard_Boolean)(val4);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetTrim(arg2,arg3,arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_basisCurve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom2d_Curve result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_basisCurve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_basisCurve" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->BasisCurve();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Curve *handle = (Handle_Geom2d_Curve *)new Handle_Geom2d_Curve(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_continuity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GeomAbs_Shape result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_continuity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_continuity" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Continuity();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    jsresult = SWIGV8_NUMBER_NEW(static_cast<int>(result));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_isCn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  Standard_Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_isCn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_isCn" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrimmedCurve_isCn" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsCN(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_endPoint(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Pnt2d result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_endPoint.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_endPoint" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->EndPoint();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d&)(result))), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_firstParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_firstParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_firstParameter" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->FirstParameter();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_isClosed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_isClosed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_isClosed" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsClosed();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_isPeriodic(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_isPeriodic.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_isPeriodic" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsPeriodic();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_period(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_period.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_period" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->Period();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_lastParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_lastParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_lastParameter" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->LastParameter();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_startPoint(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Pnt2d result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_startPoint.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_startPoint" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->StartPoint();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d&)(result))), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_d0(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_d0.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_d0" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrimmedCurve_d0" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d0
    arg3 = &argout13;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D0(arg2,*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderSingleValueOutmap for d0
    
    
    jsresult = SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 );
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_d1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  gp_Vec2d *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  gp_Vec2d argout23 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_d1.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_d1" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrimmedCurve_d1" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d1
    arg3 = &argout13;
    arg4 = &argout23;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D1(arg2,*arg3,*arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderObjectOutmap for d1
    
    v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();
    obj->Set(SWIGV8_STRING_NEW("p"), SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v1"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg4)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    jsresult = obj;
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_d2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  gp_Vec2d *arg4 = 0 ;
  gp_Vec2d *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  gp_Vec2d argout23 ;
  gp_Vec2d argout33 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_d2.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_d2" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrimmedCurve_d2" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d2
    arg3 = &argout13;
    arg4 = &argout23;
    arg5 = &argout33;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D2(arg2,*arg3,*arg4,*arg5);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderObjectOutmap for d2
    
    v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();
    obj->Set(SWIGV8_STRING_NEW("p"), SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v1"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg4)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v2"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg5)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    jsresult = obj;
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_d3(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  gp_Vec2d *arg4 = 0 ;
  gp_Vec2d *arg5 = 0 ;
  gp_Vec2d *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  gp_Vec2d argout23 ;
  gp_Vec2d argout33 ;
  gp_Vec2d argout43 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_d3.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_d3" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrimmedCurve_d3" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d3
    arg3 = &argout13;
    arg4 = &argout23;
    arg5 = &argout33;
    arg6 = &argout43;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D3(arg2,*arg3,*arg4,*arg5,*arg6);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderObjectOutmap for d3
    
    v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();
    obj->Set(SWIGV8_STRING_NEW("p"), SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v1"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg4)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v2"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg5)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v3"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg6)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    jsresult = obj;
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_dn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  Standard_Real arg2 ;
  Standard_Integer arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  gp_Vec2d result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_dn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_dn" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrimmedCurve_dn" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TrimmedCurve_dn" "', argument " "3"" of type '" "Standard_Integer""'");
  } 
  arg3 = (Standard_Integer)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DN(arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d&)(result))), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_transform(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  gp_Trsf2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_transform.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_transform" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TrimmedCurve_transform" "', argument " "2"" of type '" "gp_Trsf2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_transform" "', argument " "2"" of type '" "gp_Trsf2d const &""'"); 
  }
  arg2 = (gp_Trsf2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Transform((gp_Trsf2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_transformedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  Standard_Real arg2 ;
  gp_Trsf2d *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_transformedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_transformedParameter" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrimmedCurve_transformedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Trsf2d,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TrimmedCurve_transformedParameter" "', argument " "3"" of type '" "gp_Trsf2d const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_transformedParameter" "', argument " "3"" of type '" "gp_Trsf2d const &""'"); 
  }
  arg3 = (gp_Trsf2d *)(argp3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->TransformedParameter(arg2,(gp_Trsf2d const &)*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_parametricTransformation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  gp_Trsf2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_parametricTransformation.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_parametricTransformation" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TrimmedCurve_parametricTransformation" "', argument " "2"" of type '" "gp_Trsf2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_parametricTransformation" "', argument " "2"" of type '" "gp_Trsf2d const &""'"); 
  }
  arg2 = (gp_Trsf2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->ParametricTransformation((gp_Trsf2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_copy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom2d_Geometry result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TrimmedCurve_copy.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_copy" "', argument " "1"" of type '" "Geom2d_TrimmedCurve *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Copy();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Geometry *handle = (Handle_Geom2d_Geometry *)new Handle_Geom2d_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_makeArcOfCircle__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Circ2d *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Boolean arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  Handle_Geom2d_TrimmedCurve result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Circ2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "1"" of type '" "gp_Circ2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "1"" of type '" "gp_Circ2d const &""'"); 
  }
  arg1 = (gp_Circ2d *)(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "4"" of type '" "Standard_Boolean""'");
  } 
  arg4 = (Standard_Boolean)(val4);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom2d_TrimmedCurve_makeArcOfCircle__SWIG_0((gp_Circ2d const &)*arg1,arg2,arg3,arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_TrimmedCurve *handle = (Handle_Geom2d_TrimmedCurve *)new Handle_Geom2d_TrimmedCurve(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_makeArcOfCircle__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Circ2d *arg1 = 0 ;
  gp_Pnt2d *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Boolean arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  Handle_Geom2d_TrimmedCurve result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Circ2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "1"" of type '" "gp_Circ2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "1"" of type '" "gp_Circ2d const &""'"); 
  }
  arg1 = (gp_Circ2d *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg2 = (gp_Pnt2d *)(argp2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "4"" of type '" "Standard_Boolean""'");
  } 
  arg4 = (Standard_Boolean)(val4);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom2d_TrimmedCurve_makeArcOfCircle__SWIG_1((gp_Circ2d const &)*arg1,(gp_Pnt2d const &)*arg2,arg3,arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_TrimmedCurve *handle = (Handle_Geom2d_TrimmedCurve *)new Handle_Geom2d_TrimmedCurve(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_makeArcOfCircle__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Circ2d *arg1 = 0 ;
  gp_Pnt2d *arg2 = 0 ;
  gp_Pnt2d *arg3 = 0 ;
  Standard_Boolean arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  Handle_Geom2d_TrimmedCurve result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Circ2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "1"" of type '" "gp_Circ2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "1"" of type '" "gp_Circ2d const &""'"); 
  }
  arg1 = (gp_Circ2d *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg2 = (gp_Pnt2d *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg3 = (gp_Pnt2d *)(argp3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "4"" of type '" "Standard_Boolean""'");
  } 
  arg4 = (Standard_Boolean)(val4);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom2d_TrimmedCurve_makeArcOfCircle__SWIG_2((gp_Circ2d const &)*arg1,(gp_Pnt2d const &)*arg2,(gp_Pnt2d const &)*arg3,arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_TrimmedCurve *handle = (Handle_Geom2d_TrimmedCurve *)new Handle_Geom2d_TrimmedCurve(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_makeArcOfCircle__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Pnt2d *arg1 = 0 ;
  gp_Pnt2d *arg2 = 0 ;
  gp_Pnt2d *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Handle_Geom2d_TrimmedCurve result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "1"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "1"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg1 = (gp_Pnt2d *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg2 = (gp_Pnt2d *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg3 = (gp_Pnt2d *)(argp3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom2d_TrimmedCurve_makeArcOfCircle__SWIG_3((gp_Pnt2d const &)*arg1,(gp_Pnt2d const &)*arg2,(gp_Pnt2d const &)*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_TrimmedCurve *handle = (Handle_Geom2d_TrimmedCurve *)new Handle_Geom2d_TrimmedCurve(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_makeArcOfCircle__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Pnt2d *arg1 = 0 ;
  gp_Vec2d *arg2 = 0 ;
  gp_Pnt2d *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Handle_Geom2d_TrimmedCurve result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "1"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "1"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg1 = (gp_Pnt2d *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_gp_Vec2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "2"" of type '" "gp_Vec2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "2"" of type '" "gp_Vec2d const &""'"); 
  }
  arg2 = (gp_Vec2d *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeArcOfCircle" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg3 = (gp_Pnt2d *)(argp3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom2d_TrimmedCurve_makeArcOfCircle__SWIG_4((gp_Pnt2d const &)*arg1,(gp_Vec2d const &)*arg2,(gp_Pnt2d const &)*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_TrimmedCurve *handle = (Handle_Geom2d_TrimmedCurve *)new Handle_Geom2d_TrimmedCurve(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve__wrap_TrimmedCurve_makeArcOfCircle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TrimmedCurve_makeArcOfCircle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TrimmedCurve_makeArcOfCircle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TrimmedCurve_makeArcOfCircle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TrimmedCurve_makeArcOfCircle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TrimmedCurve_makeArcOfCircle__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TrimmedCurve_makeArcOfCircle__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TrimmedCurve_makeArcOfCircle__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TrimmedCurve_makeArcOfCircle__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TrimmedCurve_makeArcOfCircle__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TrimmedCurve_makeArcOfCircle__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function makeArcOfCircle.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_makeSegment__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Pnt2d *arg1 = 0 ;
  gp_Pnt2d *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Handle_Geom2d_TrimmedCurve result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_makeSegment" "', argument " "1"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeSegment" "', argument " "1"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg1 = (gp_Pnt2d *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TrimmedCurve_makeSegment" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeSegment" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg2 = (gp_Pnt2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom2d_TrimmedCurve_makeSegment__SWIG_0((gp_Pnt2d const &)*arg1,(gp_Pnt2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_TrimmedCurve *handle = (Handle_Geom2d_TrimmedCurve *)new Handle_Geom2d_TrimmedCurve(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_makeSegment__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Pnt2d *arg1 = 0 ;
  gp_Dir2d *arg2 = 0 ;
  gp_Pnt2d *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Handle_Geom2d_TrimmedCurve result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_makeSegment" "', argument " "1"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeSegment" "', argument " "1"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg1 = (gp_Pnt2d *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_gp_Dir2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TrimmedCurve_makeSegment" "', argument " "2"" of type '" "gp_Dir2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeSegment" "', argument " "2"" of type '" "gp_Dir2d const &""'"); 
  }
  arg2 = (gp_Dir2d *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TrimmedCurve_makeSegment" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeSegment" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg3 = (gp_Pnt2d *)(argp3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom2d_TrimmedCurve_makeSegment__SWIG_1((gp_Pnt2d const &)*arg1,(gp_Dir2d const &)*arg2,(gp_Pnt2d const &)*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_TrimmedCurve *handle = (Handle_Geom2d_TrimmedCurve *)new Handle_Geom2d_TrimmedCurve(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_makeSegment__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Lin2d *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  Handle_Geom2d_TrimmedCurve result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Lin2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_makeSegment" "', argument " "1"" of type '" "gp_Lin2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeSegment" "', argument " "1"" of type '" "gp_Lin2d const &""'"); 
  }
  arg1 = (gp_Lin2d *)(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrimmedCurve_makeSegment" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TrimmedCurve_makeSegment" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom2d_TrimmedCurve_makeSegment__SWIG_2((gp_Lin2d const &)*arg1,arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_TrimmedCurve *handle = (Handle_Geom2d_TrimmedCurve *)new Handle_Geom2d_TrimmedCurve(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_makeSegment__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Lin2d *arg1 = 0 ;
  gp_Pnt2d *arg2 = 0 ;
  Standard_Real arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  Handle_Geom2d_TrimmedCurve result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Lin2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_makeSegment" "', argument " "1"" of type '" "gp_Lin2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeSegment" "', argument " "1"" of type '" "gp_Lin2d const &""'"); 
  }
  arg1 = (gp_Lin2d *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TrimmedCurve_makeSegment" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeSegment" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg2 = (gp_Pnt2d *)(argp2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TrimmedCurve_makeSegment" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom2d_TrimmedCurve_makeSegment__SWIG_3((gp_Lin2d const &)*arg1,(gp_Pnt2d const &)*arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_TrimmedCurve *handle = (Handle_Geom2d_TrimmedCurve *)new Handle_Geom2d_TrimmedCurve(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve_makeSegment__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gp_Lin2d *arg1 = 0 ;
  gp_Pnt2d *arg2 = 0 ;
  gp_Pnt2d *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Handle_Geom2d_TrimmedCurve result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gp_Lin2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrimmedCurve_makeSegment" "', argument " "1"" of type '" "gp_Lin2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeSegment" "', argument " "1"" of type '" "gp_Lin2d const &""'"); 
  }
  arg1 = (gp_Lin2d *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TrimmedCurve_makeSegment" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeSegment" "', argument " "2"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg2 = (gp_Pnt2d *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TrimmedCurve_makeSegment" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrimmedCurve_makeSegment" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg3 = (gp_Pnt2d *)(argp3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = Geom2d_TrimmedCurve_makeSegment__SWIG_4((gp_Lin2d const &)*arg1,(gp_Pnt2d const &)*arg2,(gp_Pnt2d const &)*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_TrimmedCurve *handle = (Handle_Geom2d_TrimmedCurve *)new Handle_Geom2d_TrimmedCurve(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TrimmedCurve__wrap_TrimmedCurve_makeSegment(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TrimmedCurve_makeSegment__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TrimmedCurve_makeSegment__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TrimmedCurve_makeSegment__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TrimmedCurve_makeSegment__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TrimmedCurve_makeSegment__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TrimmedCurve_makeSegment__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TrimmedCurve_makeSegment__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TrimmedCurve_makeSegment__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TrimmedCurve_makeSegment__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TrimmedCurve_makeSegment__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function makeSegment.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TrimmedCurve(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TrimmedCurve(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TrimmedCurve(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TrimmedCurve(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom2d_TrimmedCurve * arg1 = (Geom2d_TrimmedCurve *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_BezierCurve__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  TColgp_Array1OfPnt2d *arg1 = 0 ;
  Geom2d_BezierCurve *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_BezierCurve__SWIG_0.");
  {
    // typemap inmap
    v8::Handle<v8::Array> array = v8::Handle<v8::Array>::Cast(args[0]);
    int length = array->Get(SWIGV8_SYMBOL_NEW("length"))->ToObject()->Uint32Value();
    
    TColgp_Array1OfPnt2d * list = new TColgp_Array1OfPnt2d(1, length);
    gp_Pnt2d *argpointer;
    
    for(int i = 1; i <= length; i++){
      SWIG_ConvertPtr(array->Get(i-1), (void **)&argpointer, SWIGTYPE_p_gp_Pnt2d, 0);
      list->SetValue(i, (const gp_Pnt2d &)*argpointer);
    }
    
    arg1 = list;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom2d_BezierCurve *)new Geom2d_BezierCurve((TColgp_Array1OfPnt2d const &)*arg1);
    // hacked
    Handle_Geom2d_BezierCurve *handle;
    handle = (Handle_Geom2d_BezierCurve *)new Handle_Geom2d_BezierCurve((Geom2d_BezierCurve const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom2d_BezierCurve, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_BezierCurve__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  TColgp_Array1OfPnt2d *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  Geom2d_BezierCurve *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_BezierCurve__SWIG_1.");
  {
    // typemap inmap
    v8::Handle<v8::Array> array = v8::Handle<v8::Array>::Cast(args[0]);
    int length = array->Get(SWIGV8_SYMBOL_NEW("length"))->ToObject()->Uint32Value();
    
    TColgp_Array1OfPnt2d * list = new TColgp_Array1OfPnt2d(1, length);
    gp_Pnt2d *argpointer;
    
    for(int i = 1; i <= length; i++){
      SWIG_ConvertPtr(array->Get(i-1), (void **)&argpointer, SWIGTYPE_p_gp_Pnt2d, 0);
      list->SetValue(i, (const gp_Pnt2d &)*argpointer);
    }
    
    arg1 = list;
  }
  {
    // typemap inmap
    v8::Handle<v8::Array> array = v8::Handle<v8::Array>::Cast(args[1]);
    int length = array->Get(SWIGV8_SYMBOL_NEW("length"))->ToObject()->Uint32Value();
    
    TColStd_Array1OfReal * list = new TColStd_Array1OfReal(1, length);
    Standard_Real argpointer;
    
    for(int i = 1; i <= length; i++){
      SWIG_AsVal_double (array->Get(i-1), &argpointer);
      list->SetValue(i, (const Standard_Real &)argpointer);
    }
    
    arg2 = list;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Geom2d_BezierCurve *)new Geom2d_BezierCurve((TColgp_Array1OfPnt2d const &)*arg1,(TColStd_Array1OfReal const &)*arg2);
    // hacked
    Handle_Geom2d_BezierCurve *handle;
    handle = (Handle_Geom2d_BezierCurve *)new Handle_Geom2d_BezierCurve((Geom2d_BezierCurve const *)(result));
    self->ToObject()->Set(
      SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Geom2d_BezierCurve, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_BezierCurve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_BezierCurve__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_BezierCurve__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_BezierCurve__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_BezierCurve__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_BezierCurve");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_increase(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  Standard_Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_increase.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_increase" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BezierCurve_increase" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Increase(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_insertPoleAfter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  Standard_Integer arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  Standard_Real arg4 = (Standard_Real) (Standard_Real)1. ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_insertPoleAfter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_insertPoleAfter" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BezierCurve_insertPoleAfter" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BezierCurve_insertPoleAfter" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BezierCurve_insertPoleAfter" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg3 = (gp_Pnt2d *)(argp3);
  ecode4 = SWIG_AsVal_double(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BezierCurve_insertPoleAfter" "', argument " "4"" of type '" "Standard_Real""'");
  } 
  arg4 = (Standard_Real)(val4);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->InsertPoleAfter(arg2,(gp_Pnt2d const &)*arg3,arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_insertPoleBefore(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  Standard_Integer arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  Standard_Real arg4 = (Standard_Real) (Standard_Real)1. ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_insertPoleBefore.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_insertPoleBefore" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BezierCurve_insertPoleBefore" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BezierCurve_insertPoleBefore" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BezierCurve_insertPoleBefore" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg3 = (gp_Pnt2d *)(argp3);
  ecode4 = SWIG_AsVal_double(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BezierCurve_insertPoleBefore" "', argument " "4"" of type '" "Standard_Real""'");
  } 
  arg4 = (Standard_Real)(val4);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->InsertPoleBefore(arg2,(gp_Pnt2d const &)*arg3,arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_removePole(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  Standard_Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_removePole.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_removePole" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BezierCurve_removePole" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->RemovePole(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_reverse(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_reverse.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_reverse" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Reverse();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_reversedParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  Standard_Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_reversedParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_reversedParameter" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BezierCurve_reversedParameter" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->ReversedParameter(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_segment(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_segment.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_segment" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BezierCurve_segment" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BezierCurve_segment" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Segment(arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_setPole__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  Standard_Integer arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_setPole" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BezierCurve_setPole" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BezierCurve_setPole" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BezierCurve_setPole" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg3 = (gp_Pnt2d *)(argp3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetPole(arg2,(gp_Pnt2d const &)*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_setPole__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  Standard_Integer arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  Standard_Real arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_setPole" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BezierCurve_setPole" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_gp_Pnt2d,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BezierCurve_setPole" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BezierCurve_setPole" "', argument " "3"" of type '" "gp_Pnt2d const &""'"); 
  }
  arg3 = (gp_Pnt2d *)(argp3);
  ecode4 = SWIG_AsVal_double(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BezierCurve_setPole" "', argument " "4"" of type '" "Standard_Real""'");
  } 
  arg4 = (Standard_Real)(val4);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetPole(arg2,(gp_Pnt2d const &)*arg3,arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve__wrap_BezierCurve_setPole(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_BezierCurve_setPole__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_BezierCurve_setPole__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_BezierCurve_setPole__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_BezierCurve_setPole__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setPole.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_setWeight(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  Standard_Integer arg2 ;
  Standard_Real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_setWeight.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_setWeight" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BezierCurve_setWeight" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BezierCurve_setWeight" "', argument " "3"" of type '" "Standard_Real""'");
  } 
  arg3 = (Standard_Real)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->SetWeight(arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_isClosed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_isClosed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_isClosed" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsClosed();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_isCn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  Standard_Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_isCn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_isCn" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BezierCurve_isCn" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsCN(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_isPeriodic(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_isPeriodic.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_isPeriodic" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsPeriodic();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_isRational(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Boolean result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_isRational.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_isRational" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Boolean)(arg1)->IsRational();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_continuity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GeomAbs_Shape result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_continuity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_continuity" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Continuity();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    jsresult = SWIGV8_NUMBER_NEW(static_cast<int>(result));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_degree(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Integer result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_degree.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_degree" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Integer)(arg1)->Degree();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_d0(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_d0.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_d0" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BezierCurve_d0" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d0
    arg3 = &argout13;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D0(arg2,*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderSingleValueOutmap for d0
    
    
    jsresult = SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 );
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_d1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  gp_Vec2d *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  gp_Vec2d argout23 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_d1.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_d1" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BezierCurve_d1" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d1
    arg3 = &argout13;
    arg4 = &argout23;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D1(arg2,*arg3,*arg4);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderObjectOutmap for d1
    
    v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();
    obj->Set(SWIGV8_STRING_NEW("p"), SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v1"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg4)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    jsresult = obj;
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_d2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  gp_Vec2d *arg4 = 0 ;
  gp_Vec2d *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  gp_Vec2d argout23 ;
  gp_Vec2d argout33 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_d2.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_d2" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BezierCurve_d2" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d2
    arg3 = &argout13;
    arg4 = &argout23;
    arg5 = &argout33;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D2(arg2,*arg3,*arg4,*arg5);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderObjectOutmap for d2
    
    v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();
    obj->Set(SWIGV8_STRING_NEW("p"), SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v1"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg4)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v2"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg5)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    jsresult = obj;
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_d3(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d *arg3 = 0 ;
  gp_Vec2d *arg4 = 0 ;
  gp_Vec2d *arg5 = 0 ;
  gp_Vec2d *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d argout13 ;
  gp_Vec2d argout23 ;
  gp_Vec2d argout33 ;
  gp_Vec2d argout43 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_d3.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_d3" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BezierCurve_d3" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for d3
    arg3 = &argout13;
    arg4 = &argout23;
    arg5 = &argout33;
    arg6 = &argout43;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->D3(arg2,*arg3,*arg4,*arg5,*arg6);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderObjectOutmap for d3
    
    v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();
    obj->Set(SWIGV8_STRING_NEW("p"), SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d)*arg3)), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v1"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg4)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v2"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg5)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    obj->Set(SWIGV8_STRING_NEW("v3"), SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d)*arg6)), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 ));
    jsresult = obj;
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_dn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  Standard_Real arg2 ;
  Standard_Integer arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  gp_Vec2d result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_dn.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_dn" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BezierCurve_dn" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BezierCurve_dn" "', argument " "3"" of type '" "Standard_Integer""'");
  } 
  arg3 = (Standard_Integer)(val3);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->DN(arg2,arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Vec2d((const gp_Vec2d&)(result))), SWIGTYPE_p_gp_Vec2d, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_endPoint(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Pnt2d result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_endPoint.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_endPoint" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->EndPoint();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d&)(result))), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_firstParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_firstParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_firstParameter" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->FirstParameter();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_lastParameter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_lastParameter.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_lastParameter" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->LastParameter();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_nbPoles(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Standard_Integer result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_nbPoles.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_nbPoles" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Integer)(arg1)->NbPoles();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_pole(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  Standard_Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  gp_Pnt2d result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_pole.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_pole" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BezierCurve_pole" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Pole(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d&)(result))), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_poles(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  TColgp_Array1OfPnt2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_poles.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_poles" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  {
    // renderArgoutInit for poles
    arg2 = new TColgp_Array1OfPnt2d(1,arg1->NbPoles());
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Poles(*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderSingleValueOutmap for poles
    
    v8::Handle<v8::Value> value;
    v8::Local<v8::Array> array = v8::Array::New(
      v8::Isolate::GetCurrent(), arg2->Length());
    int length = arg2->Length();
    for(int i = 1; i <= length; i++){
      gp_Pnt2d * val = new gp_Pnt2d(arg2->Value(i));
      array->Set(i-1, SWIG_NewPointerObj((gp_Pnt2d*)(val), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 ));
    }
    value = array;
    
    jsresult = value;
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_startPoint(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gp_Pnt2d result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_startPoint.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_startPoint" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->StartPoint();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_NewPointerObj((new gp_Pnt2d((const gp_Pnt2d&)(result))), SWIGTYPE_p_gp_Pnt2d, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_weight(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  Standard_Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Standard_Real result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_weight.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_weight" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BezierCurve_weight" "', argument " "2"" of type '" "Standard_Integer""'");
  } 
  arg2 = (Standard_Integer)(val2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Real)(arg1)->Weight(arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_weights(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_weights.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_weights" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  {
    // renderArgoutInit for weights
    arg2 = new TColStd_Array1OfReal(1,arg1->NbPoles());
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Weights(*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderSingleValueOutmap for weights
    
    v8::Handle<v8::Value> value;
    v8::Local<v8::Array> array = v8::Array::New(
      v8::Isolate::GetCurrent(), arg2->Length());
    int length = arg2->Length();
    for(int i = 1; i <= length; i++){
      array->Set(i-1, SWIGV8_NUMBER_NEW(arg2->Value(i)));
    }
    value = array;
    
    jsresult = value;
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_transform(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  gp_Trsf2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_transform.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_transform" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_gp_Trsf2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BezierCurve_transform" "', argument " "2"" of type '" "gp_Trsf2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BezierCurve_transform" "', argument " "2"" of type '" "gp_Trsf2d const &""'"); 
  }
  arg2 = (gp_Trsf2d *)(argp2);
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Transform((gp_Trsf2d const &)*arg2);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_maxDegree(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Standard_Integer result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_maxDegree.");
  
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Standard_Integer)Geom2d_BezierCurve::MaxDegree();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_resolution(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  Standard_Real arg2 ;
  Standard_Real *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Standard_Real argout13 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_resolution.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_resolution" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BezierCurve_resolution" "', argument " "2"" of type '" "Standard_Real""'");
  } 
  arg2 = (Standard_Real)(val2);
  {
    // renderArgoutInit for resolution
    arg3 = &argout13;
  }
  {
    try
    {
      OCC_CATCH_SIGNALS
      (arg1)->Resolution(arg2,*arg3);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  {
    // renderSingleValueOutmap for resolution
    
    
    jsresult = SWIGV8_NUMBER_NEW(*arg3);
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BezierCurve_copy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom2d_Geometry result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BezierCurve_copy.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BezierCurve_copy" "', argument " "1"" of type '" "Geom2d_BezierCurve *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (arg1)->Copy();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  {
    // lookup type
    std::string name(result->DynamicType()->Name());
    const std::string lookup_typename = name + " *";
    swig_type_info * const outtype = SWIG_TypeQuery(lookup_typename.c_str());
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), outtype, 0);
    
    // attach handle
    Handle_Geom2d_Geometry *handle = (Handle_Geom2d_Geometry *)new Handle_Geom2d_Geometry(result);
    jsresult->ToObject()->Set(SWIGV8_SYMBOL_NEW("_handle"), SWIG_NewFunctionPtrObj(handle, SWIGTYPE_p_Handle_Standard_Transient));
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_BezierCurve(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_BezierCurve(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_BezierCurve(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_BezierCurve(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Geom2d_BezierCurve * arg1 = (Geom2d_BezierCurve *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_Geometry__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom2d_Geometry *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Geometry__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom2d_Geometry *)new Handle_Geom2d_Geometry();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom2d_Geometry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Geometry__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom2d_Geometry *arg1 = (Geom2d_Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom2d_Geometry *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Geometry__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom2d_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Geometry" "', argument " "1"" of type '" "Geom2d_Geometry const *""'"); 
  }
  arg1 = (Geom2d_Geometry *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom2d_Geometry *)new Handle_Geom2d_Geometry((Geom2d_Geometry const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom2d_Geometry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Geometry(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Geometry__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Geometry__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Geometry__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Geometry__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_Geometry");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_Geometry(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_Geometry(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_Geometry(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_Geometry(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom2d_Geometry * arg1 = (Handle_Geom2d_Geometry *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_Curve__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom2d_Curve *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Curve__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom2d_Curve *)new Handle_Geom2d_Curve();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom2d_Curve, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Curve__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom2d_Curve *arg1 = (Geom2d_Curve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom2d_Curve *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Curve__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom2d_Curve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Curve" "', argument " "1"" of type '" "Geom2d_Curve const *""'"); 
  }
  arg1 = (Geom2d_Curve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom2d_Curve *)new Handle_Geom2d_Curve((Geom2d_Curve const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom2d_Curve, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Curve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Curve__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Curve__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Curve__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Curve__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_Curve");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_Curve(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_Curve(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_Curve(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_Curve(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom2d_Curve * arg1 = (Handle_Geom2d_Curve *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_Line__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom2d_Line *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Line__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom2d_Line *)new Handle_Geom2d_Line();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom2d_Line, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Line__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom2d_Line *arg1 = (Geom2d_Line *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom2d_Line *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Line__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom2d_Line, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Line" "', argument " "1"" of type '" "Geom2d_Line const *""'"); 
  }
  arg1 = (Geom2d_Line *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom2d_Line *)new Handle_Geom2d_Line((Geom2d_Line const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom2d_Line, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Line(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Line__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Line__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Line__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Line__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_Line");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_Line(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_Line(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_Line(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_Line(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom2d_Line * arg1 = (Handle_Geom2d_Line *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_Conic__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom2d_Conic *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Conic__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom2d_Conic *)new Handle_Geom2d_Conic();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom2d_Conic, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Conic__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom2d_Conic *arg1 = (Geom2d_Conic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom2d_Conic *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Conic__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom2d_Conic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Conic" "', argument " "1"" of type '" "Geom2d_Conic const *""'"); 
  }
  arg1 = (Geom2d_Conic *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom2d_Conic *)new Handle_Geom2d_Conic((Geom2d_Conic const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom2d_Conic, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Conic(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Conic__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Conic__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Conic__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Conic__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_Conic");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_Conic(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_Conic(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_Conic(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_Conic(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom2d_Conic * arg1 = (Handle_Geom2d_Conic *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_Circle__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom2d_Circle *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Circle__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom2d_Circle *)new Handle_Geom2d_Circle();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom2d_Circle, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Circle__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom2d_Circle *arg1 = (Geom2d_Circle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom2d_Circle *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Circle__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom2d_Circle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Circle" "', argument " "1"" of type '" "Geom2d_Circle const *""'"); 
  }
  arg1 = (Geom2d_Circle *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom2d_Circle *)new Handle_Geom2d_Circle((Geom2d_Circle const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom2d_Circle, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Circle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Circle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Circle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Circle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Circle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_Circle");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_Circle(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_Circle(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_Circle(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_Circle(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom2d_Circle * arg1 = (Handle_Geom2d_Circle *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_Ellipse__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom2d_Ellipse *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Ellipse__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom2d_Ellipse *)new Handle_Geom2d_Ellipse();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom2d_Ellipse, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Ellipse__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom2d_Ellipse *arg1 = (Geom2d_Ellipse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom2d_Ellipse *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_Ellipse__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom2d_Ellipse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Ellipse" "', argument " "1"" of type '" "Geom2d_Ellipse const *""'"); 
  }
  arg1 = (Geom2d_Ellipse *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom2d_Ellipse *)new Handle_Geom2d_Ellipse((Geom2d_Ellipse const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom2d_Ellipse, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_Ellipse(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Ellipse__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Ellipse__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_Ellipse__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_Ellipse__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_Ellipse");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_Ellipse(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_Ellipse(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_Ellipse(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_Ellipse(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom2d_Ellipse * arg1 = (Handle_Geom2d_Ellipse *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_BoundedCurve__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom2d_BoundedCurve *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_BoundedCurve__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom2d_BoundedCurve *)new Handle_Geom2d_BoundedCurve();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom2d_BoundedCurve, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_BoundedCurve__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom2d_BoundedCurve *arg1 = (Geom2d_BoundedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom2d_BoundedCurve *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_BoundedCurve__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom2d_BoundedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_BoundedCurve" "', argument " "1"" of type '" "Geom2d_BoundedCurve const *""'"); 
  }
  arg1 = (Geom2d_BoundedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom2d_BoundedCurve *)new Handle_Geom2d_BoundedCurve((Geom2d_BoundedCurve const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom2d_BoundedCurve, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_BoundedCurve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_BoundedCurve__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_BoundedCurve__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_BoundedCurve__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_BoundedCurve__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_BoundedCurve");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_BoundedCurve(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_BoundedCurve(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_BoundedCurve(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_BoundedCurve(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom2d_BoundedCurve * arg1 = (Handle_Geom2d_BoundedCurve *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_TrimmedCurve__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom2d_TrimmedCurve *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_TrimmedCurve__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom2d_TrimmedCurve *)new Handle_Geom2d_TrimmedCurve();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom2d_TrimmedCurve, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_TrimmedCurve__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom2d_TrimmedCurve *arg1 = (Geom2d_TrimmedCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom2d_TrimmedCurve *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_TrimmedCurve__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom2d_TrimmedCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_TrimmedCurve" "', argument " "1"" of type '" "Geom2d_TrimmedCurve const *""'"); 
  }
  arg1 = (Geom2d_TrimmedCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom2d_TrimmedCurve *)new Handle_Geom2d_TrimmedCurve((Geom2d_TrimmedCurve const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom2d_TrimmedCurve, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_TrimmedCurve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_TrimmedCurve__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_TrimmedCurve__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_TrimmedCurve__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_TrimmedCurve__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_TrimmedCurve");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_TrimmedCurve(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_TrimmedCurve(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_TrimmedCurve(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_TrimmedCurve(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom2d_TrimmedCurve * arg1 = (Handle_Geom2d_TrimmedCurve *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Handle_BezierCurve__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Handle_Geom2d_BezierCurve *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_BezierCurve__SWIG_0.");
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom2d_BezierCurve *)new Handle_Geom2d_BezierCurve();
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom2d_BezierCurve, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_BezierCurve__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Geom2d_BezierCurve *arg1 = (Geom2d_BezierCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Handle_Geom2d_BezierCurve *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Handle_BezierCurve__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Geom2d_BezierCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_BezierCurve" "', argument " "1"" of type '" "Geom2d_BezierCurve const *""'"); 
  }
  arg1 = (Geom2d_BezierCurve *)(argp1);
  {
    try
    {
      OCC_CATCH_SIGNALS
      result = (Handle_Geom2d_BezierCurve *)new Handle_Geom2d_BezierCurve((Geom2d_BezierCurve const *)arg1);
    }
    catch(Standard_Failure)
    {
      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8(args.GetIsolate(), GetErrorMessage()));
      return;
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Handle_Geom2d_BezierCurve, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Handle_BezierCurve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_BezierCurve__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_BezierCurve__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Handle_BezierCurve__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Handle_BezierCurve__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Handle_BezierCurve");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Handle_BezierCurve(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Handle_BezierCurve(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Handle_BezierCurve(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Handle_BezierCurve(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          Handle_Geom2d_BezierCurve * arg1 = (Handle_Geom2d_BezierCurve *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Geom2d_EllipseTo_p_Geom2d_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom2d_Curve *) (Geom2d_Conic *) ((Geom2d_Ellipse *) x));
}
static void *_p_Geom2d_ConicTo_p_Geom2d_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom2d_Curve *)  ((Geom2d_Conic *) x));
}
static void *_p_Geom2d_BoundedCurveTo_p_Geom2d_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom2d_Curve *)  ((Geom2d_BoundedCurve *) x));
}
static void *_p_Geom2d_TrimmedCurveTo_p_Geom2d_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom2d_Curve *) (Geom2d_BoundedCurve *) ((Geom2d_TrimmedCurve *) x));
}
static void *_p_Geom2d_BezierCurveTo_p_Geom2d_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom2d_Curve *) (Geom2d_BoundedCurve *) ((Geom2d_BezierCurve *) x));
}
static void *_p_Geom2d_LineTo_p_Geom2d_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom2d_Curve *)  ((Geom2d_Line *) x));
}
static void *_p_Geom2d_CircleTo_p_Geom2d_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom2d_Curve *) (Geom2d_Conic *) ((Geom2d_Circle *) x));
}
static void *_p_Handle_Geom2d_EllipseTo_p_Handle_Geom2d_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom2d_Curve *) (Handle_Geom2d_Conic *) ((Handle_Geom2d_Ellipse *) x));
}
static void *_p_Handle_Geom2d_ConicTo_p_Handle_Geom2d_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom2d_Curve *)  ((Handle_Geom2d_Conic *) x));
}
static void *_p_Handle_Geom2d_BoundedCurveTo_p_Handle_Geom2d_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom2d_Curve *)  ((Handle_Geom2d_BoundedCurve *) x));
}
static void *_p_Handle_Geom2d_TrimmedCurveTo_p_Handle_Geom2d_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom2d_Curve *) (Handle_Geom2d_BoundedCurve *) ((Handle_Geom2d_TrimmedCurve *) x));
}
static void *_p_Handle_Geom2d_BezierCurveTo_p_Handle_Geom2d_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom2d_Curve *) (Handle_Geom2d_BoundedCurve *) ((Handle_Geom2d_BezierCurve *) x));
}
static void *_p_Handle_Geom2d_LineTo_p_Handle_Geom2d_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom2d_Curve *)  ((Handle_Geom2d_Line *) x));
}
static void *_p_Handle_Geom2d_CircleTo_p_Handle_Geom2d_Curve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom2d_Curve *) (Handle_Geom2d_Conic *) ((Handle_Geom2d_Circle *) x));
}
static void *_p_Geom2d_EllipseTo_p_Geom2d_Conic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom2d_Conic *)  ((Geom2d_Ellipse *) x));
}
static void *_p_Geom2d_CircleTo_p_Geom2d_Conic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom2d_Conic *)  ((Geom2d_Circle *) x));
}
static void *_p_Handle_Geom2d_EllipseTo_p_Handle_Geom2d_Conic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom2d_Conic *)  ((Handle_Geom2d_Ellipse *) x));
}
static void *_p_Handle_Geom2d_CircleTo_p_Handle_Geom2d_Conic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom2d_Conic *)  ((Handle_Geom2d_Circle *) x));
}
static void *_p_Geom2d_CurveTo_p_Geom2d_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom2d_Geometry *)  ((Geom2d_Curve *) x));
}
static void *_p_Geom2d_EllipseTo_p_Geom2d_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom2d_Geometry *) (Geom2d_Curve *)(Geom2d_Conic *) ((Geom2d_Ellipse *) x));
}
static void *_p_Geom2d_ConicTo_p_Geom2d_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom2d_Geometry *) (Geom2d_Curve *) ((Geom2d_Conic *) x));
}
static void *_p_Geom2d_BoundedCurveTo_p_Geom2d_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom2d_Geometry *) (Geom2d_Curve *) ((Geom2d_BoundedCurve *) x));
}
static void *_p_Geom2d_TrimmedCurveTo_p_Geom2d_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom2d_Geometry *) (Geom2d_Curve *)(Geom2d_BoundedCurve *) ((Geom2d_TrimmedCurve *) x));
}
static void *_p_Geom2d_BezierCurveTo_p_Geom2d_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom2d_Geometry *) (Geom2d_Curve *)(Geom2d_BoundedCurve *) ((Geom2d_BezierCurve *) x));
}
static void *_p_Geom2d_LineTo_p_Geom2d_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom2d_Geometry *) (Geom2d_Curve *) ((Geom2d_Line *) x));
}
static void *_p_Geom2d_CircleTo_p_Geom2d_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom2d_Geometry *) (Geom2d_Curve *)(Geom2d_Conic *) ((Geom2d_Circle *) x));
}
static void *_p_Handle_Geom2d_CurveTo_p_Handle_Geom2d_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom2d_Geometry *)  ((Handle_Geom2d_Curve *) x));
}
static void *_p_Handle_Geom2d_EllipseTo_p_Handle_Geom2d_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom2d_Geometry *) (Handle_Geom2d_Curve *)(Handle_Geom2d_Conic *) ((Handle_Geom2d_Ellipse *) x));
}
static void *_p_Handle_Geom2d_ConicTo_p_Handle_Geom2d_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom2d_Geometry *) (Handle_Geom2d_Curve *) ((Handle_Geom2d_Conic *) x));
}
static void *_p_Handle_Geom2d_BoundedCurveTo_p_Handle_Geom2d_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom2d_Geometry *) (Handle_Geom2d_Curve *) ((Handle_Geom2d_BoundedCurve *) x));
}
static void *_p_Handle_Geom2d_TrimmedCurveTo_p_Handle_Geom2d_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom2d_Geometry *) (Handle_Geom2d_Curve *)(Handle_Geom2d_BoundedCurve *) ((Handle_Geom2d_TrimmedCurve *) x));
}
static void *_p_Handle_Geom2d_BezierCurveTo_p_Handle_Geom2d_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom2d_Geometry *) (Handle_Geom2d_Curve *)(Handle_Geom2d_BoundedCurve *) ((Handle_Geom2d_BezierCurve *) x));
}
static void *_p_Handle_Geom2d_LineTo_p_Handle_Geom2d_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom2d_Geometry *) (Handle_Geom2d_Curve *) ((Handle_Geom2d_Line *) x));
}
static void *_p_Handle_Geom2d_CircleTo_p_Handle_Geom2d_Geometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom2d_Geometry *) (Handle_Geom2d_Curve *)(Handle_Geom2d_Conic *) ((Handle_Geom2d_Circle *) x));
}
static void *_p_Geom2d_CurveTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *) (Geom2d_Geometry *) ((Geom2d_Curve *) x));
}
static void *_p_Geom2d_EllipseTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *) (Geom2d_Geometry *)(Geom2d_Curve *)(Geom2d_Conic *) ((Geom2d_Ellipse *) x));
}
static void *_p_Geom2d_GeometryTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *)  ((Geom2d_Geometry *) x));
}
static void *_p_Geom2d_ConicTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *) (Geom2d_Geometry *)(Geom2d_Curve *) ((Geom2d_Conic *) x));
}
static void *_p_Geom2d_BoundedCurveTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *) (Geom2d_Geometry *)(Geom2d_Curve *) ((Geom2d_BoundedCurve *) x));
}
static void *_p_Geom2d_TrimmedCurveTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *) (Geom2d_Geometry *)(Geom2d_Curve *)(Geom2d_BoundedCurve *) ((Geom2d_TrimmedCurve *) x));
}
static void *_p_Geom2d_BezierCurveTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *) (Geom2d_Geometry *)(Geom2d_Curve *)(Geom2d_BoundedCurve *) ((Geom2d_BezierCurve *) x));
}
static void *_p_Geom2d_LineTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *) (Geom2d_Geometry *)(Geom2d_Curve *) ((Geom2d_Line *) x));
}
static void *_p_Geom2d_CircleTo_p_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MMgt_TShared *) (Geom2d_Geometry *)(Geom2d_Curve *)(Geom2d_Conic *) ((Geom2d_Circle *) x));
}
static void *_p_Handle_Geom2d_CurveTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *) (Handle_Geom2d_Geometry *) ((Handle_Geom2d_Curve *) x));
}
static void *_p_Handle_Geom2d_EllipseTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *) (Handle_Geom2d_Geometry *)(Handle_Geom2d_Curve *)(Handle_Geom2d_Conic *) ((Handle_Geom2d_Ellipse *) x));
}
static void *_p_Handle_Geom2d_GeometryTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *)  ((Handle_Geom2d_Geometry *) x));
}
static void *_p_Handle_Geom2d_ConicTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *) (Handle_Geom2d_Geometry *)(Handle_Geom2d_Curve *) ((Handle_Geom2d_Conic *) x));
}
static void *_p_Handle_Geom2d_BoundedCurveTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *) (Handle_Geom2d_Geometry *)(Handle_Geom2d_Curve *) ((Handle_Geom2d_BoundedCurve *) x));
}
static void *_p_Handle_Geom2d_TrimmedCurveTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *) (Handle_Geom2d_Geometry *)(Handle_Geom2d_Curve *)(Handle_Geom2d_BoundedCurve *) ((Handle_Geom2d_TrimmedCurve *) x));
}
static void *_p_Handle_Geom2d_BezierCurveTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *) (Handle_Geom2d_Geometry *)(Handle_Geom2d_Curve *)(Handle_Geom2d_BoundedCurve *) ((Handle_Geom2d_BezierCurve *) x));
}
static void *_p_Handle_Geom2d_LineTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *) (Handle_Geom2d_Geometry *)(Handle_Geom2d_Curve *) ((Handle_Geom2d_Line *) x));
}
static void *_p_Handle_Geom2d_CircleTo_p_Handle_MMgt_TShared(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_MMgt_TShared *) (Handle_Geom2d_Geometry *)(Handle_Geom2d_Curve *)(Handle_Geom2d_Conic *) ((Handle_Geom2d_Circle *) x));
}
static void *_p_Geom2d_TrimmedCurveTo_p_Geom2d_BoundedCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom2d_BoundedCurve *)  ((Geom2d_TrimmedCurve *) x));
}
static void *_p_Geom2d_BezierCurveTo_p_Geom2d_BoundedCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Geom2d_BoundedCurve *)  ((Geom2d_BezierCurve *) x));
}
static void *_p_Handle_Geom2d_TrimmedCurveTo_p_Handle_Geom2d_BoundedCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom2d_BoundedCurve *)  ((Handle_Geom2d_TrimmedCurve *) x));
}
static void *_p_Handle_Geom2d_BezierCurveTo_p_Handle_Geom2d_BoundedCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Geom2d_BoundedCurve *)  ((Handle_Geom2d_BezierCurve *) x));
}
static void *_p_MMgt_TSharedTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *)  ((MMgt_TShared *) x));
}
static void *_p_Geom2d_CurveTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *)(Geom2d_Geometry *) ((Geom2d_Curve *) x));
}
static void *_p_Geom2d_EllipseTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *)(Geom2d_Geometry *)(Geom2d_Curve *)(Geom2d_Conic *) ((Geom2d_Ellipse *) x));
}
static void *_p_Geom2d_GeometryTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *) ((Geom2d_Geometry *) x));
}
static void *_p_Geom2d_ConicTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *)(Geom2d_Geometry *)(Geom2d_Curve *) ((Geom2d_Conic *) x));
}
static void *_p_Geom2d_BoundedCurveTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *)(Geom2d_Geometry *)(Geom2d_Curve *) ((Geom2d_BoundedCurve *) x));
}
static void *_p_Geom2d_TrimmedCurveTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *)(Geom2d_Geometry *)(Geom2d_Curve *)(Geom2d_BoundedCurve *) ((Geom2d_TrimmedCurve *) x));
}
static void *_p_Geom2d_BezierCurveTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *)(Geom2d_Geometry *)(Geom2d_Curve *)(Geom2d_BoundedCurve *) ((Geom2d_BezierCurve *) x));
}
static void *_p_Geom2d_LineTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *)(Geom2d_Geometry *)(Geom2d_Curve *) ((Geom2d_Line *) x));
}
static void *_p_Geom2d_CircleTo_p_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Standard_Transient *) (MMgt_TShared *)(Geom2d_Geometry *)(Geom2d_Curve *)(Geom2d_Conic *) ((Geom2d_Circle *) x));
}
static void *_p_Handle_MMgt_TSharedTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *)  ((Handle_MMgt_TShared *) x));
}
static void *_p_Handle_Geom2d_CurveTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *)(Handle_Geom2d_Geometry *) ((Handle_Geom2d_Curve *) x));
}
static void *_p_Handle_Geom2d_EllipseTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *)(Handle_Geom2d_Geometry *)(Handle_Geom2d_Curve *)(Handle_Geom2d_Conic *) ((Handle_Geom2d_Ellipse *) x));
}
static void *_p_Handle_Geom2d_GeometryTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *) ((Handle_Geom2d_Geometry *) x));
}
static void *_p_Handle_Geom2d_ConicTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *)(Handle_Geom2d_Geometry *)(Handle_Geom2d_Curve *) ((Handle_Geom2d_Conic *) x));
}
static void *_p_Handle_Geom2d_BoundedCurveTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *)(Handle_Geom2d_Geometry *)(Handle_Geom2d_Curve *) ((Handle_Geom2d_BoundedCurve *) x));
}
static void *_p_Handle_Geom2d_TrimmedCurveTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *)(Handle_Geom2d_Geometry *)(Handle_Geom2d_Curve *)(Handle_Geom2d_BoundedCurve *) ((Handle_Geom2d_TrimmedCurve *) x));
}
static void *_p_Handle_Geom2d_BezierCurveTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *)(Handle_Geom2d_Geometry *)(Handle_Geom2d_Curve *)(Handle_Geom2d_BoundedCurve *) ((Handle_Geom2d_BezierCurve *) x));
}
static void *_p_Handle_Geom2d_LineTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *)(Handle_Geom2d_Geometry *)(Handle_Geom2d_Curve *) ((Handle_Geom2d_Line *) x));
}
static void *_p_Handle_Geom2d_CircleTo_p_Handle_Standard_Transient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Handle_Standard_Transient *) (Handle_MMgt_TShared *)(Handle_Geom2d_Geometry *)(Handle_Geom2d_Curve *)(Handle_Geom2d_Conic *) ((Handle_Geom2d_Circle *) x));
}
static swig_type_info _swigt__p_Geom2d_BezierCurve = {"_p_Geom2d_BezierCurve", "Geom2d_BezierCurve *|p_Geom2d_BezierCurve", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geom2d_BoundedCurve = {"_p_Geom2d_BoundedCurve", "Geom2d_BoundedCurve *|p_Geom2d_BoundedCurve", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geom2d_Circle = {"_p_Geom2d_Circle", "Geom2d_Circle *|p_Geom2d_Circle", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geom2d_Conic = {"_p_Geom2d_Conic", "p_Geom2d_Conic|Geom2d_Conic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geom2d_Curve = {"_p_Geom2d_Curve", "Geom2d_Curve *|p_Geom2d_Curve", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geom2d_Ellipse = {"_p_Geom2d_Ellipse", "Geom2d_Ellipse *|p_Geom2d_Ellipse", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geom2d_Geometry = {"_p_Geom2d_Geometry", "p_Geom2d_Geometry|Geom2d_Geometry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geom2d_Line = {"_p_Geom2d_Line", "Geom2d_Line *|p_Geom2d_Line", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geom2d_TrimmedCurve = {"_p_Geom2d_TrimmedCurve", "Geom2d_TrimmedCurve *|p_Geom2d_TrimmedCurve", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom2d_BezierCurve = {"_p_Handle_Geom2d_BezierCurve", "p_Handle_Geom2d_BezierCurve", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom2d_BoundedCurve = {"_p_Handle_Geom2d_BoundedCurve", "Handle_Geom2d_BoundedCurve *|p_Handle_Geom2d_BoundedCurve", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom2d_Circle = {"_p_Handle_Geom2d_Circle", "p_Handle_Geom2d_Circle", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom2d_Conic = {"_p_Handle_Geom2d_Conic", "p_Handle_Geom2d_Conic|Handle_Geom2d_Conic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom2d_Curve = {"_p_Handle_Geom2d_Curve", "Handle_Geom2d_Curve *|p_Handle_Geom2d_Curve", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom2d_Ellipse = {"_p_Handle_Geom2d_Ellipse", "p_Handle_Geom2d_Ellipse", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom2d_Geometry = {"_p_Handle_Geom2d_Geometry", "p_Handle_Geom2d_Geometry|Handle_Geom2d_Geometry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom2d_Line = {"_p_Handle_Geom2d_Line", "p_Handle_Geom2d_Line", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Geom2d_TrimmedCurve = {"_p_Handle_Geom2d_TrimmedCurve", "p_Handle_Geom2d_TrimmedCurve", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_MMgt_TShared = {"_p_Handle_MMgt_TShared", "p_Handle_MMgt_TShared|Handle_MMgt_TShared *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handle_Standard_Transient = {"_p_Handle_Standard_Transient", "p_Handle_Standard_Transient|Handle_Standard_Transient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MMgt_TShared = {"_p_MMgt_TShared", "p_MMgt_TShared|MMgt_TShared *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Standard_Transient = {"_p_Standard_Transient", "p_Standard_Transient|Standard_Transient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TColStd_Array1OfReal = {"_p_TColStd_Array1OfReal", "TColStd_Array1OfReal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TColgp_Array1OfPnt2d = {"_p_TColgp_Array1OfPnt2d", "TColgp_Array1OfPnt2d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *|Standard_Boolean *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "Standard_Real *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gp_Ax22d = {"_p_gp_Ax22d", "gp_Ax22d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gp_Ax2d = {"_p_gp_Ax2d", "gp_Ax2d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gp_Circ2d = {"_p_gp_Circ2d", "gp_Circ2d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gp_Dir2d = {"_p_gp_Dir2d", "gp_Dir2d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gp_Elips2d = {"_p_gp_Elips2d", "gp_Elips2d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gp_Lin2d = {"_p_gp_Lin2d", "gp_Lin2d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gp_Pnt2d = {"_p_gp_Pnt2d", "gp_Pnt2d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gp_Trsf2d = {"_p_gp_Trsf2d", "gp_Trsf2d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gp_Vec2d = {"_p_gp_Vec2d", "gp_Vec2d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|Standard_Integer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *|Standard_OStream *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Geom2d_BezierCurve,
  &_swigt__p_Geom2d_BoundedCurve,
  &_swigt__p_Geom2d_Circle,
  &_swigt__p_Geom2d_Conic,
  &_swigt__p_Geom2d_Curve,
  &_swigt__p_Geom2d_Ellipse,
  &_swigt__p_Geom2d_Geometry,
  &_swigt__p_Geom2d_Line,
  &_swigt__p_Geom2d_TrimmedCurve,
  &_swigt__p_Handle_Geom2d_BezierCurve,
  &_swigt__p_Handle_Geom2d_BoundedCurve,
  &_swigt__p_Handle_Geom2d_Circle,
  &_swigt__p_Handle_Geom2d_Conic,
  &_swigt__p_Handle_Geom2d_Curve,
  &_swigt__p_Handle_Geom2d_Ellipse,
  &_swigt__p_Handle_Geom2d_Geometry,
  &_swigt__p_Handle_Geom2d_Line,
  &_swigt__p_Handle_Geom2d_TrimmedCurve,
  &_swigt__p_Handle_MMgt_TShared,
  &_swigt__p_Handle_Standard_Transient,
  &_swigt__p_MMgt_TShared,
  &_swigt__p_Standard_Transient,
  &_swigt__p_TColStd_Array1OfReal,
  &_swigt__p_TColgp_Array1OfPnt2d,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_gp_Ax22d,
  &_swigt__p_gp_Ax2d,
  &_swigt__p_gp_Circ2d,
  &_swigt__p_gp_Dir2d,
  &_swigt__p_gp_Elips2d,
  &_swigt__p_gp_Lin2d,
  &_swigt__p_gp_Pnt2d,
  &_swigt__p_gp_Trsf2d,
  &_swigt__p_gp_Vec2d,
  &_swigt__p_int,
  &_swigt__p_std__ostream,
};

static swig_cast_info _swigc__p_Geom2d_BezierCurve[] = {  {&_swigt__p_Geom2d_BezierCurve, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geom2d_BoundedCurve[] = {  {&_swigt__p_Geom2d_BoundedCurve, 0, 0, 0},  {&_swigt__p_Geom2d_TrimmedCurve, _p_Geom2d_TrimmedCurveTo_p_Geom2d_BoundedCurve, 0, 0},  {&_swigt__p_Geom2d_BezierCurve, _p_Geom2d_BezierCurveTo_p_Geom2d_BoundedCurve, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geom2d_Circle[] = {  {&_swigt__p_Geom2d_Circle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geom2d_Conic[] = {  {&_swigt__p_Geom2d_Ellipse, _p_Geom2d_EllipseTo_p_Geom2d_Conic, 0, 0},  {&_swigt__p_Geom2d_Conic, 0, 0, 0},  {&_swigt__p_Geom2d_Circle, _p_Geom2d_CircleTo_p_Geom2d_Conic, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geom2d_Curve[] = {  {&_swigt__p_Geom2d_Curve, 0, 0, 0},  {&_swigt__p_Geom2d_Ellipse, _p_Geom2d_EllipseTo_p_Geom2d_Curve, 0, 0},  {&_swigt__p_Geom2d_Conic, _p_Geom2d_ConicTo_p_Geom2d_Curve, 0, 0},  {&_swigt__p_Geom2d_BoundedCurve, _p_Geom2d_BoundedCurveTo_p_Geom2d_Curve, 0, 0},  {&_swigt__p_Geom2d_TrimmedCurve, _p_Geom2d_TrimmedCurveTo_p_Geom2d_Curve, 0, 0},  {&_swigt__p_Geom2d_BezierCurve, _p_Geom2d_BezierCurveTo_p_Geom2d_Curve, 0, 0},  {&_swigt__p_Geom2d_Circle, _p_Geom2d_CircleTo_p_Geom2d_Curve, 0, 0},  {&_swigt__p_Geom2d_Line, _p_Geom2d_LineTo_p_Geom2d_Curve, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geom2d_Ellipse[] = {  {&_swigt__p_Geom2d_Ellipse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geom2d_Geometry[] = {  {&_swigt__p_Geom2d_Curve, _p_Geom2d_CurveTo_p_Geom2d_Geometry, 0, 0},  {&_swigt__p_Geom2d_Ellipse, _p_Geom2d_EllipseTo_p_Geom2d_Geometry, 0, 0},  {&_swigt__p_Geom2d_Geometry, 0, 0, 0},  {&_swigt__p_Geom2d_Conic, _p_Geom2d_ConicTo_p_Geom2d_Geometry, 0, 0},  {&_swigt__p_Geom2d_BoundedCurve, _p_Geom2d_BoundedCurveTo_p_Geom2d_Geometry, 0, 0},  {&_swigt__p_Geom2d_TrimmedCurve, _p_Geom2d_TrimmedCurveTo_p_Geom2d_Geometry, 0, 0},  {&_swigt__p_Geom2d_BezierCurve, _p_Geom2d_BezierCurveTo_p_Geom2d_Geometry, 0, 0},  {&_swigt__p_Geom2d_Circle, _p_Geom2d_CircleTo_p_Geom2d_Geometry, 0, 0},  {&_swigt__p_Geom2d_Line, _p_Geom2d_LineTo_p_Geom2d_Geometry, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geom2d_Line[] = {  {&_swigt__p_Geom2d_Line, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geom2d_TrimmedCurve[] = {  {&_swigt__p_Geom2d_TrimmedCurve, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom2d_BezierCurve[] = {  {&_swigt__p_Handle_Geom2d_BezierCurve, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom2d_BoundedCurve[] = {  {&_swigt__p_Handle_Geom2d_BoundedCurve, 0, 0, 0},  {&_swigt__p_Handle_Geom2d_TrimmedCurve, _p_Handle_Geom2d_TrimmedCurveTo_p_Handle_Geom2d_BoundedCurve, 0, 0},  {&_swigt__p_Handle_Geom2d_BezierCurve, _p_Handle_Geom2d_BezierCurveTo_p_Handle_Geom2d_BoundedCurve, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom2d_Circle[] = {  {&_swigt__p_Handle_Geom2d_Circle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom2d_Conic[] = {  {&_swigt__p_Handle_Geom2d_Ellipse, _p_Handle_Geom2d_EllipseTo_p_Handle_Geom2d_Conic, 0, 0},  {&_swigt__p_Handle_Geom2d_Conic, 0, 0, 0},  {&_swigt__p_Handle_Geom2d_Circle, _p_Handle_Geom2d_CircleTo_p_Handle_Geom2d_Conic, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom2d_Curve[] = {  {&_swigt__p_Handle_Geom2d_Curve, 0, 0, 0},  {&_swigt__p_Handle_Geom2d_Ellipse, _p_Handle_Geom2d_EllipseTo_p_Handle_Geom2d_Curve, 0, 0},  {&_swigt__p_Handle_Geom2d_Conic, _p_Handle_Geom2d_ConicTo_p_Handle_Geom2d_Curve, 0, 0},  {&_swigt__p_Handle_Geom2d_BoundedCurve, _p_Handle_Geom2d_BoundedCurveTo_p_Handle_Geom2d_Curve, 0, 0},  {&_swigt__p_Handle_Geom2d_TrimmedCurve, _p_Handle_Geom2d_TrimmedCurveTo_p_Handle_Geom2d_Curve, 0, 0},  {&_swigt__p_Handle_Geom2d_BezierCurve, _p_Handle_Geom2d_BezierCurveTo_p_Handle_Geom2d_Curve, 0, 0},  {&_swigt__p_Handle_Geom2d_Circle, _p_Handle_Geom2d_CircleTo_p_Handle_Geom2d_Curve, 0, 0},  {&_swigt__p_Handle_Geom2d_Line, _p_Handle_Geom2d_LineTo_p_Handle_Geom2d_Curve, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom2d_Ellipse[] = {  {&_swigt__p_Handle_Geom2d_Ellipse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom2d_Geometry[] = {  {&_swigt__p_Handle_Geom2d_Curve, _p_Handle_Geom2d_CurveTo_p_Handle_Geom2d_Geometry, 0, 0},  {&_swigt__p_Handle_Geom2d_Ellipse, _p_Handle_Geom2d_EllipseTo_p_Handle_Geom2d_Geometry, 0, 0},  {&_swigt__p_Handle_Geom2d_Geometry, 0, 0, 0},  {&_swigt__p_Handle_Geom2d_Conic, _p_Handle_Geom2d_ConicTo_p_Handle_Geom2d_Geometry, 0, 0},  {&_swigt__p_Handle_Geom2d_BoundedCurve, _p_Handle_Geom2d_BoundedCurveTo_p_Handle_Geom2d_Geometry, 0, 0},  {&_swigt__p_Handle_Geom2d_TrimmedCurve, _p_Handle_Geom2d_TrimmedCurveTo_p_Handle_Geom2d_Geometry, 0, 0},  {&_swigt__p_Handle_Geom2d_BezierCurve, _p_Handle_Geom2d_BezierCurveTo_p_Handle_Geom2d_Geometry, 0, 0},  {&_swigt__p_Handle_Geom2d_Circle, _p_Handle_Geom2d_CircleTo_p_Handle_Geom2d_Geometry, 0, 0},  {&_swigt__p_Handle_Geom2d_Line, _p_Handle_Geom2d_LineTo_p_Handle_Geom2d_Geometry, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom2d_Line[] = {  {&_swigt__p_Handle_Geom2d_Line, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Geom2d_TrimmedCurve[] = {  {&_swigt__p_Handle_Geom2d_TrimmedCurve, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_MMgt_TShared[] = {  {&_swigt__p_Handle_MMgt_TShared, 0, 0, 0},  {&_swigt__p_Handle_Geom2d_Curve, _p_Handle_Geom2d_CurveTo_p_Handle_MMgt_TShared, 0, 0},  {&_swigt__p_Handle_Geom2d_Ellipse, _p_Handle_Geom2d_EllipseTo_p_Handle_MMgt_TShared, 0, 0},  {&_swigt__p_Handle_Geom2d_Conic, _p_Handle_Geom2d_ConicTo_p_Handle_MMgt_TShared, 0, 0},  {&_swigt__p_Handle_Geom2d_BoundedCurve, _p_Handle_Geom2d_BoundedCurveTo_p_Handle_MMgt_TShared, 0, 0},  {&_swigt__p_Handle_Geom2d_TrimmedCurve, _p_Handle_Geom2d_TrimmedCurveTo_p_Handle_MMgt_TShared, 0, 0},  {&_swigt__p_Handle_Geom2d_BezierCurve, _p_Handle_Geom2d_BezierCurveTo_p_Handle_MMgt_TShared, 0, 0},  {&_swigt__p_Handle_Geom2d_Geometry, _p_Handle_Geom2d_GeometryTo_p_Handle_MMgt_TShared, 0, 0},  {&_swigt__p_Handle_Geom2d_Circle, _p_Handle_Geom2d_CircleTo_p_Handle_MMgt_TShared, 0, 0},  {&_swigt__p_Handle_Geom2d_Line, _p_Handle_Geom2d_LineTo_p_Handle_MMgt_TShared, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handle_Standard_Transient[] = {  {&_swigt__p_Handle_Standard_Transient, 0, 0, 0},  {&_swigt__p_Handle_MMgt_TShared, _p_Handle_MMgt_TSharedTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Geom2d_Curve, _p_Handle_Geom2d_CurveTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Geom2d_Ellipse, _p_Handle_Geom2d_EllipseTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Geom2d_Conic, _p_Handle_Geom2d_ConicTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Geom2d_BoundedCurve, _p_Handle_Geom2d_BoundedCurveTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Geom2d_TrimmedCurve, _p_Handle_Geom2d_TrimmedCurveTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Geom2d_BezierCurve, _p_Handle_Geom2d_BezierCurveTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Geom2d_Geometry, _p_Handle_Geom2d_GeometryTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Geom2d_Circle, _p_Handle_Geom2d_CircleTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Geom2d_Line, _p_Handle_Geom2d_LineTo_p_Handle_Standard_Transient, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MMgt_TShared[] = {  {&_swigt__p_MMgt_TShared, 0, 0, 0},  {&_swigt__p_Geom2d_Curve, _p_Geom2d_CurveTo_p_MMgt_TShared, 0, 0},  {&_swigt__p_Geom2d_Ellipse, _p_Geom2d_EllipseTo_p_MMgt_TShared, 0, 0},  {&_swigt__p_Geom2d_Conic, _p_Geom2d_ConicTo_p_MMgt_TShared, 0, 0},  {&_swigt__p_Geom2d_BoundedCurve, _p_Geom2d_BoundedCurveTo_p_MMgt_TShared, 0, 0},  {&_swigt__p_Geom2d_TrimmedCurve, _p_Geom2d_TrimmedCurveTo_p_MMgt_TShared, 0, 0},  {&_swigt__p_Geom2d_BezierCurve, _p_Geom2d_BezierCurveTo_p_MMgt_TShared, 0, 0},  {&_swigt__p_Geom2d_Geometry, _p_Geom2d_GeometryTo_p_MMgt_TShared, 0, 0},  {&_swigt__p_Geom2d_Circle, _p_Geom2d_CircleTo_p_MMgt_TShared, 0, 0},  {&_swigt__p_Geom2d_Line, _p_Geom2d_LineTo_p_MMgt_TShared, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Standard_Transient[] = {  {&_swigt__p_Standard_Transient, 0, 0, 0},  {&_swigt__p_MMgt_TShared, _p_MMgt_TSharedTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Geom2d_Curve, _p_Geom2d_CurveTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Geom2d_Ellipse, _p_Geom2d_EllipseTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Geom2d_Conic, _p_Geom2d_ConicTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Geom2d_BoundedCurve, _p_Geom2d_BoundedCurveTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Geom2d_TrimmedCurve, _p_Geom2d_TrimmedCurveTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Geom2d_BezierCurve, _p_Geom2d_BezierCurveTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Geom2d_Geometry, _p_Geom2d_GeometryTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Geom2d_Circle, _p_Geom2d_CircleTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Geom2d_Line, _p_Geom2d_LineTo_p_Standard_Transient, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TColStd_Array1OfReal[] = {  {&_swigt__p_TColStd_Array1OfReal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TColgp_Array1OfPnt2d[] = {  {&_swigt__p_TColgp_Array1OfPnt2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gp_Ax22d[] = {  {&_swigt__p_gp_Ax22d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gp_Ax2d[] = {  {&_swigt__p_gp_Ax2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gp_Circ2d[] = {  {&_swigt__p_gp_Circ2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gp_Dir2d[] = {  {&_swigt__p_gp_Dir2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gp_Elips2d[] = {  {&_swigt__p_gp_Elips2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gp_Lin2d[] = {  {&_swigt__p_gp_Lin2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gp_Pnt2d[] = {  {&_swigt__p_gp_Pnt2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gp_Trsf2d[] = {  {&_swigt__p_gp_Trsf2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gp_Vec2d[] = {  {&_swigt__p_gp_Vec2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Geom2d_BezierCurve,
  _swigc__p_Geom2d_BoundedCurve,
  _swigc__p_Geom2d_Circle,
  _swigc__p_Geom2d_Conic,
  _swigc__p_Geom2d_Curve,
  _swigc__p_Geom2d_Ellipse,
  _swigc__p_Geom2d_Geometry,
  _swigc__p_Geom2d_Line,
  _swigc__p_Geom2d_TrimmedCurve,
  _swigc__p_Handle_Geom2d_BezierCurve,
  _swigc__p_Handle_Geom2d_BoundedCurve,
  _swigc__p_Handle_Geom2d_Circle,
  _swigc__p_Handle_Geom2d_Conic,
  _swigc__p_Handle_Geom2d_Curve,
  _swigc__p_Handle_Geom2d_Ellipse,
  _swigc__p_Handle_Geom2d_Geometry,
  _swigc__p_Handle_Geom2d_Line,
  _swigc__p_Handle_Geom2d_TrimmedCurve,
  _swigc__p_Handle_MMgt_TShared,
  _swigc__p_Handle_Standard_Transient,
  _swigc__p_MMgt_TShared,
  _swigc__p_Standard_Transient,
  _swigc__p_TColStd_Array1OfReal,
  _swigc__p_TColgp_Array1OfPnt2d,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_gp_Ax22d,
  _swigc__p_gp_Ax2d,
  _swigc__p_gp_Circ2d,
  _swigc__p_gp_Dir2d,
  _swigc__p_gp_Elips2d,
  _swigc__p_gp_Lin2d,
  _swigc__p_gp_Pnt2d,
  _swigc__p_gp_Trsf2d,
  _swigc__p_gp_Vec2d,
  _swigc__p_int,
  _swigc__p_std__ostream,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




#include <assert.h>

SWIGRUNTIME void
SWIG_V8_SetModule(void *, swig_module_info *swig_module) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::External> mod = SWIGV8_EXTERNAL_NEW(swig_module);
  assert(!mod.IsEmpty());
  global_obj->SetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"), mod);
}

SWIGRUNTIME swig_module_info *
SWIG_V8_GetModule(void *) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::Value> moduleinfo = global_obj->GetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"));

  if (moduleinfo.IsEmpty())
  {
    // It's not yet loaded
    return 0;
  }

  v8::Local<v8::External> moduleinfo_extern = v8::Local<v8::External>::Cast(moduleinfo);

  if (moduleinfo_extern.IsEmpty())
  {
    // Something's not right
    return 0;
  }

  void *ptr = moduleinfo_extern->Value();
  assert(ptr);
  swig_module_info *retptr = static_cast<swig_module_info *>(ptr);
  assert(retptr);
  return retptr;
}

#define SWIG_GetModule(clientdata)                SWIG_V8_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_V8_SetModule(clientdata, pointer)


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


// Note: 'extern "C"'' disables name mangling which makes it easier to load the symbol manually
// TODO: is it ok to do that?
extern "C"
#if (NODE_MODULE_VERSION < 0x000C)
void SWIGV8_INIT (v8::Handle<v8::Object> exports)
#else
void SWIGV8_INIT (v8::Handle<v8::Object> exports, v8::Handle<v8::Object> /*module*/)
#endif
{
  SWIG_InitializeModule(static_cast<void *>(&exports));

  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> exports_obj = exports;


  // a class template for creating proxies of undefined types
  SWIGV8_SET_CLASS_TEMPL(SWIGV8_SWIGTYPE_Proxy_class_templ, SWIGV8_CreateClassTemplate("SwigProxy"));

  /* create objects for namespaces */
  

  /* create class templates */
  /* Name: _exports_Standard_Transient, Type: p_Standard_Transient, Dtor: _wrap_delete_Standard_Transient */
v8::Handle<v8::FunctionTemplate> _exports_Standard_Transient_class = SWIGV8_CreateClassTemplate("_exports_Standard_Transient");
SWIGV8_SET_CLASS_TEMPL(_exports_Standard_Transient_clientData.class_templ, _exports_Standard_Transient_class);
_exports_Standard_Transient_clientData.dtor = _wrap_delete_Standard_Transient;
if (SWIGTYPE_p_Standard_Transient->clientdata == 0) {
  SWIGTYPE_p_Standard_Transient->clientdata = &_exports_Standard_Transient_clientData;
}
/* Name: _exports_MMgt_TShared, Type: p_MMgt_TShared, Dtor: _wrap_delete_MMgt_TShared */
v8::Handle<v8::FunctionTemplate> _exports_MMgt_TShared_class = SWIGV8_CreateClassTemplate("_exports_MMgt_TShared");
SWIGV8_SET_CLASS_TEMPL(_exports_MMgt_TShared_clientData.class_templ, _exports_MMgt_TShared_class);
_exports_MMgt_TShared_clientData.dtor = _wrap_delete_MMgt_TShared;
if (SWIGTYPE_p_MMgt_TShared->clientdata == 0) {
  SWIGTYPE_p_MMgt_TShared->clientdata = &_exports_MMgt_TShared_clientData;
}
/* Name: _exports_Handle_Standard_Transient, Type: p_Handle_Standard_Transient, Dtor: _wrap_delete_Handle_Standard_Transient */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Standard_Transient_class = SWIGV8_CreateClassTemplate("_exports_Handle_Standard_Transient");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_Standard_Transient_clientData.class_templ, _exports_Handle_Standard_Transient_class);
_exports_Handle_Standard_Transient_clientData.dtor = _wrap_delete_Handle_Standard_Transient;
if (SWIGTYPE_p_Handle_Standard_Transient->clientdata == 0) {
  SWIGTYPE_p_Handle_Standard_Transient->clientdata = &_exports_Handle_Standard_Transient_clientData;
}
/* Name: _exports_Handle_MMgt_TShared, Type: p_Handle_MMgt_TShared, Dtor: _wrap_delete_Handle_MMgt_TShared */
v8::Handle<v8::FunctionTemplate> _exports_Handle_MMgt_TShared_class = SWIGV8_CreateClassTemplate("_exports_Handle_MMgt_TShared");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_MMgt_TShared_clientData.class_templ, _exports_Handle_MMgt_TShared_class);
_exports_Handle_MMgt_TShared_clientData.dtor = _wrap_delete_Handle_MMgt_TShared;
if (SWIGTYPE_p_Handle_MMgt_TShared->clientdata == 0) {
  SWIGTYPE_p_Handle_MMgt_TShared->clientdata = &_exports_Handle_MMgt_TShared_clientData;
}
/* Name: _exports_Geometry, Type: p_Geom2d_Geometry, Dtor: _wrap_delete_Geometry */
v8::Handle<v8::FunctionTemplate> _exports_Geometry_class = SWIGV8_CreateClassTemplate("_exports_Geometry");
SWIGV8_SET_CLASS_TEMPL(_exports_Geometry_clientData.class_templ, _exports_Geometry_class);
_exports_Geometry_clientData.dtor = _wrap_delete_Geometry;
if (SWIGTYPE_p_Geom2d_Geometry->clientdata == 0) {
  SWIGTYPE_p_Geom2d_Geometry->clientdata = &_exports_Geometry_clientData;
}
/* Name: _exports_Curve, Type: p_Geom2d_Curve, Dtor: _wrap_delete_Curve */
v8::Handle<v8::FunctionTemplate> _exports_Curve_class = SWIGV8_CreateClassTemplate("_exports_Curve");
SWIGV8_SET_CLASS_TEMPL(_exports_Curve_clientData.class_templ, _exports_Curve_class);
_exports_Curve_clientData.dtor = _wrap_delete_Curve;
if (SWIGTYPE_p_Geom2d_Curve->clientdata == 0) {
  SWIGTYPE_p_Geom2d_Curve->clientdata = &_exports_Curve_clientData;
}
/* Name: _exports_Line, Type: p_Geom2d_Line, Dtor: _wrap_delete_Line */
v8::Handle<v8::FunctionTemplate> _exports_Line_class = SWIGV8_CreateClassTemplate("_exports_Line");
SWIGV8_SET_CLASS_TEMPL(_exports_Line_clientData.class_templ, _exports_Line_class);
_exports_Line_clientData.dtor = _wrap_delete_Line;
if (SWIGTYPE_p_Geom2d_Line->clientdata == 0) {
  SWIGTYPE_p_Geom2d_Line->clientdata = &_exports_Line_clientData;
}
/* Name: _exports_Conic, Type: p_Geom2d_Conic, Dtor: _wrap_delete_Conic */
v8::Handle<v8::FunctionTemplate> _exports_Conic_class = SWIGV8_CreateClassTemplate("_exports_Conic");
SWIGV8_SET_CLASS_TEMPL(_exports_Conic_clientData.class_templ, _exports_Conic_class);
_exports_Conic_clientData.dtor = _wrap_delete_Conic;
if (SWIGTYPE_p_Geom2d_Conic->clientdata == 0) {
  SWIGTYPE_p_Geom2d_Conic->clientdata = &_exports_Conic_clientData;
}
/* Name: _exports_Circle, Type: p_Geom2d_Circle, Dtor: _wrap_delete_Circle */
v8::Handle<v8::FunctionTemplate> _exports_Circle_class = SWIGV8_CreateClassTemplate("_exports_Circle");
SWIGV8_SET_CLASS_TEMPL(_exports_Circle_clientData.class_templ, _exports_Circle_class);
_exports_Circle_clientData.dtor = _wrap_delete_Circle;
if (SWIGTYPE_p_Geom2d_Circle->clientdata == 0) {
  SWIGTYPE_p_Geom2d_Circle->clientdata = &_exports_Circle_clientData;
}
/* Name: _exports_Ellipse, Type: p_Geom2d_Ellipse, Dtor: _wrap_delete_Ellipse */
v8::Handle<v8::FunctionTemplate> _exports_Ellipse_class = SWIGV8_CreateClassTemplate("_exports_Ellipse");
SWIGV8_SET_CLASS_TEMPL(_exports_Ellipse_clientData.class_templ, _exports_Ellipse_class);
_exports_Ellipse_clientData.dtor = _wrap_delete_Ellipse;
if (SWIGTYPE_p_Geom2d_Ellipse->clientdata == 0) {
  SWIGTYPE_p_Geom2d_Ellipse->clientdata = &_exports_Ellipse_clientData;
}
/* Name: _exports_BoundedCurve, Type: p_Geom2d_BoundedCurve, Dtor: _wrap_delete_BoundedCurve */
v8::Handle<v8::FunctionTemplate> _exports_BoundedCurve_class = SWIGV8_CreateClassTemplate("_exports_BoundedCurve");
SWIGV8_SET_CLASS_TEMPL(_exports_BoundedCurve_clientData.class_templ, _exports_BoundedCurve_class);
_exports_BoundedCurve_clientData.dtor = _wrap_delete_BoundedCurve;
if (SWIGTYPE_p_Geom2d_BoundedCurve->clientdata == 0) {
  SWIGTYPE_p_Geom2d_BoundedCurve->clientdata = &_exports_BoundedCurve_clientData;
}
/* Name: _exports_TrimmedCurve, Type: p_Geom2d_TrimmedCurve, Dtor: _wrap_delete_TrimmedCurve */
v8::Handle<v8::FunctionTemplate> _exports_TrimmedCurve_class = SWIGV8_CreateClassTemplate("_exports_TrimmedCurve");
SWIGV8_SET_CLASS_TEMPL(_exports_TrimmedCurve_clientData.class_templ, _exports_TrimmedCurve_class);
_exports_TrimmedCurve_clientData.dtor = _wrap_delete_TrimmedCurve;
if (SWIGTYPE_p_Geom2d_TrimmedCurve->clientdata == 0) {
  SWIGTYPE_p_Geom2d_TrimmedCurve->clientdata = &_exports_TrimmedCurve_clientData;
}
/* Name: _exports_BezierCurve, Type: p_Geom2d_BezierCurve, Dtor: _wrap_delete_BezierCurve */
v8::Handle<v8::FunctionTemplate> _exports_BezierCurve_class = SWIGV8_CreateClassTemplate("_exports_BezierCurve");
SWIGV8_SET_CLASS_TEMPL(_exports_BezierCurve_clientData.class_templ, _exports_BezierCurve_class);
_exports_BezierCurve_clientData.dtor = _wrap_delete_BezierCurve;
if (SWIGTYPE_p_Geom2d_BezierCurve->clientdata == 0) {
  SWIGTYPE_p_Geom2d_BezierCurve->clientdata = &_exports_BezierCurve_clientData;
}
/* Name: _exports_Handle_Geometry, Type: p_Handle_Geom2d_Geometry, Dtor: _wrap_delete_Handle_Geometry */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Geometry_class = SWIGV8_CreateClassTemplate("_exports_Handle_Geometry");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_Geometry_clientData.class_templ, _exports_Handle_Geometry_class);
_exports_Handle_Geometry_clientData.dtor = _wrap_delete_Handle_Geometry;
if (SWIGTYPE_p_Handle_Geom2d_Geometry->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom2d_Geometry->clientdata = &_exports_Handle_Geometry_clientData;
}
/* Name: _exports_Handle_Curve, Type: p_Handle_Geom2d_Curve, Dtor: _wrap_delete_Handle_Curve */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Curve_class = SWIGV8_CreateClassTemplate("_exports_Handle_Curve");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_Curve_clientData.class_templ, _exports_Handle_Curve_class);
_exports_Handle_Curve_clientData.dtor = _wrap_delete_Handle_Curve;
if (SWIGTYPE_p_Handle_Geom2d_Curve->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom2d_Curve->clientdata = &_exports_Handle_Curve_clientData;
}
/* Name: _exports_Handle_Line, Type: p_Handle_Geom2d_Line, Dtor: _wrap_delete_Handle_Line */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Line_class = SWIGV8_CreateClassTemplate("_exports_Handle_Line");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_Line_clientData.class_templ, _exports_Handle_Line_class);
_exports_Handle_Line_clientData.dtor = _wrap_delete_Handle_Line;
if (SWIGTYPE_p_Handle_Geom2d_Line->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom2d_Line->clientdata = &_exports_Handle_Line_clientData;
}
/* Name: _exports_Handle_Conic, Type: p_Handle_Geom2d_Conic, Dtor: _wrap_delete_Handle_Conic */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Conic_class = SWIGV8_CreateClassTemplate("_exports_Handle_Conic");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_Conic_clientData.class_templ, _exports_Handle_Conic_class);
_exports_Handle_Conic_clientData.dtor = _wrap_delete_Handle_Conic;
if (SWIGTYPE_p_Handle_Geom2d_Conic->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom2d_Conic->clientdata = &_exports_Handle_Conic_clientData;
}
/* Name: _exports_Handle_Circle, Type: p_Handle_Geom2d_Circle, Dtor: _wrap_delete_Handle_Circle */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Circle_class = SWIGV8_CreateClassTemplate("_exports_Handle_Circle");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_Circle_clientData.class_templ, _exports_Handle_Circle_class);
_exports_Handle_Circle_clientData.dtor = _wrap_delete_Handle_Circle;
if (SWIGTYPE_p_Handle_Geom2d_Circle->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom2d_Circle->clientdata = &_exports_Handle_Circle_clientData;
}
/* Name: _exports_Handle_Ellipse, Type: p_Handle_Geom2d_Ellipse, Dtor: _wrap_delete_Handle_Ellipse */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Ellipse_class = SWIGV8_CreateClassTemplate("_exports_Handle_Ellipse");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_Ellipse_clientData.class_templ, _exports_Handle_Ellipse_class);
_exports_Handle_Ellipse_clientData.dtor = _wrap_delete_Handle_Ellipse;
if (SWIGTYPE_p_Handle_Geom2d_Ellipse->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom2d_Ellipse->clientdata = &_exports_Handle_Ellipse_clientData;
}
/* Name: _exports_Handle_BoundedCurve, Type: p_Handle_Geom2d_BoundedCurve, Dtor: _wrap_delete_Handle_BoundedCurve */
v8::Handle<v8::FunctionTemplate> _exports_Handle_BoundedCurve_class = SWIGV8_CreateClassTemplate("_exports_Handle_BoundedCurve");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_BoundedCurve_clientData.class_templ, _exports_Handle_BoundedCurve_class);
_exports_Handle_BoundedCurve_clientData.dtor = _wrap_delete_Handle_BoundedCurve;
if (SWIGTYPE_p_Handle_Geom2d_BoundedCurve->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom2d_BoundedCurve->clientdata = &_exports_Handle_BoundedCurve_clientData;
}
/* Name: _exports_Handle_TrimmedCurve, Type: p_Handle_Geom2d_TrimmedCurve, Dtor: _wrap_delete_Handle_TrimmedCurve */
v8::Handle<v8::FunctionTemplate> _exports_Handle_TrimmedCurve_class = SWIGV8_CreateClassTemplate("_exports_Handle_TrimmedCurve");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_TrimmedCurve_clientData.class_templ, _exports_Handle_TrimmedCurve_class);
_exports_Handle_TrimmedCurve_clientData.dtor = _wrap_delete_Handle_TrimmedCurve;
if (SWIGTYPE_p_Handle_Geom2d_TrimmedCurve->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom2d_TrimmedCurve->clientdata = &_exports_Handle_TrimmedCurve_clientData;
}
/* Name: _exports_Handle_BezierCurve, Type: p_Handle_Geom2d_BezierCurve, Dtor: _wrap_delete_Handle_BezierCurve */
v8::Handle<v8::FunctionTemplate> _exports_Handle_BezierCurve_class = SWIGV8_CreateClassTemplate("_exports_Handle_BezierCurve");
SWIGV8_SET_CLASS_TEMPL(_exports_Handle_BezierCurve_clientData.class_templ, _exports_Handle_BezierCurve_class);
_exports_Handle_BezierCurve_clientData.dtor = _wrap_delete_Handle_BezierCurve;
if (SWIGTYPE_p_Handle_Geom2d_BezierCurve->clientdata == 0) {
  SWIGTYPE_p_Handle_Geom2d_BezierCurve->clientdata = &_exports_Handle_BezierCurve_clientData;
}


  /* register wrapper functions */
  SWIGV8_AddMemberFunction(_exports_Geometry_class, "mirror", _wrap_Geometry__wrap_Geometry_mirror);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "rotate", _wrap_Geometry_rotate);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "scale", _wrap_Geometry_scale);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "translate", _wrap_Geometry__wrap_Geometry_translate);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "transform", _wrap_Geometry_transform);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "mirrored", _wrap_Geometry__wrap_Geometry_mirrored);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "rotated", _wrap_Geometry_rotated);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "scaled", _wrap_Geometry_scaled);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "transformed", _wrap_Geometry_transformed);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "translated", _wrap_Geometry__wrap_Geometry_translated);
SWIGV8_AddMemberFunction(_exports_Geometry_class, "copy", _wrap_Geometry_copy);
SWIGV8_AddMemberFunction(_exports_Curve_class, "reverse", _wrap_Curve_reverse);
SWIGV8_AddMemberFunction(_exports_Curve_class, "reversedParameter", _wrap_Curve_reversedParameter);
SWIGV8_AddMemberFunction(_exports_Curve_class, "transformedParameter", _wrap_Curve_transformedParameter);
SWIGV8_AddMemberFunction(_exports_Curve_class, "parametricTransformation", _wrap_Curve_parametricTransformation);
SWIGV8_AddMemberFunction(_exports_Curve_class, "reversed", _wrap_Curve_reversed);
SWIGV8_AddMemberFunction(_exports_Curve_class, "firstParameter", _wrap_Curve_firstParameter);
SWIGV8_AddMemberFunction(_exports_Curve_class, "lastParameter", _wrap_Curve_lastParameter);
SWIGV8_AddMemberFunction(_exports_Curve_class, "isClosed", _wrap_Curve_isClosed);
SWIGV8_AddMemberFunction(_exports_Curve_class, "isPeriodic", _wrap_Curve_isPeriodic);
SWIGV8_AddMemberFunction(_exports_Curve_class, "period", _wrap_Curve_period);
SWIGV8_AddMemberFunction(_exports_Curve_class, "continuity", _wrap_Curve_continuity);
SWIGV8_AddMemberFunction(_exports_Curve_class, "isCn", _wrap_Curve_isCn);
SWIGV8_AddMemberFunction(_exports_Curve_class, "d0", _wrap_Curve_d0);
SWIGV8_AddMemberFunction(_exports_Curve_class, "d1", _wrap_Curve_d1);
SWIGV8_AddMemberFunction(_exports_Curve_class, "d2", _wrap_Curve_d2);
SWIGV8_AddMemberFunction(_exports_Curve_class, "d3", _wrap_Curve_d3);
SWIGV8_AddMemberFunction(_exports_Curve_class, "dn", _wrap_Curve_dn);
SWIGV8_AddMemberFunction(_exports_Curve_class, "value", _wrap_Curve_value);
SWIGV8_AddMemberFunction(_exports_Line_class, "setLin2D", _wrap_Line_setLin2D);
SWIGV8_AddMemberFunction(_exports_Line_class, "setDirection", _wrap_Line_setDirection);
SWIGV8_AddMemberFunction(_exports_Line_class, "direction", _wrap_Line_direction);
SWIGV8_AddMemberFunction(_exports_Line_class, "setLocation", _wrap_Line_setLocation);
SWIGV8_AddMemberFunction(_exports_Line_class, "location", _wrap_Line_location);
SWIGV8_AddMemberFunction(_exports_Line_class, "setPosition", _wrap_Line_setPosition);
SWIGV8_AddMemberFunction(_exports_Line_class, "position", _wrap_Line_position);
SWIGV8_AddMemberFunction(_exports_Line_class, "lin2D", _wrap_Line_lin2D);
SWIGV8_AddMemberFunction(_exports_Line_class, "reverse", _wrap_Line_reverse);
SWIGV8_AddMemberFunction(_exports_Line_class, "reversedParameter", _wrap_Line_reversedParameter);
SWIGV8_AddMemberFunction(_exports_Line_class, "firstParameter", _wrap_Line_firstParameter);
SWIGV8_AddMemberFunction(_exports_Line_class, "lastParameter", _wrap_Line_lastParameter);
SWIGV8_AddMemberFunction(_exports_Line_class, "isClosed", _wrap_Line_isClosed);
SWIGV8_AddMemberFunction(_exports_Line_class, "isPeriodic", _wrap_Line_isPeriodic);
SWIGV8_AddMemberFunction(_exports_Line_class, "continuity", _wrap_Line_continuity);
SWIGV8_AddMemberFunction(_exports_Line_class, "distance", _wrap_Line_distance);
SWIGV8_AddMemberFunction(_exports_Line_class, "isCn", _wrap_Line_isCn);
SWIGV8_AddMemberFunction(_exports_Line_class, "d0", _wrap_Line_d0);
SWIGV8_AddMemberFunction(_exports_Line_class, "d1", _wrap_Line_d1);
SWIGV8_AddMemberFunction(_exports_Line_class, "d2", _wrap_Line_d2);
SWIGV8_AddMemberFunction(_exports_Line_class, "d3", _wrap_Line_d3);
SWIGV8_AddMemberFunction(_exports_Line_class, "dn", _wrap_Line_dn);
SWIGV8_AddMemberFunction(_exports_Line_class, "transform", _wrap_Line_transform);
SWIGV8_AddMemberFunction(_exports_Line_class, "transformedParameter", _wrap_Line_transformedParameter);
SWIGV8_AddMemberFunction(_exports_Line_class, "parametricTransformation", _wrap_Line_parametricTransformation);
SWIGV8_AddMemberFunction(_exports_Line_class, "copy", _wrap_Line_copy);
SWIGV8_AddMemberFunction(_exports_Conic_class, "setAxis", _wrap_Conic_setAxis);
SWIGV8_AddMemberFunction(_exports_Conic_class, "setXaxis", _wrap_Conic_setXaxis);
SWIGV8_AddMemberFunction(_exports_Conic_class, "setYaxis", _wrap_Conic_setYaxis);
SWIGV8_AddMemberFunction(_exports_Conic_class, "setLocation", _wrap_Conic_setLocation);
SWIGV8_AddMemberFunction(_exports_Conic_class, "xaxis", _wrap_Conic_xaxis);
SWIGV8_AddMemberFunction(_exports_Conic_class, "yaxis", _wrap_Conic_yaxis);
SWIGV8_AddMemberFunction(_exports_Conic_class, "eccentricity", _wrap_Conic_eccentricity);
SWIGV8_AddMemberFunction(_exports_Conic_class, "location", _wrap_Conic_location);
SWIGV8_AddMemberFunction(_exports_Conic_class, "position", _wrap_Conic_position);
SWIGV8_AddMemberFunction(_exports_Conic_class, "reverse", _wrap_Conic_reverse);
SWIGV8_AddMemberFunction(_exports_Conic_class, "reversedParameter", _wrap_Conic_reversedParameter);
SWIGV8_AddMemberFunction(_exports_Conic_class, "continuity", _wrap_Conic_continuity);
SWIGV8_AddMemberFunction(_exports_Conic_class, "isCn", _wrap_Conic_isCn);
SWIGV8_AddMemberFunction(_exports_Circle_class, "setCirc2D", _wrap_Circle_setCirc2D);
SWIGV8_AddMemberFunction(_exports_Circle_class, "setRadius", _wrap_Circle_setRadius);
SWIGV8_AddMemberFunction(_exports_Circle_class, "circ2D", _wrap_Circle_circ2D);
SWIGV8_AddMemberFunction(_exports_Circle_class, "radius", _wrap_Circle_radius);
SWIGV8_AddMemberFunction(_exports_Circle_class, "reversedParameter", _wrap_Circle_reversedParameter);
SWIGV8_AddMemberFunction(_exports_Circle_class, "eccentricity", _wrap_Circle_eccentricity);
SWIGV8_AddMemberFunction(_exports_Circle_class, "firstParameter", _wrap_Circle_firstParameter);
SWIGV8_AddMemberFunction(_exports_Circle_class, "lastParameter", _wrap_Circle_lastParameter);
SWIGV8_AddMemberFunction(_exports_Circle_class, "isClosed", _wrap_Circle_isClosed);
SWIGV8_AddMemberFunction(_exports_Circle_class, "isPeriodic", _wrap_Circle_isPeriodic);
SWIGV8_AddMemberFunction(_exports_Circle_class, "d0", _wrap_Circle_d0);
SWIGV8_AddMemberFunction(_exports_Circle_class, "d1", _wrap_Circle_d1);
SWIGV8_AddMemberFunction(_exports_Circle_class, "d2", _wrap_Circle_d2);
SWIGV8_AddMemberFunction(_exports_Circle_class, "d3", _wrap_Circle_d3);
SWIGV8_AddMemberFunction(_exports_Circle_class, "dn", _wrap_Circle_dn);
SWIGV8_AddMemberFunction(_exports_Circle_class, "transform", _wrap_Circle_transform);
SWIGV8_AddMemberFunction(_exports_Circle_class, "copy", _wrap_Circle_copy);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "setElips2D", _wrap_Ellipse_setElips2D);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "setMajorRadius", _wrap_Ellipse_setMajorRadius);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "setMinorRadius", _wrap_Ellipse_setMinorRadius);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "elips2D", _wrap_Ellipse_elips2D);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "reversedParameter", _wrap_Ellipse_reversedParameter);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "directrix1", _wrap_Ellipse_directrix1);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "directrix2", _wrap_Ellipse_directrix2);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "eccentricity", _wrap_Ellipse_eccentricity);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "focal", _wrap_Ellipse_focal);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "focus1", _wrap_Ellipse_focus1);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "focus2", _wrap_Ellipse_focus2);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "majorRadius", _wrap_Ellipse_majorRadius);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "minorRadius", _wrap_Ellipse_minorRadius);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "parameter", _wrap_Ellipse_parameter);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "firstParameter", _wrap_Ellipse_firstParameter);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "lastParameter", _wrap_Ellipse_lastParameter);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "isClosed", _wrap_Ellipse_isClosed);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "isPeriodic", _wrap_Ellipse_isPeriodic);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "d0", _wrap_Ellipse_d0);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "d1", _wrap_Ellipse_d1);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "d2", _wrap_Ellipse_d2);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "d3", _wrap_Ellipse_d3);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "dn", _wrap_Ellipse_dn);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "transform", _wrap_Ellipse_transform);
SWIGV8_AddMemberFunction(_exports_Ellipse_class, "copy", _wrap_Ellipse_copy);
SWIGV8_AddMemberFunction(_exports_BoundedCurve_class, "endPoint", _wrap_BoundedCurve_endPoint);
SWIGV8_AddMemberFunction(_exports_BoundedCurve_class, "startPoint", _wrap_BoundedCurve_startPoint);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "reverse", _wrap_TrimmedCurve_reverse);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "reversedParameter", _wrap_TrimmedCurve_reversedParameter);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "setTrim", _wrap_TrimmedCurve_setTrim);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "basisCurve", _wrap_TrimmedCurve_basisCurve);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "continuity", _wrap_TrimmedCurve_continuity);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "isCn", _wrap_TrimmedCurve_isCn);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "endPoint", _wrap_TrimmedCurve_endPoint);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "firstParameter", _wrap_TrimmedCurve_firstParameter);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "isClosed", _wrap_TrimmedCurve_isClosed);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "isPeriodic", _wrap_TrimmedCurve_isPeriodic);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "period", _wrap_TrimmedCurve_period);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "lastParameter", _wrap_TrimmedCurve_lastParameter);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "startPoint", _wrap_TrimmedCurve_startPoint);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "d0", _wrap_TrimmedCurve_d0);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "d1", _wrap_TrimmedCurve_d1);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "d2", _wrap_TrimmedCurve_d2);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "d3", _wrap_TrimmedCurve_d3);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "dn", _wrap_TrimmedCurve_dn);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "transform", _wrap_TrimmedCurve_transform);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "transformedParameter", _wrap_TrimmedCurve_transformedParameter);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "parametricTransformation", _wrap_TrimmedCurve_parametricTransformation);
SWIGV8_AddMemberFunction(_exports_TrimmedCurve_class, "copy", _wrap_TrimmedCurve_copy);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "increase", _wrap_BezierCurve_increase);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "insertPoleAfter", _wrap_BezierCurve_insertPoleAfter);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "insertPoleBefore", _wrap_BezierCurve_insertPoleBefore);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "removePole", _wrap_BezierCurve_removePole);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "reverse", _wrap_BezierCurve_reverse);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "reversedParameter", _wrap_BezierCurve_reversedParameter);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "segment", _wrap_BezierCurve_segment);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "setPole", _wrap_BezierCurve__wrap_BezierCurve_setPole);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "setWeight", _wrap_BezierCurve_setWeight);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "isClosed", _wrap_BezierCurve_isClosed);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "isCn", _wrap_BezierCurve_isCn);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "isPeriodic", _wrap_BezierCurve_isPeriodic);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "isRational", _wrap_BezierCurve_isRational);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "continuity", _wrap_BezierCurve_continuity);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "degree", _wrap_BezierCurve_degree);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "d0", _wrap_BezierCurve_d0);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "d1", _wrap_BezierCurve_d1);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "d2", _wrap_BezierCurve_d2);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "d3", _wrap_BezierCurve_d3);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "dn", _wrap_BezierCurve_dn);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "endPoint", _wrap_BezierCurve_endPoint);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "firstParameter", _wrap_BezierCurve_firstParameter);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "lastParameter", _wrap_BezierCurve_lastParameter);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "nbPoles", _wrap_BezierCurve_nbPoles);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "pole", _wrap_BezierCurve_pole);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "poles", _wrap_BezierCurve_poles);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "startPoint", _wrap_BezierCurve_startPoint);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "weight", _wrap_BezierCurve_weight);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "weights", _wrap_BezierCurve_weights);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "transform", _wrap_BezierCurve_transform);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "resolution", _wrap_BezierCurve_resolution);
SWIGV8_AddMemberFunction(_exports_BezierCurve_class, "copy", _wrap_BezierCurve_copy);


  /* setup inheritances */
  if (SWIGTYPE_p_Standard_Transient->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Standard_Transient->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_MMgt_TShared_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Standard_Transient->clientdata)->class_templ);
#else
  _exports_MMgt_TShared_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Standard_Transient->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_MMgt_TShared _Standard_Transient\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_MMgt_TShared _Standard_Transient\n");
#endif
}
if (SWIGTYPE_p_Handle_Standard_Transient->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Standard_Transient->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_MMgt_TShared_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Standard_Transient->clientdata)->class_templ);
#else
  _exports_Handle_MMgt_TShared_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Standard_Transient->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_MMgt_TShared _Handle_Standard_Transient\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_MMgt_TShared _Handle_Standard_Transient\n");
#endif
}
if (SWIGTYPE_p_MMgt_TShared->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_MMgt_TShared->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Geometry_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_MMgt_TShared->clientdata)->class_templ);
#else
  _exports_Geometry_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_MMgt_TShared->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Geometry _MMgt_TShared\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Geometry _MMgt_TShared\n");
#endif
}
if (SWIGTYPE_p_Geom2d_Geometry->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_Geometry->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Curve_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_Geometry->clientdata)->class_templ);
#else
  _exports_Curve_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_Geometry->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Curve _Geom2d_Geometry\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Curve _Geom2d_Geometry\n");
#endif
}
if (SWIGTYPE_p_Geom2d_Curve->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_Curve->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Line_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_Curve->clientdata)->class_templ);
#else
  _exports_Line_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_Curve->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Line _Geom2d_Curve\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Line _Geom2d_Curve\n");
#endif
}
if (SWIGTYPE_p_Geom2d_Curve->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_Curve->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Conic_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_Curve->clientdata)->class_templ);
#else
  _exports_Conic_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_Curve->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Conic _Geom2d_Curve\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Conic _Geom2d_Curve\n");
#endif
}
if (SWIGTYPE_p_Geom2d_Conic->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_Conic->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Circle_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_Conic->clientdata)->class_templ);
#else
  _exports_Circle_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_Conic->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Circle _Geom2d_Conic\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Circle _Geom2d_Conic\n");
#endif
}
if (SWIGTYPE_p_Geom2d_Conic->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_Conic->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Ellipse_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_Conic->clientdata)->class_templ);
#else
  _exports_Ellipse_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_Conic->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Ellipse _Geom2d_Conic\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Ellipse _Geom2d_Conic\n");
#endif
}
if (SWIGTYPE_p_Geom2d_Curve->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_Curve->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_BoundedCurve_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_Curve->clientdata)->class_templ);
#else
  _exports_BoundedCurve_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_Curve->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_BoundedCurve _Geom2d_Curve\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_BoundedCurve _Geom2d_Curve\n");
#endif
}
if (SWIGTYPE_p_Geom2d_BoundedCurve->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_BoundedCurve->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_TrimmedCurve_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_BoundedCurve->clientdata)->class_templ);
#else
  _exports_TrimmedCurve_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_BoundedCurve->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_TrimmedCurve _Geom2d_BoundedCurve\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_TrimmedCurve _Geom2d_BoundedCurve\n");
#endif
}
if (SWIGTYPE_p_Geom2d_BoundedCurve->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_BoundedCurve->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_BezierCurve_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_BoundedCurve->clientdata)->class_templ);
#else
  _exports_BezierCurve_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Geom2d_BoundedCurve->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_BezierCurve _Geom2d_BoundedCurve\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_BezierCurve _Geom2d_BoundedCurve\n");
#endif
}
if (SWIGTYPE_p_Handle_MMgt_TShared->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_MMgt_TShared->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_Geometry_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_MMgt_TShared->clientdata)->class_templ);
#else
  _exports_Handle_Geometry_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_MMgt_TShared->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_Geometry _Handle_MMgt_TShared\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_Geometry _Handle_MMgt_TShared\n");
#endif
}
if (SWIGTYPE_p_Handle_Geom2d_Geometry->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_Geometry->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_Curve_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_Geometry->clientdata)->class_templ);
#else
  _exports_Handle_Curve_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_Geometry->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_Curve _Handle_Geom2d_Geometry\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_Curve _Handle_Geom2d_Geometry\n");
#endif
}
if (SWIGTYPE_p_Handle_Geom2d_Curve->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_Curve->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_Line_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_Curve->clientdata)->class_templ);
#else
  _exports_Handle_Line_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_Curve->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_Line _Handle_Geom2d_Curve\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_Line _Handle_Geom2d_Curve\n");
#endif
}
if (SWIGTYPE_p_Handle_Geom2d_Curve->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_Curve->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_Conic_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_Curve->clientdata)->class_templ);
#else
  _exports_Handle_Conic_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_Curve->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_Conic _Handle_Geom2d_Curve\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_Conic _Handle_Geom2d_Curve\n");
#endif
}
if (SWIGTYPE_p_Handle_Geom2d_Conic->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_Conic->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_Circle_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_Conic->clientdata)->class_templ);
#else
  _exports_Handle_Circle_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_Conic->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_Circle _Handle_Geom2d_Conic\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_Circle _Handle_Geom2d_Conic\n");
#endif
}
if (SWIGTYPE_p_Handle_Geom2d_Conic->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_Conic->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_Ellipse_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_Conic->clientdata)->class_templ);
#else
  _exports_Handle_Ellipse_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_Conic->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_Ellipse _Handle_Geom2d_Conic\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_Ellipse _Handle_Geom2d_Conic\n");
#endif
}
if (SWIGTYPE_p_Handle_Geom2d_Curve->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_Curve->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_BoundedCurve_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_Curve->clientdata)->class_templ);
#else
  _exports_Handle_BoundedCurve_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_Curve->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_BoundedCurve _Handle_Geom2d_Curve\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_BoundedCurve _Handle_Geom2d_Curve\n");
#endif
}
if (SWIGTYPE_p_Handle_Geom2d_BoundedCurve->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_BoundedCurve->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_TrimmedCurve_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_BoundedCurve->clientdata)->class_templ);
#else
  _exports_Handle_TrimmedCurve_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_BoundedCurve->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_TrimmedCurve _Handle_Geom2d_BoundedCurve\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_TrimmedCurve _Handle_Geom2d_BoundedCurve\n");
#endif
}
if (SWIGTYPE_p_Handle_Geom2d_BoundedCurve->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_BoundedCurve->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Handle_BezierCurve_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_BoundedCurve->clientdata)->class_templ);
#else
  _exports_Handle_BezierCurve_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Handle_Geom2d_BoundedCurve->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Handle_BezierCurve _Handle_Geom2d_BoundedCurve\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Handle_BezierCurve _Handle_Geom2d_BoundedCurve\n");
#endif
}


  /* class instances */
  /* Class: Standard_Transient (_exports_Standard_Transient) */
v8::Handle<v8::FunctionTemplate> _exports_Standard_Transient_class_0 = SWIGV8_CreateClassTemplate("Standard_Transient");
_exports_Standard_Transient_class_0->SetCallHandler(_wrap_new_Standard_Transient);
_exports_Standard_Transient_class_0->Inherit(_exports_Standard_Transient_class);
_exports_Standard_Transient_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Standard_Transient_obj = _exports_Standard_Transient_class_0->GetFunction();
/* Class: MMgt_TShared (_exports_MMgt_TShared) */
v8::Handle<v8::FunctionTemplate> _exports_MMgt_TShared_class_0 = SWIGV8_CreateClassTemplate("MMgt_TShared");
_exports_MMgt_TShared_class_0->SetCallHandler(_wrap_new_MMgt_TShared);
_exports_MMgt_TShared_class_0->Inherit(_exports_MMgt_TShared_class);
_exports_MMgt_TShared_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_MMgt_TShared_obj = _exports_MMgt_TShared_class_0->GetFunction();
/* Class: Handle_Standard_Transient (_exports_Handle_Standard_Transient) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Standard_Transient_class_0 = SWIGV8_CreateClassTemplate("Handle_Standard_Transient");
_exports_Handle_Standard_Transient_class_0->SetCallHandler(_wrap_new_Handle_Standard_Transient);
_exports_Handle_Standard_Transient_class_0->Inherit(_exports_Handle_Standard_Transient_class);
_exports_Handle_Standard_Transient_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_Standard_Transient_obj = _exports_Handle_Standard_Transient_class_0->GetFunction();
/* Class: Handle_MMgt_TShared (_exports_Handle_MMgt_TShared) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_MMgt_TShared_class_0 = SWIGV8_CreateClassTemplate("Handle_MMgt_TShared");
_exports_Handle_MMgt_TShared_class_0->SetCallHandler(_wrap_new_Handle_MMgt_TShared);
_exports_Handle_MMgt_TShared_class_0->Inherit(_exports_Handle_MMgt_TShared_class);
_exports_Handle_MMgt_TShared_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_MMgt_TShared_obj = _exports_Handle_MMgt_TShared_class_0->GetFunction();
/* Class: Geometry (_exports_Geometry) */
v8::Handle<v8::FunctionTemplate> _exports_Geometry_class_0 = SWIGV8_CreateClassTemplate("Geometry");
_exports_Geometry_class_0->SetCallHandler(_wrap_new_veto_Geometry);
_exports_Geometry_class_0->Inherit(_exports_Geometry_class);
_exports_Geometry_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Geometry_obj = _exports_Geometry_class_0->GetFunction();
/* Class: Curve (_exports_Curve) */
v8::Handle<v8::FunctionTemplate> _exports_Curve_class_0 = SWIGV8_CreateClassTemplate("Curve");
_exports_Curve_class_0->SetCallHandler(_wrap_new_veto_Curve);
_exports_Curve_class_0->Inherit(_exports_Curve_class);
_exports_Curve_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Curve_obj = _exports_Curve_class_0->GetFunction();
/* Class: Line (_exports_Line) */
v8::Handle<v8::FunctionTemplate> _exports_Line_class_0 = SWIGV8_CreateClassTemplate("Line");
_exports_Line_class_0->SetCallHandler(_wrap_new_Line);
_exports_Line_class_0->Inherit(_exports_Line_class);
_exports_Line_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Line_obj = _exports_Line_class_0->GetFunction();
/* Class: Conic (_exports_Conic) */
v8::Handle<v8::FunctionTemplate> _exports_Conic_class_0 = SWIGV8_CreateClassTemplate("Conic");
_exports_Conic_class_0->SetCallHandler(_wrap_new_veto_Conic);
_exports_Conic_class_0->Inherit(_exports_Conic_class);
_exports_Conic_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Conic_obj = _exports_Conic_class_0->GetFunction();
/* Class: Circle (_exports_Circle) */
v8::Handle<v8::FunctionTemplate> _exports_Circle_class_0 = SWIGV8_CreateClassTemplate("Circle");
_exports_Circle_class_0->SetCallHandler(_wrap_new_Circle);
_exports_Circle_class_0->Inherit(_exports_Circle_class);
_exports_Circle_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Circle_obj = _exports_Circle_class_0->GetFunction();
/* Class: Ellipse (_exports_Ellipse) */
v8::Handle<v8::FunctionTemplate> _exports_Ellipse_class_0 = SWIGV8_CreateClassTemplate("Ellipse");
_exports_Ellipse_class_0->SetCallHandler(_wrap_new_Ellipse);
_exports_Ellipse_class_0->Inherit(_exports_Ellipse_class);
_exports_Ellipse_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Ellipse_obj = _exports_Ellipse_class_0->GetFunction();
/* Class: BoundedCurve (_exports_BoundedCurve) */
v8::Handle<v8::FunctionTemplate> _exports_BoundedCurve_class_0 = SWIGV8_CreateClassTemplate("BoundedCurve");
_exports_BoundedCurve_class_0->SetCallHandler(_wrap_new_veto_BoundedCurve);
_exports_BoundedCurve_class_0->Inherit(_exports_BoundedCurve_class);
_exports_BoundedCurve_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_BoundedCurve_obj = _exports_BoundedCurve_class_0->GetFunction();
/* Class: TrimmedCurve (_exports_TrimmedCurve) */
v8::Handle<v8::FunctionTemplate> _exports_TrimmedCurve_class_0 = SWIGV8_CreateClassTemplate("TrimmedCurve");
_exports_TrimmedCurve_class_0->SetCallHandler(_wrap_new_TrimmedCurve);
_exports_TrimmedCurve_class_0->Inherit(_exports_TrimmedCurve_class);
_exports_TrimmedCurve_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TrimmedCurve_obj = _exports_TrimmedCurve_class_0->GetFunction();
/* Class: BezierCurve (_exports_BezierCurve) */
v8::Handle<v8::FunctionTemplate> _exports_BezierCurve_class_0 = SWIGV8_CreateClassTemplate("BezierCurve");
_exports_BezierCurve_class_0->SetCallHandler(_wrap_new_BezierCurve);
_exports_BezierCurve_class_0->Inherit(_exports_BezierCurve_class);
_exports_BezierCurve_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_BezierCurve_obj = _exports_BezierCurve_class_0->GetFunction();
/* Class: Handle_Geometry (_exports_Handle_Geometry) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Geometry_class_0 = SWIGV8_CreateClassTemplate("Handle_Geometry");
_exports_Handle_Geometry_class_0->SetCallHandler(_wrap_new_Handle_Geometry);
_exports_Handle_Geometry_class_0->Inherit(_exports_Handle_Geometry_class);
_exports_Handle_Geometry_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_Geometry_obj = _exports_Handle_Geometry_class_0->GetFunction();
/* Class: Handle_Curve (_exports_Handle_Curve) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Curve_class_0 = SWIGV8_CreateClassTemplate("Handle_Curve");
_exports_Handle_Curve_class_0->SetCallHandler(_wrap_new_Handle_Curve);
_exports_Handle_Curve_class_0->Inherit(_exports_Handle_Curve_class);
_exports_Handle_Curve_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_Curve_obj = _exports_Handle_Curve_class_0->GetFunction();
/* Class: Handle_Line (_exports_Handle_Line) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Line_class_0 = SWIGV8_CreateClassTemplate("Handle_Line");
_exports_Handle_Line_class_0->SetCallHandler(_wrap_new_Handle_Line);
_exports_Handle_Line_class_0->Inherit(_exports_Handle_Line_class);
_exports_Handle_Line_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_Line_obj = _exports_Handle_Line_class_0->GetFunction();
/* Class: Handle_Conic (_exports_Handle_Conic) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Conic_class_0 = SWIGV8_CreateClassTemplate("Handle_Conic");
_exports_Handle_Conic_class_0->SetCallHandler(_wrap_new_Handle_Conic);
_exports_Handle_Conic_class_0->Inherit(_exports_Handle_Conic_class);
_exports_Handle_Conic_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_Conic_obj = _exports_Handle_Conic_class_0->GetFunction();
/* Class: Handle_Circle (_exports_Handle_Circle) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Circle_class_0 = SWIGV8_CreateClassTemplate("Handle_Circle");
_exports_Handle_Circle_class_0->SetCallHandler(_wrap_new_Handle_Circle);
_exports_Handle_Circle_class_0->Inherit(_exports_Handle_Circle_class);
_exports_Handle_Circle_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_Circle_obj = _exports_Handle_Circle_class_0->GetFunction();
/* Class: Handle_Ellipse (_exports_Handle_Ellipse) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_Ellipse_class_0 = SWIGV8_CreateClassTemplate("Handle_Ellipse");
_exports_Handle_Ellipse_class_0->SetCallHandler(_wrap_new_Handle_Ellipse);
_exports_Handle_Ellipse_class_0->Inherit(_exports_Handle_Ellipse_class);
_exports_Handle_Ellipse_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_Ellipse_obj = _exports_Handle_Ellipse_class_0->GetFunction();
/* Class: Handle_BoundedCurve (_exports_Handle_BoundedCurve) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_BoundedCurve_class_0 = SWIGV8_CreateClassTemplate("Handle_BoundedCurve");
_exports_Handle_BoundedCurve_class_0->SetCallHandler(_wrap_new_Handle_BoundedCurve);
_exports_Handle_BoundedCurve_class_0->Inherit(_exports_Handle_BoundedCurve_class);
_exports_Handle_BoundedCurve_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_BoundedCurve_obj = _exports_Handle_BoundedCurve_class_0->GetFunction();
/* Class: Handle_TrimmedCurve (_exports_Handle_TrimmedCurve) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_TrimmedCurve_class_0 = SWIGV8_CreateClassTemplate("Handle_TrimmedCurve");
_exports_Handle_TrimmedCurve_class_0->SetCallHandler(_wrap_new_Handle_TrimmedCurve);
_exports_Handle_TrimmedCurve_class_0->Inherit(_exports_Handle_TrimmedCurve_class);
_exports_Handle_TrimmedCurve_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_TrimmedCurve_obj = _exports_Handle_TrimmedCurve_class_0->GetFunction();
/* Class: Handle_BezierCurve (_exports_Handle_BezierCurve) */
v8::Handle<v8::FunctionTemplate> _exports_Handle_BezierCurve_class_0 = SWIGV8_CreateClassTemplate("Handle_BezierCurve");
_exports_Handle_BezierCurve_class_0->SetCallHandler(_wrap_new_Handle_BezierCurve);
_exports_Handle_BezierCurve_class_0->Inherit(_exports_Handle_BezierCurve_class);
_exports_Handle_BezierCurve_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Handle_BezierCurve_obj = _exports_Handle_BezierCurve_class_0->GetFunction();


  /* add static class functions and variables */
  SWIGV8_AddStaticFunction(exports_obj, "GetErrorMessage", _wrap_GetErrorMessage);
SWIGV8_AddStaticFunction(_exports_Circle_obj, "makeCircle", _wrap_Circle__wrap_Circle_makeCircle);
SWIGV8_AddStaticFunction(_exports_TrimmedCurve_obj, "makeArcOfCircle", _wrap_TrimmedCurve__wrap_TrimmedCurve_makeArcOfCircle);
SWIGV8_AddStaticFunction(_exports_TrimmedCurve_obj, "makeSegment", _wrap_TrimmedCurve__wrap_TrimmedCurve_makeSegment);
SWIGV8_AddStaticFunction(_exports_BezierCurve_obj, "maxDegree", _wrap_BezierCurve_maxDegree);


  /* register classes */
  exports_obj->Set(SWIGV8_SYMBOL_NEW("Standard_Transient"), _exports_Standard_Transient_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("MMgt_TShared"), _exports_MMgt_TShared_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_Standard_Transient"), _exports_Handle_Standard_Transient_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_MMgt_TShared"), _exports_Handle_MMgt_TShared_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Geometry"), _exports_Geometry_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Curve"), _exports_Curve_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Line"), _exports_Line_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Conic"), _exports_Conic_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Circle"), _exports_Circle_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Ellipse"), _exports_Ellipse_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("BoundedCurve"), _exports_BoundedCurve_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TrimmedCurve"), _exports_TrimmedCurve_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("BezierCurve"), _exports_BezierCurve_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_Geometry"), _exports_Handle_Geometry_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_Curve"), _exports_Handle_Curve_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_Line"), _exports_Handle_Line_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_Conic"), _exports_Handle_Conic_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_Circle"), _exports_Handle_Circle_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_Ellipse"), _exports_Handle_Ellipse_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_BoundedCurve"), _exports_Handle_BoundedCurve_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_TrimmedCurve"), _exports_Handle_TrimmedCurve_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Handle_BezierCurve"), _exports_Handle_BezierCurve_obj);


  /* create and register namespace objects */
  
}

#if defined(BUILDING_NODE_EXTENSION)
NODE_MODULE(geom2d, geom2d_initialize)
#endif
